import type {
    AnalysisResponse, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è
    UpdateParagraphRequest,
    UpdateParagraphResponse,
    ParagraphTextUpdateRequest
} from '../components/CardView/types';

// –í–†–ï–ú–ï–ù–ù–û –ñ–ï–°–¢–ö–û –ó–ê–î–ê–ï–ú URL –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
const API_BASE_URL = 'http://localhost:8000'; 
// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞: const API_BASE_URL = import.meta.env.VITE_API_URL || '/api';

console.log("[APIClient] Effective API_BASE_URL:", API_BASE_URL);

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ fetch API.
 * @param response - –û–±—ä–µ–∫—Ç Response –æ—Ç fetch.
 * @throws Error —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
 */
async function handleResponseError(response: Response) {
    if (!response.ok) {
        let errorDetail = `HTTP error! Status: ${response.status}`;
        try {
            const errorData = await response.json();
            if (errorData && errorData.detail) {
                // –ï—Å–ª–∏ detail - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ –≤ FastAPI ValidationError),
                // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
                if (Array.isArray(errorData.detail) && errorData.detail.length > 0) {
                    errorDetail = errorData.detail.map((err: any) => `${err.loc?.join(' -> ') || 'field'}: ${err.msg}`).join('; ');
                } else if (typeof errorData.detail === 'string') {
                    errorDetail = errorData.detail;
                }
            }
        } catch (e) {
            // –ï—Å–ª–∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ JSON –∏–ª–∏ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ API", e) // –¢—Ä–µ–±—É–µ—Ç logger
        }
        throw new Error(errorDetail);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
export async function initializeAnalysis(text: string, topic: string, sessionId?: string | null): Promise<AnalysisResponse> {
    console.log('üöÄ API initializeAnalysis called:', { 
        textLength: text.length, 
        topic, 
        sessionId,
        apiUrl: API_BASE_URL 
    })
    
    const requestBody: { text: string; topic: string; session_id?: string | null } = { text, topic };
    if (sessionId) {
        requestBody.session_id = sessionId;
    }

    console.log('üì° Sending request to:', `${API_BASE_URL}/api/analyze`)
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/analyze`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º JSON
            },
            body: JSON.stringify(requestBody),
        });
        
        console.log('üì° Response received:', response.status, response.statusText)
        
        await handleResponseError(response); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        const result = await response.json() as AnalysisResponse;
        console.log('‚úÖ API initializeAnalysis success:', result)
        return result;
    } catch (error) {
        console.error('‚ùå API initializeAnalysis error:', error)
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ session_id
export async function fetchAnalysis(sessionId: string): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/analysis/${sessionId}`, {
        headers: {
            'Accept': 'application/json',
        },
    });
  
    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞
export async function updateParagraph(
    sessionId: string, 
    paragraphId: number, // –í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —ç—Ç–æ paragraph_id
    newText: string
): Promise<UpdateParagraphResponse> {
    const request: UpdateParagraphRequest = {
        session_id: sessionId,
        paragraph_id: paragraphId, // –ü–æ–ª–µ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        text: newText
    };
  
    const response = await fetch(`${API_BASE_URL}/api/update-paragraph`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify(request),
    });
  
    await handleResponseError(response);
    return response.json() as Promise<UpdateParagraphResponse>;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
export async function exportAnalysis(sessionId: string, format: 'json' | 'csv' = 'csv'): Promise<Blob> {
    const response = await fetch(`${API_BASE_URL}/api/export/${sessionId}?format=${format}`);
  
    await handleResponseError(response); // –û—à–∏–±–∫–∏ –∑–¥–µ—Å—å —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    return response.blob();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
export async function refreshFullSemanticAnalysis(sessionId: string): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/analysis/${sessionId}/refresh-semantics`, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
        },
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –∞–±–∑–∞—Ü–µ–≤ –≤ –æ–¥–∏–Ω
export async function mergeParagraphs(
    sessionId: string,
    paragraph_id_1: number,
    paragraph_id_2: number
): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/merge-paragraphs`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify({
            session_id: sessionId,
            paragraph_id_1,
            paragraph_id_2
        }),
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –Ω–∞ –¥–≤–∞
export async function splitParagraph(
    sessionId: string,
    paragraphId: number,
    splitPosition: number
): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/split-paragraph`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify({
            session_id: sessionId,
            paragraph_id: paragraphId,
            split_position: splitPosition
        }),
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∞–±–∑–∞—Ü–µ–≤
export async function reorderParagraphs(
    sessionId: string,
    newOrder: number[]
): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/reorder-paragraphs`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify({
            session_id: sessionId,
            new_order: newOrder
        }),
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
export async function updateTopic(
    sessionId: string,
    newTopic: string
): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/update-topic`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify({
            session_id: sessionId,
            topic: newTopic
        }),
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞
export async function deleteParagraph(
    sessionId: string,
    paragraphId: number
): Promise<AnalysisResponse> {
    const response = await fetch(`${API_BASE_URL}/api/paragraph/${sessionId}/${paragraphId}`, {
        method: 'DELETE',
        headers: {
            'Accept': 'application/json',
        },
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ–º
export async function updateTextAndRestructureParagraph(
    sessionId: string,
    paragraphId: number,
    newText: string
): Promise<AnalysisResponse> {
    const requestBody: ParagraphTextUpdateRequest = {
        session_id: sessionId,
        paragraph_id: paragraphId,
        text: newText
    };

    const response = await fetch(`${API_BASE_URL}/api/paragraph/update-text-and-restructure`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify(requestBody),
    });

    await handleResponseError(response);
    return response.json() as Promise<AnalysisResponse>;
}

// --- Logger (–ø—Ä–æ—Å—Ç–æ–π, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handleResponseError) ---
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ª–æ–≥–≥–µ—Ä –∏–ª–∏ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const logger = {
    warn: (...args: any[]) => console.warn("[APIClient]", ...args),
    error: (...args: any[]) => console.error("[APIClient]", ...args),
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
export async function loadDemoData(): Promise<AnalysisResponse> {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        const [paragraphsResponse, configResponse] = await Promise.all([
            fetch('/card_view_data.json'),
            fetch('/config.json')
        ]);

        if (!paragraphsResponse.ok) {
            throw new Error(`HTTP error fetching demo paragraphs! status: ${paragraphsResponse.status}`);
        }
        if (!configResponse.ok) {
            throw new Error(`HTTP error fetching demo config! status: ${configResponse.status}`);
        }

        const rawParagraphs: any[] = await paragraphsResponse.json();
        const config = await configResponse.json();
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤—Å–µ—Ö –∞–±–∑–∞—Ü–µ–≤ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        const fullText = rawParagraphs.map(p => p.text || "").join("\n\n");
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const topic = config.topicName || "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤, —Ç–æ–∫–µ–Ω–æ–≤ –∏ —á–∞–Ω–∫–∏–Ω–≥–∞";
        
        // –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ API
        return initializeAnalysis(fullText, topic);
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:", error);
        throw error;
    }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞
interface ParagraphMetrics {
  signal_strength: number;
  complexity: number;
  semantic_function?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
export const calculateParagraphMetrics = async (
  sessionId: string,
  paragraphId: number,
  text: string
): Promise<ParagraphMetrics> => {
  const response = await fetch(`${API_BASE_URL}/api/paragraph/${sessionId}/${paragraphId}/metrics`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      text: text,
    }),
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞');
  }

  return response.json();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
export const calculateTextMetrics = async (
  sessionId: string,
  text: string
): Promise<AnalysisResponse> => {
  const response = await fetch(`${API_BASE_URL}/api/analysis/${sessionId}/metrics`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      text: text,
    }),
  });

  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—Å—Ç–∞');
  }

  return response.json();
}; 