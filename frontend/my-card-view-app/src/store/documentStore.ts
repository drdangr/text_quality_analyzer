// –ù–æ–≤—ã–π store –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —á–∞–Ω–∫–æ–≤

import { create } from 'zustand';
import { devtools, subscribeWithSelector } from 'zustand/middleware';
import type { 
  DocumentState, 
  Chunk, 
  ChangeInfo, 
  MetricsUpdateQueue,
  ChunkMetrics 
} from '../types/chunks';
import { 
  createChunksFromText,
  updateChunkPositions,
  recalculateAllChunks,
  getChunkText,
  getAllChunkTexts,
  shouldCreateNewChunks,
  updateChunkMetrics,
  markChunkAsUpdating,
  getStaleChunks,
  validateChunkPositions,
  moveChunk
} from '../utils/chunkUtils';

// UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
interface UIState {
  activePanel: string;
  selectedChunks: string[];
  hoveredChunk: string | null;
  showEditorSettings: boolean;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  fontSize: number;
  fontFamily: string;
  signalMinColor: string;
  signalMaxColor: string;
  complexityMinColor: string;
  complexityMaxColor: string;
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  sortField: 'position' | 'id' | 'signal_strength' | 'complexity' | 'semantic_function';
  sortDirection: 'asc' | 'desc';
  semanticFilter: string;
  searchQuery: string;
}

// –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
interface AppState {
  // === –î–û–ö–£–ú–ï–ù–¢ ===
  document: DocumentState | null;
  loading: boolean;
  error: string | null;
  
  // === UI ===
  ui: UIState;
  
  // === –û–ß–ï–†–ï–î–¨ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ï–¢–†–ò–ö ===
  metricsQueue: MetricsUpdateQueue;
  
  // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
  initializeDocument: (text: string, topic: string) => void;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  updateText: (newText: string, changeInfo?: ChangeInfo) => void;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
  updateChunkMetrics: (chunkId: string, metrics: Partial<ChunkMetrics>) => void;
  queueMetricsUpdate: (chunkId: string, type: 'local' | 'contextual') => void;
  processMetricsQueue: () => Promise<void>;
  
  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤
  moveChunk: (sourceChunkId: string, targetPosition: number) => void;
  
  // UI –¥–µ–π—Å—Ç–≤–∏—è
  setSelectedChunk: (chunkId: string | null) => void;
  setHoveredChunk: (chunkId: string | null) => void;
  updateUISettings: (settings: Partial<UIState>) => void;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getChunkText: (chunkId: string) => string;
  getAllChunkTexts: () => Array<{id: string, text: string}>;
  getFilteredAndSortedChunks: () => Chunk[];
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_UI_STATE: UIState = {
  activePanel: 'editor',
  selectedChunks: [],
  hoveredChunk: null,
  showEditorSettings: false,
  fontSize: 12,
  fontFamily: 'Arial, sans-serif',
  signalMinColor: '#FFFFFF',
  signalMaxColor: '#FFDB58',
  complexityMinColor: '#00FF00',
  complexityMaxColor: '#FF0000',
  sortField: 'position',
  sortDirection: 'asc',
  semanticFilter: 'all',
  searchQuery: ''
};

const DEFAULT_METRICS_QUEUE: MetricsUpdateQueue = {
  localUpdates: new Set(),
  contextualUpdates: new Set()
};

export const useDocumentStore = create<AppState>()(
  devtools(
    subscribeWithSelector((set, get) => ({
      // === –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
      document: null,
      loading: false,
      error: null,
      ui: DEFAULT_UI_STATE,
      metricsQueue: DEFAULT_METRICS_QUEUE,

      // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê ===
      initializeDocument: (text: string, topic: string) => {
        console.log('üö®üö®üö® INITIALIZADOCUMENT –í–´–ó–í–ê–ù–ê! üö®üö®üö®');
        console.log('üìù –ü–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç:', JSON.stringify(text));
        
        console.log('üöÄ –°–ï–ô–ß–ê–° –ë–£–î–ï–ú –í–´–ó–´–í–ê–¢–¨ createChunksFromText!');
        const chunks = createChunksFromText(text);
        console.log('‚úÖ createChunksFromText –ó–ê–í–ï–†–®–ï–ù–ê, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
          chunksCount: chunks.length,
          chunks: chunks.map(c => ({id: c.id.slice(0,8), start: c.start, end: c.end}))
        });
        
        const document: DocumentState = {
          text,
          chunks,
          version: 1,
          metadata: {
            session_id: crypto.randomUUID(),
            topic,
            created_at: new Date().toISOString(),
            last_modified: new Date().toISOString()
          }
        };

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∞–Ω–∫–∏
        if (!validateChunkPositions(chunks, text.length)) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞–Ω–∫–æ–≤' });
          return;
        }

        set({ 
          document,
          error: null,
          loading: false 
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
        chunks.forEach(chunk => {
          get().queueMetricsUpdate(chunk.id, 'local');
        });

        console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', { 
          chunksCount: chunks.length,
          sessionId: document.metadata.session_id 
        });
      },

      // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê ===
      updateText: (newText: string, changeInfo?: ChangeInfo) => {
        const state = get();
        if (!state.document) {
          console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
          return;
        }

        console.log('üî• updateText –í–´–ó–í–ê–ù —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
          newTextLength: newText.length,
          oldTextLength: state.document.text.length,
          newText: JSON.stringify(newText),
          oldText: JSON.stringify(state.document.text),
          changeInfo,
          hasChangeInfo: !!changeInfo
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (newText === state.document.text) {
          console.log('‚ÑπÔ∏è –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          return;
        }

        try {
          let updatedChunks: Chunk[];

          if (changeInfo) {
            console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å changeInfo:', changeInfo);
            
            // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (shouldCreateNewChunks(newText, changeInfo)) {
              // –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —á–∞–Ω–∫–∏
              console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ (–∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)');
              updatedChunks = recalculateAllChunks(newText, state.document.chunks);
              
              // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
              if (updatedChunks.length > 0) {
                const lastChunk = updatedChunks[updatedChunks.length - 1];
                if (lastChunk.end < newText.length) {
                  console.log(`üîß –ö–û–†–†–ï–ö–¶–ò–Ø: —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ —Å ${lastChunk.end} –¥–æ ${newText.length}`);
                  updatedChunks = updatedChunks.map((chunk, index) => 
                    index === updatedChunks.length - 1 
                      ? { ...chunk, end: newText.length, metrics: { ...chunk.metrics, isStale: true } }
                      : chunk
                  );
                }
              }
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏
              console.log('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–∞–Ω–∫–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)');
              updatedChunks = updateChunkPositions(state.document.chunks, changeInfo);
              
              // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
              if (updatedChunks.length > 0) {
                const lastChunk = updatedChunks[updatedChunks.length - 1];
                if (lastChunk.end < newText.length) {
                  console.log(`üîß –ö–û–†–†–ï–ö–¶–ò–Ø: —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ —Å ${lastChunk.end} –¥–æ ${newText.length}`);
                  updatedChunks = updatedChunks.map((chunk, index) => 
                    index === updatedChunks.length - 1 
                      ? { ...chunk, end: newText.length, metrics: { ...chunk.metrics, isStale: true } }
                      : chunk
                  );
                }
              }
            }
          } else {
            // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç
            console.log('üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —á–∞–Ω–∫–æ–≤ (–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)');
            updatedChunks = recalculateAllChunks(newText, state.document.chunks);
            
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
            if (updatedChunks.length > 0) {
              const lastChunk = updatedChunks[updatedChunks.length - 1];
              if (lastChunk.end < newText.length) {
                console.log(`üîß –ö–û–†–†–ï–ö–¶–ò–Ø: —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ —Å ${lastChunk.end} –¥–æ ${newText.length}`);
                updatedChunks = updatedChunks.map((chunk, index) => 
                  index === updatedChunks.length - 1 
                    ? { ...chunk, end: newText.length, metrics: { ...chunk.metrics, isStale: true } }
                    : chunk
                );
              }
            }
          }

          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
            oldChunksCount: state.document.chunks.length,
            newChunksCount: updatedChunks.length,
            updatedChunks: updatedChunks.map(c => ({
              id: c.id.slice(0,8),
              start: c.start,
              end: c.end,
              text: newText.slice(c.start, c.end)
            }))
          });

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if (!validateChunkPositions(updatedChunks, newText.length)) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞–Ω–∫–æ–≤' });
            return;
          }

          const updatedDocument: DocumentState = {
            ...state.document,
            text: newText,
            chunks: updatedChunks,
            version: state.document.version + 1,
            metadata: {
              ...state.document.metadata,
              last_modified: new Date().toISOString()
            }
          };

          set({ document: updatedDocument, error: null });

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
          const staleChunks = getStaleChunks(updatedChunks);
          staleChunks.forEach(chunk => {
            get().queueMetricsUpdate(chunk.id, 'local');
          });

          console.log('‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', { 
            chunksCount: updatedChunks.length,
            staleChunksCount: staleChunks.length 
          });
        } catch (error) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
          set({ error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` });
        }
      },

      // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö ===
      updateChunkMetrics: (chunkId: string, metrics: Partial<ChunkMetrics>) => {
        const state = get();
        if (!state.document) return;

        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —á–∞–Ω–∫–∞:', { chunkId, metrics });

        const updatedChunks = updateChunkMetrics(
          state.document.chunks,
          chunkId,
          metrics
        );

        set({
          document: {
            ...state.document,
            chunks: updatedChunks,
            version: state.document.version + 1
          }
        });
      },

      queueMetricsUpdate: (chunkId: string, type: 'local' | 'contextual') => {
        const state = get();
        const queue = state.metricsQueue;

        if (type === 'local') {
          queue.localUpdates.add(chunkId);
        } else {
          queue.contextualUpdates.add(chunkId);
        }

        // –î–µ–±–∞—É–Ω—Å –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
        if (queue.debounceTimer) {
          clearTimeout(queue.debounceTimer);
        }

        queue.debounceTimer = window.setTimeout(() => {
          get().processMetricsQueue();
        }, 300); // 300ms –¥–µ–±–∞—É–Ω—Å

        set({ metricsQueue: { ...queue } });
      },

      processMetricsQueue: async () => {
        const state = get();
        const queue = state.metricsQueue;

        if (queue.localUpdates.size === 0 && queue.contextualUpdates.size === 0) {
          return;
        }

        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –º–µ—Ç—Ä–∏–∫:', {
          localUpdates: queue.localUpdates.size,
          contextualUpdates: queue.contextualUpdates.size
        });

        // –ü–æ–º–µ—á–∞–µ–º —á–∞–Ω–∫–∏ –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ—Å—è
        const allUpdateIds = new Set([...queue.localUpdates, ...queue.contextualUpdates]);
        let updatedChunks = state.document!.chunks;
        
        allUpdateIds.forEach(chunkId => {
          updatedChunks = markChunkAsUpdating(updatedChunks, chunkId);
        });

        set({
          document: {
            ...state.document!,
            chunks: updatedChunks
          }
        });

        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å—Ä–∞–∑—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        set({
          metricsQueue: {
            localUpdates: new Set(),
            contextualUpdates: new Set()
          }
        });

        // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫
        try {
          // –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç API
          const { calculateParagraphMetrics } = await import('../api/index');
          
          // –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ documentStore –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
          const sessionId = state.document!.metadata.session_id;
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
          for (const chunkId of allUpdateIds) {
            const chunkText = get().getChunkText(chunkId);
            if (chunkText.trim()) {
              console.log(`üîÑ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ —á–∞–Ω–∫–∞ ${chunkId}:`, chunkText.substring(0, 50) + '...');
              
              try {
                // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
                const chunkIndex = state.document!.chunks.findIndex(c => c.id === chunkId);
                if (chunkIndex >= 0) {
                  const metrics = await calculateParagraphMetrics(
                    sessionId,
                    chunkIndex + 1, // API –æ–∂–∏–¥–∞–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å
                    chunkText
                  );
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ documentStore
                  get().updateChunkMetrics(chunkId, {
                    signal_strength: metrics.signal_strength ?? undefined,
                    complexity: metrics.complexity ?? undefined,
                    semantic_function: metrics.semantic_function ?? undefined,
                    isStale: false,
                    isUpdating: false
                  });
                  
                  console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞ ${chunkId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, metrics);
                }
              } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ —á–∞–Ω–∫–∞ ${chunkId}:`, error);
                // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                get().updateChunkMetrics(chunkId, { isUpdating: false });
              }
            }
          }
        } catch (error) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ—Ç—Ä–∏–∫:', error);
          // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
          allUpdateIds.forEach(chunkId => {
            get().updateChunkMetrics(chunkId, { isUpdating: false });
          });
        }
      },

      // === –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ß–ê–ù–ö–û–í ===
      moveChunk: (sourceChunkId: string, targetPosition: number) => {
        const state = get();
        if (!state.document) return;

        console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞–Ω–∫–∞:', { sourceChunkId, targetPosition });

        try {
          const updatedDocument = moveChunk(
            state.document,
            sourceChunkId,
            targetPosition
          );

          set({ document: updatedDocument });

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è)
          updatedDocument.chunks.forEach(chunk => {
            get().queueMetricsUpdate(chunk.id, 'contextual');
          });

          console.log('‚úÖ –ß–∞–Ω–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —á–∞–Ω–∫–∞:', error);
          set({ error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è' });
        }
      },

      // === UI –î–ï–ô–°–¢–í–ò–Ø ===
      setSelectedChunk: (chunkId: string | null) => {
        set(state => ({
          ui: {
            ...state.ui,
            selectedChunks: chunkId ? [chunkId] : []
          }
        }));
      },

      setHoveredChunk: (chunkId: string | null) => {
        set(state => ({
          ui: {
            ...state.ui,
            hoveredChunk: chunkId
          }
        }));
      },

      updateUISettings: (settings: Partial<UIState>) => {
        set(state => ({
          ui: {
            ...state.ui,
            ...settings
          }
        }));
      },

      // === –£–¢–ò–õ–ò–¢–´ ===
      getChunkText: (chunkId: string) => {
        const state = get();
        if (!state.document) return '';
        return getChunkText(state.document, chunkId);
      },

      getAllChunkTexts: () => {
        const state = get();
        if (!state.document) return [];
        return getAllChunkTexts(state.document);
      },

      getFilteredAndSortedChunks: () => {
        const state = get();
        if (!state.document) return [];

        let chunks = [...state.document.chunks];
        const { searchQuery, semanticFilter, sortField, sortDirection } = state.ui;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
        if (searchQuery.trim()) {
          chunks = chunks.filter(chunk => {
            const text = getChunkText(state.document!, chunk.id);
            return text.toLowerCase().includes(searchQuery.toLowerCase());
          });
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if (semanticFilter !== 'all') {
          chunks = chunks.filter(chunk => 
            chunk.metrics.semantic_function === semanticFilter
          );
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        chunks.sort((a, b) => {
          let aValue: any, bValue: any;

          switch (sortField) {
            case 'position':
              aValue = a.start;
              bValue = b.start;
              break;
            case 'signal_strength':
              aValue = a.metrics.signal_strength || 0;
              bValue = b.metrics.signal_strength || 0;
              break;
            case 'complexity':
              aValue = a.metrics.complexity || 0;
              bValue = b.metrics.complexity || 0;
              break;
            case 'semantic_function':
              aValue = a.metrics.semantic_function || '';
              bValue = b.metrics.semantic_function || '';
              break;
            default: // 'id'
              aValue = a.id;
              bValue = b.id;
          }

          if (typeof aValue === 'string') {
            return sortDirection === 'asc' 
              ? aValue.localeCompare(bValue)
              : bValue.localeCompare(aValue);
          } else {
            return sortDirection === 'asc' 
              ? aValue - bValue
              : bValue - aValue;
          }
        });

        return chunks;
      }
    })),
    {
      name: 'document-store'
    }
  )
); 