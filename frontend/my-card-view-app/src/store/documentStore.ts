// –ù–æ–≤—ã–π store –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —á–∞–Ω–∫–æ–≤

import { create } from 'zustand';
import { devtools, subscribeWithSelector } from 'zustand/middleware';
import type { 
  DocumentState, 
  Chunk, 
  ChangeInfo, 
  MetricsUpdateQueue,
  ChunkMetrics,
  SemanticAnalysisProgress
} from '../types/chunks';
import { SemanticUpdateType } from '../types/chunks';
import { 
  createChunksFromText,
  updateChunkPositions,
  recalculateAllChunks,
  getChunkText,
  getAllChunkTexts,
  shouldCreateNewChunks,
  updateChunkMetrics,
  markChunkAsUpdating,
  getStaleChunks,
  validateChunkPositions,
  moveChunk,
  mergeAdjacentChunks,
  reorderChunksInDocument as reorderChunksInDocumentUtil,
  mergeTwoChunks,
  classifySemanticUpdate
} from '../utils/chunkUtils';

// UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
interface UIState {
  activePanel: string;
  selectedChunks: string[];
  hoveredChunk: string | null;
  showEditorSettings: boolean;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  fontSize: number;
  fontFamily: string;
  signalMinColor: string;
  signalMaxColor: string;
  complexityMinColor: string;
  complexityMaxColor: string;
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  sortField: 'position' | 'id' | 'signal_strength' | 'complexity' | 'semantic_function';
  sortDirection: 'asc' | 'desc';
  semanticFilter: string;
  searchQuery: string;
}

// –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
interface AppState {
  // === –î–û–ö–£–ú–ï–ù–¢ ===
  document: DocumentState | null;
  loading: boolean;
  error: string | null;
  
  // === UI ===
  ui: UIState;
  
  // === –û–ß–ï–†–ï–î–¨ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ï–¢–†–ò–ö ===
  metricsQueue: MetricsUpdateQueue;
  
  // === –ü–†–û–ì–†–ï–°–° –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===
  semanticProgress: SemanticAnalysisProgress | null;
  
  // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
  initializeDocument: (text: string, topic: string) => void;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  updateText: (newText: string, changeInfo?: ChangeInfo) => void;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
  updateChunkMetrics: (chunkId: string, metrics: Partial<ChunkMetrics>) => void;
  queueMetricsUpdate: (chunkId: string, type: 'local' | 'contextual') => void;
  processMetricsQueue: () => Promise<void>;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  startSemanticProgress: (type: SemanticUpdateType, totalChunks: number) => void;
  updateSemanticProgress: (processedChunks: number) => void;
  finishSemanticProgress: () => void;
  
  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤
  moveChunk: (sourceChunkId: string, targetPosition: number) => void;
  
  // –°–ª–∏—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞–Ω–∫–æ–≤
  mergeChunks: (sourceChunkId: string, targetChunkId?: string) => void;
  reorderChunks: (oldIndex: number, newIndex: number) => void;
  
  // UI –¥–µ–π—Å—Ç–≤–∏—è
  setSelectedChunk: (chunkId: string | null) => void;
  setHoveredChunk: (chunkId: string | null) => void;
  updateUISettings: (settings: Partial<UIState>) => void;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getChunkText: (chunkId: string) => string;
  getAllChunkTexts: () => Array<{id: string, text: string}>;
  getFilteredAndSortedChunks: () => Chunk[];
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_UI_STATE: UIState = {
  activePanel: 'editor',
  selectedChunks: [],
  hoveredChunk: null,
  showEditorSettings: false,
  fontSize: 12,
  fontFamily: 'Arial, sans-serif',
  signalMinColor: '#FFFFFF',
  signalMaxColor: '#FFDB58',
  complexityMinColor: '#00FF00',
  complexityMaxColor: '#FF0000',
  sortField: 'position',
  sortDirection: 'asc',
  semanticFilter: 'all',
  searchQuery: ''
};

const DEFAULT_METRICS_QUEUE: MetricsUpdateQueue = {
  localUpdates: new Set(),
  contextualUpdates: new Set()
};

export const useDocumentStore = create<AppState>()(
  devtools(
    subscribeWithSelector((set, get) => ({
      // === –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
      document: null,
      loading: false,
      error: null,
      ui: DEFAULT_UI_STATE,
      metricsQueue: DEFAULT_METRICS_QUEUE,
      semanticProgress: null,

      // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê ===
      initializeDocument: (text: string, topic: string) => {
        console.log('üö®üö®üö® INITIALIZADOCUMENT –í–´–ó–í–ê–ù–ê! üö®üö®üö®');
        console.log('üìù –ü–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç:', JSON.stringify(text));
        
        console.log('üöÄ –°–ï–ô–ß–ê–° –ë–£–î–ï–ú –í–´–ó–´–í–ê–¢–¨ createChunksFromText!');
        const chunks = createChunksFromText(text);
        console.log('‚úÖ createChunksFromText –ó–ê–í–ï–†–®–ï–ù–ê, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
          chunksCount: chunks.length,
          chunks: chunks.map(c => ({id: c.id.slice(0,8), start: c.start, end: c.end}))
        });
        
        const document: DocumentState = {
          text,
          chunks,
          version: 1,
          metadata: {
            session_id: crypto.randomUUID(),
            topic,
            created_at: new Date().toISOString(),
            last_modified: new Date().toISOString()
          }
        };

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∞–Ω–∫–∏
        if (!validateChunkPositions(chunks, text.length)) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞–Ω–∫–æ–≤' });
          return;
        }

        set({ 
          document,
          error: null,
          loading: false 
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
        console.log('üåç –ó–∞–ø—É—Å–∫–∞–µ–º –ì–õ–û–ë–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ initializeDocument');
        chunks.forEach(chunk => {
          // –¢–æ–ª—å–∫–æ contextual (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π) –∞–Ω–∞–ª–∏–∑, –ë–ï–ó –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ!
          get().queueMetricsUpdate(chunk.id, 'contextual');
        });

        console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', { 
          chunksCount: chunks.length,
          sessionId: document.metadata.session_id,
          analysisType: '–¢–û–õ–¨–ö–û —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)'
        });
      },

      // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê ===
      updateText: (newText: string, changeInfo?: ChangeInfo) => {
        const state = get();
        if (!state.document) {
          console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
          return;
        }

        console.log('üî• updateText –í–´–ó–í–ê–ù —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
          newTextLength: newText.length,
          oldTextLength: state.document.text.length,
          newText: JSON.stringify(newText),
          oldText: JSON.stringify(state.document.text),
          changeInfo,
          hasChangeInfo: !!changeInfo
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (newText === state.document.text) {
          console.log('‚ÑπÔ∏è –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          return;
        }

        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ó–ê–†–ê–ù–ï–ï
        const semanticUpdateType = classifySemanticUpdate(changeInfo);
        console.log(`üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${semanticUpdateType}`);

        try {
          let updatedChunks: Chunk[];

          if (changeInfo) {
            console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å changeInfo:', changeInfo);
            
            // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (shouldCreateNewChunks(newText, changeInfo)) {
              // –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —á–∞–Ω–∫–∏
              console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ (–∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)');
              updatedChunks = recalculateAllChunks(newText, state.document.chunks);
              
              // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
              if (updatedChunks.length > 0) {
                const lastChunk = updatedChunks[updatedChunks.length - 1];
                if (lastChunk.end < newText.length) {
                  console.log(`üîß –ö–û–†–†–ï–ö–¶–ò–Ø: —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ —Å ${lastChunk.end} –¥–æ ${newText.length}`);
                  updatedChunks = updatedChunks.map((chunk, index) => 
                    index === updatedChunks.length - 1 
                      ? { ...chunk, end: newText.length, metrics: { ...chunk.metrics, isStale: true } }
                      : chunk
                  );
                }
              }
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏
              console.log('üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–∞–Ω–∫–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)');
              updatedChunks = updateChunkPositions(state.document.chunks, changeInfo);
              
              // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
              if (updatedChunks.length > 0) {
                const lastChunk = updatedChunks[updatedChunks.length - 1];
                if (lastChunk.end < newText.length) {
                  console.log(`üîß –ö–û–†–†–ï–ö–¶–ò–Ø: —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ —Å ${lastChunk.end} –¥–æ ${newText.length}`);
                  updatedChunks = updatedChunks.map((chunk, index) => 
                    index === updatedChunks.length - 1 
                      ? { ...chunk, end: newText.length, metrics: { ...chunk.metrics, isStale: true } }
                      : chunk
                  );
                }
              }
            }
          } else {
            // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç
            console.log('üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —á–∞–Ω–∫–æ–≤ (–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)');
            updatedChunks = recalculateAllChunks(newText, state.document.chunks);
            
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
            if (updatedChunks.length > 0) {
              const lastChunk = updatedChunks[updatedChunks.length - 1];
              if (lastChunk.end < newText.length) {
                console.log(`üîß –ö–û–†–†–ï–ö–¶–ò–Ø: —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ —Å ${lastChunk.end} –¥–æ ${newText.length}`);
                updatedChunks = updatedChunks.map((chunk, index) => 
                  index === updatedChunks.length - 1 
                    ? { ...chunk, end: newText.length, metrics: { ...chunk.metrics, isStale: true } }
                    : chunk
                );
              }
            }
          }

          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
            oldChunksCount: state.document.chunks.length,
            newChunksCount: updatedChunks.length,
            updatedChunks: updatedChunks.map(c => ({
              id: c.id.slice(0,8),
              start: c.start,
              end: c.end,
              text: newText.slice(c.start, c.end)
            }))
          });

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if (!validateChunkPositions(updatedChunks, newText.length)) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞–Ω–∫–æ–≤' });
            return;
          }

          const updatedDocument: DocumentState = {
            ...state.document,
            text: newText,
            chunks: updatedChunks,
            version: state.document.version + 1,
            metadata: {
              ...state.document.metadata,
              last_modified: new Date().toISOString()
            }
          };

          set({ document: updatedDocument, error: null });

          // –£–ë–ò–†–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó - —Ç–µ–ø–µ—Ä—å TextEditorPanelV2 —Å–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫
          const staleChunks = getStaleChunks(updatedChunks);
          console.log('‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω (–ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞):', { 
            chunksCount: updatedChunks.length,
            staleChunksCount: staleChunks.length,
            semanticUpdateType: semanticUpdateType,
            note: '–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º –∏–∑ TextEditorPanelV2'
          });
        } catch (error) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', error);
          set({ error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` });
        }
      },

      // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö ===
      updateChunkMetrics: (chunkId: string, metrics: Partial<ChunkMetrics>) => {
        const state = get();
        if (!state.document) return;

        console.log('üîÑ updateChunkMetrics –ù–ê–ß–ê–õ–û - –¢–û–ß–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:', { 
          chunkId: chunkId.slice(0, 8),
          metrics,
          semantic_function_param: metrics.semantic_function,
          semantic_function_type: typeof metrics.semantic_function,
          semantic_function_defined: metrics.semantic_function !== undefined,
          semantic_function_not_null: metrics.semantic_function !== null,
          allMetricsKeys: Object.keys(metrics),
          allMetricsValues: Object.values(metrics),
          stringified: JSON.stringify(metrics)
        });

        // –ù–∞–π–¥–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const oldChunk = state.document.chunks.find(c => c.id === chunkId);
        console.log('üìä –°—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞:', {
          chunkId: chunkId.slice(0, 8),
          oldMetrics: oldChunk?.metrics,
          oldSemanticFunction: oldChunk?.metrics.semantic_function
        });

        const updatedChunks = updateChunkMetrics(
          state.document.chunks,
          chunkId,
          metrics
        );

        // –ù–∞–π–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–∞–Ω–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const updatedChunk = updatedChunks.find(c => c.id === chunkId);
        console.log('‚úÖ updateChunkMetrics –†–ï–ó–£–õ–¨–¢–ê–¢:', {
          chunkId: chunkId.slice(0, 8),
          oldMetrics: state.document.chunks.find(c => c.id === chunkId)?.metrics,
          newMetrics: updatedChunk?.metrics,
          semantic_function_updated: updatedChunk?.metrics.semantic_function,
          isStoreUpdated: state.document.chunks !== updatedChunks
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º store
        const newDocument = {
          ...state.document,
          chunks: updatedChunks,
          version: state.document.version + 1
        };
        
        console.log('üìÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ store:', {
          oldVersion: state.document.version,
          newVersion: newDocument.version,
          chunksChanged: state.document.chunks !== newDocument.chunks
        });

        set({ document: newDocument });
        
        console.log('üîÑ –ü–†–û–í–ï–†–ö–ê: set() –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ store...');
        
        // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —Å–æ—Å—Ç–æ—è–Ω–∏—è store
        setTimeout(() => {
          const freshState = get();
          const freshChunk = freshState.document?.chunks.find(c => c.id === chunkId);
          console.log('üîç –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê store (—á–µ—Ä–µ–∑ setTimeout 0):', {
            chunkId: chunkId.slice(0, 8),
            freshSemanticFunction: freshChunk?.metrics.semantic_function,
            freshIsUpdating: freshChunk?.metrics.isUpdating,
            storeIsUpdated: !!freshChunk?.metrics.semantic_function,
            timestamp: new Date().toISOString()
          });
        }, 0);
      },

      queueMetricsUpdate: (chunkId: string, type: 'local' | 'contextual') => {
        const state = get();
        const queue = state.metricsQueue;

        console.log('üìã queueMetricsUpdate –í–´–ó–í–ê–ù–ê:', {
          chunkId: chunkId.slice(0, 8),
          type,
          currentLocalQueue: Array.from(queue.localUpdates),
          currentContextualQueue: Array.from(queue.contextualUpdates),
          timestamp: new Date().toISOString()
        });

        if (type === 'local') {
          queue.localUpdates.add(chunkId);
        } else {
          queue.contextualUpdates.add(chunkId);
        }

        console.log('üìã queueMetricsUpdate –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', {
          chunkId: chunkId.slice(0, 8),
          type,
          newLocalQueue: Array.from(queue.localUpdates),
          newContextualQueue: Array.from(queue.contextualUpdates)
        });

        // –î–µ–±–∞—É–Ω—Å –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
        if (queue.debounceTimer) {
          clearTimeout(queue.debounceTimer);
        }

        queue.debounceTimer = window.setTimeout(() => {
          console.log('‚è∞ queueMetricsUpdate –¥–µ–±–∞—É–Ω—Å —Å—Ä–∞–±–æ—Ç–∞–ª - –≤—ã–∑—ã–≤–∞–µ–º processMetricsQueue');
          get().processMetricsQueue();
        }, 300); // 300ms –¥–µ–±–∞—É–Ω—Å

        set({ metricsQueue: { ...queue } });
      },

      processMetricsQueue: async () => {
        try {
          const state = get();
          const queue = state.metricsQueue;

          console.log('üîÑ processMetricsQueue –í–´–ó–í–ê–ù–ê:', {
            localUpdates: Array.from(queue.localUpdates),
            contextualUpdates: Array.from(queue.contextualUpdates),
            hasDocument: !!state.document,
            timestamp: new Date().toISOString()
          });

          if (queue.localUpdates.size === 0 && queue.contextualUpdates.size === 0) {
            console.log('‚è≠Ô∏è processMetricsQueue: –ø—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å, –≤—ã—Ö–æ–¥–∏–º');
            return;
          }

          console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –º–µ—Ç—Ä–∏–∫:', {
            localUpdates: queue.localUpdates.size,
            contextualUpdates: queue.contextualUpdates.size
          });

          // –ü–æ–º–µ—á–∞–µ–º —á–∞–Ω–∫–∏ –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ—Å—è
          const allUpdateIds = new Set([...queue.localUpdates, ...queue.contextualUpdates]);
          
          console.log('üè∑Ô∏è –ü–æ–º–µ—á–∞–µ–º —á–∞–Ω–∫–∏ –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ—Å—è:', {
            allUpdateIds: Array.from(allUpdateIds),
            localUpdates: Array.from(queue.localUpdates),
            contextualUpdates: Array.from(queue.contextualUpdates)
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏–∏ –æ—á–µ—Ä–µ–¥–µ–π –î–û –æ—á–∏—Å—Ç–∫–∏
          const localUpdatesCopy = new Set(queue.localUpdates);
          const contextualUpdatesCopy = new Set(queue.contextualUpdates);
          const semanticUpdateType = queue.semanticUpdateType || SemanticUpdateType.LOCAL;
          
          let updatedChunks = state.document!.chunks;
          
          allUpdateIds.forEach(chunkId => {
            try {
              console.log(`üè∑Ô∏è –ü–æ–º–µ—á–∞–µ–º —á–∞–Ω–∫ ${chunkId.slice(0, 8)} –∫–∞–∫ isUpdating=true`);
              updatedChunks = markChunkAsUpdating(updatedChunks, chunkId);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
              const updatedChunk = updatedChunks.find(c => c.id === chunkId);
              console.log(`‚úÖ –ß–∞–Ω–∫ ${chunkId.slice(0, 8)} –ø–æ–º–µ—á–µ–Ω:`, {
                isUpdating: updatedChunk?.metrics.isUpdating,
                isStale: updatedChunk?.metrics.isStale
              });
            } catch (error) {
              console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkId} –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è—é—â–∏–π—Å—è:`, error);
            }
          });

          set({
            document: {
              ...state.document!,
              chunks: updatedChunks
            }
          });
          
          console.log('üìÑ Store –æ–±–Ω–æ–≤–ª–µ–Ω —Å isUpdating —Ñ–ª–∞–≥–∞–º–∏');

          // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å—Ä–∞–∑—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          set({
            metricsQueue: {
              localUpdates: new Set(),
              contextualUpdates: new Set()
            }
          });

          // === –≠–¢–ê–ü 1: –õ–û–ö–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó (–°–ò–ù–•–†–û–ù–ù–û) ===
          if (localUpdatesCopy.size > 0) {
            try {
              console.log(`üìä –≠–¢–ê–ü 1: –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${localUpdatesCopy.size} —á–∞–Ω–∫–æ–≤ (signal_strength, complexity)`);
              
              // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
              let getBatchChunkLocalMetrics, getChunkLocalMetrics;
              try {
                const apiModule = await import('../api/index');
                getBatchChunkLocalMetrics = apiModule.getBatchChunkLocalMetrics;
                getChunkLocalMetrics = apiModule.getChunkLocalMetrics;
              } catch (importError) {
                console.warn('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API –º–æ–¥—É–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', importError);
                localUpdatesCopy.forEach(chunkId => {
                  try {
                    get().updateChunkMetrics(chunkId, { isUpdating: false });
                  } catch (flagError) {
                    console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                  }
                });
                return;
              }

              if (!getBatchChunkLocalMetrics || !getChunkLocalMetrics) {
                console.warn('API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                localUpdatesCopy.forEach(chunkId => {
                  try {
                    get().updateChunkMetrics(chunkId, { isUpdating: false });
                  } catch (flagError) {
                    console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                  }
                });
                return;
              }
              
              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
              const currentState = get();
              if (!currentState.document || !currentState.document.metadata) {
                console.warn('–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
                return;
              }
              
              const topic = currentState.document.metadata.topic;
              
              // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
              const localChunks = Array.from(localUpdatesCopy).map(chunkId => ({
                id: chunkId,
                text: get().getChunkText(chunkId)
              })).filter(chunk => chunk.text && chunk.text.trim());

              if (localChunks.length > 0) {
                console.log(`üîÑ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è ${localChunks.length} —á–∞–Ω–∫–æ–≤`);

                try {
                  const batchResult = await getBatchChunkLocalMetrics(localChunks, topic);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                  if (batchResult && (batchResult as any).results) {
                    (batchResult as any).results.forEach((result: any) => {
                      try {
                        const chunkId = result.chunk_id;
                        const metrics = result.metrics as any;
                        
                        console.log('üì¶ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ —Å API:', {
                          chunkId: chunkId,
                          rawMetrics: metrics,
                          semantic_function: metrics.semantic_function,
                          semantic_method: metrics.semantic_method,
                          semantic_error: metrics.semantic_error,
                          hasSemanticFunction: !!metrics.semantic_function
                        });
                        
                        get().updateChunkMetrics(chunkId, {
                          signal_strength: metrics.signal_strength ?? undefined,
                          complexity: metrics.complexity ?? undefined,
                          isStale: false,
                          isUpdating: false
                        });
                        
                        console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞ ${chunkId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, metrics);
                      } catch (updateError) {
                        console.warn(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —á–∞–Ω–∫–∞ ${result.chunk_id}:`, updateError);
                        try {
                          get().updateChunkMetrics(result.chunk_id, { isUpdating: false });
                        } catch (flagError) {
                          console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ ${result.chunk_id}:`, flagError);
                        }
                      }
                    });
                    
                    console.log(`‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è ${(batchResult as any).results.length} —á–∞–Ω–∫–æ–≤`);
                  }
                } catch (apiError) {
                  console.warn('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:', apiError);
                  
                  // Fallback: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                  for (const chunk of localChunks) {
                    try {
                      console.log(`üîÑ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —á–∞–Ω–∫–∞ ${chunk.id}:`, chunk.text.substring(0, 50) + '...');
                      
                      const metrics = await getChunkLocalMetrics(chunk.text, topic) as any;
                      
                      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                      try {
                        get().updateChunkMetrics(chunk.id, {
                          signal_strength: metrics.signal_strength ?? undefined,
                          complexity: metrics.complexity ?? undefined,
                          isStale: false,
                          isUpdating: false
                        });
                        
                        console.log(`‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞ ${chunk.id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, metrics);
                      } catch (updateError) {
                        console.warn(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —á–∞–Ω–∫–∞ ${chunk.id}:`, updateError);
                        try {
                          get().updateChunkMetrics(chunk.id, { isUpdating: false });
                        } catch (flagError) {
                          console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ ${chunk.id}:`, flagError);
                        }
                      }
                    } catch (chunkError) {
                      console.warn(`–û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —á–∞–Ω–∫–∞ ${chunk.id}:`, chunkError);
                      try {
                        get().updateChunkMetrics(chunk.id, { isUpdating: false });
                      } catch (flagError) {
                        console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ ${chunk.id}:`, flagError);
                      }
                    }
                  }
                }
              }
            } catch (localError) {
              console.warn('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', localError);
              localUpdatesCopy.forEach(chunkId => {
                try {
                  get().updateChunkMetrics(chunkId, { isUpdating: false });
                } catch (flagError) {
                  console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                }
              });
            }
          }

          // === –≠–¢–ê–ü 2: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ê–°–ò–ù–•–†–û–ù–ù–û) ===
          if (contextualUpdatesCopy.size > 0) {
            console.log(`üß† –≠–¢–ê–ü 2: –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ${contextualUpdatesCopy.size} —á–∞–Ω–∫–æ–≤ (semantic_function)`);
            console.log('üß† –î–ï–¢–ê–õ–ò —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', {
              contextualChunks: Array.from(contextualUpdatesCopy),
              semanticUpdateType,
              hasDocument: !!state.document,
              hasTopic: !!state.document?.metadata?.topic
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
            setTimeout(async () => {
              console.log('üß† –°–¢–ê–†–¢ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
              try {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const currentSemanticUpdateType = semanticUpdateType;
                
                console.log(`üß† –ó–∞–ø—É—Å–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${currentSemanticUpdateType} (${contextualUpdatesCopy.size} —á–∞–Ω–∫–æ–≤)`);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                get().startSemanticProgress(currentSemanticUpdateType, contextualUpdatesCopy.size);

                try {
                  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ API —Ñ—É–Ω–∫—Ü–∏–∏
                  let getBatchChunkSemantic;
                  try {
                    const apiModule = await import('../api/index');
                    getBatchChunkSemantic = apiModule.getBatchChunkSemantic;
                  } catch (importError) {
                    console.warn('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö API:', importError);
                    get().finishSemanticProgress();
                    contextualUpdatesCopy.forEach(chunkId => {
                      try {
                        get().updateChunkMetrics(chunkId, { isUpdating: false });
                      } catch (flagError) {
                        console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                      }
                    });
                    return;
                  }

                  if (!getBatchChunkSemantic) {
                    console.warn('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ API —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    get().finishSemanticProgress();
                    contextualUpdatesCopy.forEach(chunkId => {
                      try {
                        get().updateChunkMetrics(chunkId, { isUpdating: false });
                      } catch (flagError) {
                        console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                      }
                    });
                    return;
                  }

                  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
                  const currentState = get();
                  if (!currentState.document || !currentState.document.metadata) {
                    console.warn('–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
                    get().finishSemanticProgress();
                    return;
                  }
                  
                  const topic = currentState.document.metadata.topic;

                  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                  const semanticChunks = Array.from(contextualUpdatesCopy).map(chunkId => ({
                    id: chunkId,
                    text: get().getChunkText(chunkId)
                  })).filter(chunk => chunk.text && chunk.text.trim());

                  if (semanticChunks.length > 0) {
                    try {
                      let processedChunks = 0;
                      
                      // –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –ø–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                      if (currentSemanticUpdateType === SemanticUpdateType.GLOBAL) {
                        const semanticResult = await getBatchChunkSemantic(
                          semanticChunks,
                          currentState.document.text,
                          topic
                        );

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                        if (semanticResult && (semanticResult as any).results) {
                          console.log('üéâ –ü–û–õ–£–ß–ï–ù–´ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', {
                            resultsCount: (semanticResult as any).results.length,
                            results: (semanticResult as any).results.map((r: any) => ({
                              chunk_id: r.chunk_id,
                              semantic_function: r.metrics?.semantic_function,
                              rawMetrics: r.metrics
                            }))
                          });
                          
                          (semanticResult as any).results.forEach((result: any) => {
                            try {
                              const chunkId = result.chunk_id;
                              const metrics = result.metrics;
                              
                              console.log('üì¶ –û–ë–†–ê–ë–û–¢–ö–ê –æ–¥–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', {
                                chunkId: chunkId,
                                rawResult: result,
                                rawMetrics: metrics,
                                semantic_function: metrics?.semantic_function,
                                semantic_function_type: typeof metrics?.semantic_function,
                                hasSemanticFunction: !!metrics?.semantic_function,
                                metricsKeys: Object.keys(metrics || {}),
                                // –û–¢–õ–ê–î–ö–ê –ü–ï–†–ï–î–ê–ß–ò –í updateChunkMetrics
                                willPass: {
                                  semantic_function: metrics.semantic_function,
                                  direct_value: metrics.semantic_function
                                }
                              });
                              
                              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ semantic_function –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
                              if (!metrics?.semantic_function) {
                                console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: semantic_function –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ metrics!', {
                                  chunkId,
                                  metrics,
                                  result
                                });
                              }
                              
                              get().updateChunkMetrics(chunkId, {
                                semantic_function: metrics.semantic_function,
                                isStale: false,
                                isUpdating: false
                              });
                              
                              processedChunks++;
                              get().updateSemanticProgress(processedChunks);
                              
                              console.log(`‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞ ${chunkId} –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ updateChunkMetrics:`, {
                                semantic_function: metrics?.semantic_function
                              });
                            } catch (updateError) {
                              console.warn(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —á–∞–Ω–∫–∞ ${result.chunk_id}:`, updateError);
                              try {
                                get().updateChunkMetrics(result.chunk_id, { isUpdating: false });
                              } catch (flagError) {
                                console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∞ ${result.chunk_id}:`, flagError);
                              }
                            }
                          });
                          
                          console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${(semanticResult as any).results.length} —á–∞–Ω–∫–æ–≤`);
                        }
                      } else {
                        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                        const { getChunkSemantic } = await import('../api/index');
                        
                        for (const chunk of semanticChunks) {
                          try {
                            console.log(`üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–∞ ${chunk.id}:`, chunk.text.substring(0, 50) + '...');
                            
                            const metrics = await getChunkSemantic(
                              chunk.id,
                              chunk.text,
                              currentState.document.text,
                              topic
                            ) as any;
                            
                            console.log('üì¶ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å API:', {
                              chunkId: chunk.id,
                              rawMetrics: metrics,
                              semantic_function: metrics?.semantic_function,
                              semantic_function_type: typeof metrics?.semantic_function,
                              hasSemanticFunction: !!metrics?.semantic_function,
                              metricsKeys: Object.keys(metrics || {}),
                              // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É metrics –∏ result
                              fullResult: metrics,
                              resultMetrics: metrics.metrics,
                              correctSemanticFunction: metrics.metrics?.semantic_function
                            });
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ semantic_function –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
                            const actualMetrics = metrics.metrics || {};
                            if (!actualMetrics.semantic_function) {
                              console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: semantic_function –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!', {
                                chunkId: chunk.id,
                                metrics: actualMetrics,
                                fullResult: metrics
                              });
                            }
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                            try {
                              get().updateChunkMetrics(chunk.id, {
                                semantic_function: actualMetrics.semantic_function,
                                isStale: false,
                                isUpdating: false
                              });
                              
                              processedChunks++;
                              get().updateSemanticProgress(processedChunks);
                              
                              console.log(`‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞ ${chunk.id} –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ updateChunkMetrics:`, {
                                semantic_function: metrics?.semantic_function
                              });
                            } catch (updateError) {
                              console.warn(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —á–∞–Ω–∫–∞ ${chunk.id}:`, updateError);
                              try {
                                get().updateChunkMetrics(chunk.id, { isUpdating: false });
                              } catch (flagError) {
                                console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —á–∞–Ω–∫–∞ ${chunk.id}:`, flagError);
                              }
                            }
                          } catch (chunkError) {
                            console.warn(`–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–∞–Ω–∫–∞ ${chunk.id}:`, chunkError);
                            try {
                              get().updateChunkMetrics(chunk.id, { isUpdating: false });
                            } catch (flagError) {
                              console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∞ ${chunk.id}:`, flagError);
                            }
                          }
                        }
                      }
                    } catch (semanticError) {
                      console.warn('–û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', semanticError);
                      contextualUpdatesCopy.forEach(chunkId => {
                        try {
                          get().updateChunkMetrics(chunkId, { isUpdating: false });
                        } catch (flagError) {
                          console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                        }
                      });
                    }
                  }
                } catch (semanticError) {
                  console.warn('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ:', semanticError);
                  contextualUpdatesCopy.forEach(chunkId => {
                    try {
                      get().updateChunkMetrics(chunkId, { isUpdating: false });
                    } catch (flagError) {
                      console.warn(`–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∞ ${chunkId}:`, flagError);
                    }
                  });
                } finally {
                  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                  get().finishSemanticProgress();
                  console.log(`‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑`);
                }
              } catch (asyncError) {
                console.warn('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ:', asyncError);
                get().finishSemanticProgress();
              }
            }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∑–≤–æ–ª–µ–Ω–∏—è UI –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
          }

        } catch (queueError) {
          console.warn('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ processMetricsQueue:', queueError);
          get().finishSemanticProgress();
        }
      },

      // === –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ß–ê–ù–ö–û–í ===
      moveChunk: (sourceChunkId: string, targetPosition: number) => {
        const state = get();
        if (!state.document) return;

        console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞–Ω–∫–∞:', { sourceChunkId, targetPosition });

        try {
          const updatedDocument = moveChunk(
            state.document,
            sourceChunkId,
            targetPosition
          );

          set({ document: updatedDocument });

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è)
          get().queueMetricsUpdate(sourceChunkId, 'local');
          get().queueMetricsUpdate(sourceChunkId, 'contextual'); // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞

          console.log('‚úÖ –ß–∞–Ω–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —á–∞–Ω–∫–∞:', error);
          set({ error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è' });
        }
      },

      // === –°–õ–ò–Ø–ù–ò–ï –ò –ü–ï–†–ï–°–¢–ê–ù–û–í–ö–ê –ß–ê–ù–ö–û–í ===
      mergeChunks: (sourceChunkId: string, targetChunkId?: string) => {
        const state = get();
        if (!state.document) return;

        console.log('üîó –°–ª–∏—è–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ documentStore:', { sourceChunkId: sourceChunkId.slice(0, 8), targetChunkId: targetChunkId?.slice(0, 8) });

        try {
          if (targetChunkId) {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π —á–∞–Ω–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ª–∏—è–Ω–∏—è –ª—é–±—ã—Ö –¥–≤—É—Ö —á–∞–Ω–∫–æ–≤
            const updatedDocument = mergeTwoChunks(state.document, sourceChunkId, targetChunkId);
            set({ document: updatedDocument });
          } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–∏—è–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∞–Ω–∫–æ–≤
            const updatedDocument = mergeAdjacentChunks(state.document, sourceChunkId);
            set({ document: updatedDocument });
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è
          const currentDocument = get().document;
          if (currentDocument) {
            currentDocument.chunks.forEach(chunk => {
              get().queueMetricsUpdate(chunk.id, 'local');
            });
          }

          console.log('‚úÖ –ß–∞–Ω–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —á–∞–Ω–∫–æ–≤:', error);
          set({ error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è' });
        }
      },
      
      reorderChunks: (oldIndex: number, newIndex: number) => {
        const state = get();
        if (!state.document) {
          console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞–Ω–∫–æ–≤');
          return;
        }

        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —á–∞–Ω–∫–æ–≤:', { oldIndex, newIndex });

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (oldIndex < 0 || newIndex < 0 || 
            oldIndex >= state.document.chunks.length || 
            newIndex >= state.document.chunks.length ||
            oldIndex === newIndex) {
          console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏:', { 
            oldIndex, 
            newIndex, 
            chunksLength: state.document.chunks.length 
          });
          return;
        }

        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
          const updatedDocument = reorderChunksInDocumentUtil(
            state.document,
            oldIndex,
            newIndex
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
          if (!updatedDocument || !updatedDocument.text || !updatedDocument.chunks || updatedDocument.chunks.length === 0) {
            console.error('‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏');
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞–Ω–∫–æ–≤ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç' });
            return;
          }

          set({ document: updatedDocument, error: null });

          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è)
          setTimeout(() => {
            const currentState = get();
            if (currentState.document && currentState.document.chunks) {
              currentState.document.chunks.forEach(chunk => {
                get().queueMetricsUpdate(chunk.id, 'local');
              });
            }
          }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

          console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ —á–∞–Ω–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —á–∞–Ω–∫–æ–≤:', error);
          set({ 
            error: error instanceof Error 
              ? `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}` 
              : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞–Ω–∫–æ–≤' 
          });
        }
      },

      // === UI –î–ï–ô–°–¢–í–ò–Ø ===
      setSelectedChunk: (chunkId: string | null) => {
        set(state => ({
          ui: {
            ...state.ui,
            selectedChunks: chunkId ? [chunkId] : []
          }
        }));
      },

      setHoveredChunk: (chunkId: string | null) => {
        set(state => ({
          ui: {
            ...state.ui,
            hoveredChunk: chunkId
          }
        }));
      },

      updateUISettings: (settings: Partial<UIState>) => {
        set(state => ({
          ui: {
            ...state.ui,
            ...settings
          }
        }));
      },

      // === –£–¢–ò–õ–ò–¢–´ ===
      getChunkText: (chunkId: string) => {
        const state = get();
        if (!state.document) return '';
        return getChunkText(state.document, chunkId);
      },

      getAllChunkTexts: () => {
        const state = get();
        if (!state.document) return [];
        return getAllChunkTexts(state.document);
      },

      getFilteredAndSortedChunks: () => {
        const state = get();
        if (!state.document) return [];

        let chunks = [...state.document.chunks];
        const { searchQuery, semanticFilter, sortField, sortDirection } = state.ui;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
        if (searchQuery.trim()) {
          chunks = chunks.filter(chunk => {
            const text = getChunkText(state.document!, chunk.id);
            return text.toLowerCase().includes(searchQuery.toLowerCase());
          });
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if (semanticFilter !== 'all') {
          chunks = chunks.filter(chunk => 
            chunk.metrics.semantic_function === semanticFilter
          );
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        chunks.sort((a, b) => {
          let aValue: any, bValue: any;

          switch (sortField) {
            case 'position':
              aValue = a.start;
              bValue = b.start;
              break;
            case 'signal_strength':
              aValue = a.metrics.signal_strength || 0;
              bValue = b.metrics.signal_strength || 0;
              break;
            case 'complexity':
              aValue = a.metrics.complexity || 0;
              bValue = b.metrics.complexity || 0;
              break;
            case 'semantic_function':
              aValue = a.metrics.semantic_function || '';
              bValue = b.metrics.semantic_function || '';
              break;
            default: // 'id'
              aValue = a.id;
              bValue = b.id;
          }

          if (typeof aValue === 'string') {
            return sortDirection === 'asc' 
              ? aValue.localeCompare(bValue)
              : bValue.localeCompare(aValue);
          } else {
            return sortDirection === 'asc' 
              ? aValue - bValue
              : bValue - aValue;
          }
        });

        return chunks;
      },

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–û–ú –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===
      startSemanticProgress: (type: SemanticUpdateType, totalChunks: number) => {
        console.log(`üé¨ –°–¢–ê–†–¢ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: ${type}, —á–∞–Ω–∫–æ–≤: ${totalChunks}`);
        set({
          semanticProgress: {
            type,
            totalChunks,
            processedChunks: 0,
            startTime: Date.now(),
            isActive: true
          }
        });
        console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:`, get().semanticProgress);
      },

      updateSemanticProgress: (processedChunks: number) => {
        const currentProgress = get().semanticProgress;
        console.log(`üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: ${processedChunks}/${currentProgress?.totalChunks || 0}`);
        set(state => ({
          semanticProgress: state.semanticProgress ? {
            ...state.semanticProgress,
            processedChunks
          } : null
        }));
        console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω:`, get().semanticProgress);
      },

      finishSemanticProgress: () => {
        console.log(`üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä`);
        set({
          semanticProgress: null
        });
        console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–∫—Ä—ã—Ç`);
      }
    })),
    {
      name: 'document-store'
    }
  )
); 