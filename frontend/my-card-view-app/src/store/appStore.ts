import { create } from 'zustand'
import { devtools, subscribeWithSelector } from 'zustand/middleware'
import * as api from '../api'
import type { AnalysisResponse, ParagraphData } from '../components/CardView/types'

export type SortField = 'id' | 'signal_strength' | 'complexity' | 'semantic_function'
export type SortDirection = 'asc' | 'desc'

interface AppState {
  // === –î–ê–ù–ù–´–ï –°–ï–°–°–ò–ò ===
  session: AnalysisResponse | null
  loading: boolean
  error: string | null
  isSemanticAnalysisUpToDate: boolean
  isBackendReady: boolean
  backendError: string | null

  // === –¢–ï–ö–°–¢–û–í–´–ô –†–ï–î–ê–ö–¢–û–† ===
  editorTopic: string
  editorText: string
  
  // === –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ù–ï–õ–ï–ô ===
  fontSize: number
  fontFamily: string
  signalMinColor: string
  signalMaxColor: string
  complexityMinColor: string
  complexityMaxColor: string
  
  // === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –°–û–†–¢–ò–†–û–í–ö–ê ===
  sortField: SortField
  sortDirection: SortDirection
  semanticFilter: string
  searchQuery: string

  // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–ê–ù–ï–õ–ï–ô ===
  selectedParagraphId: string | null
  hoveredParagraphId: string | null

  // === –ü–†–û–°–¢–´–ï SETTER –§–£–ù–ö–¶–ò–ò ===
  setSession: (session: AnalysisResponse | null) => void
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  setEditorTopic: (topic: string) => void
  setEditorText: (text: string) => void

  // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
  handleAnalyzeText: (text: string, topic: string) => Promise<void>
  handleSemanticRefreshSuccess: (updatedSession: AnalysisResponse) => void
  markSemanticsAsStale: () => void
  
  // === –†–ê–ë–û–¢–ê –° –ê–ë–ó–ê–¶–ê–ú–ò ===
  updateParagraph: (id: number, text: string) => void
  addParagraph: (text: string, afterId?: number) => void
  deleteParagraph: (id: number) => void
  updateParagraphsFromText: (text: string) => void
  getVirtualText: () => string
  
  // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===
  setSelectedParagraph: (id: string | null) => void
  setHoveredParagraph: (id: string | null) => void
  scrollToCard: (paragraphId: number) => void

  // === –ù–ê–°–¢–†–û–ô–ö–ò ===
  updateSettings: (settings: Partial<Pick<AppState, 'fontSize' | 'fontFamily' | 'signalMinColor' | 'signalMaxColor' | 'complexityMinColor' | 'complexityMaxColor'>>) => void
  updateFilters: (filters: Partial<Pick<AppState, 'sortField' | 'sortDirection' | 'semanticFilter' | 'searchQuery'>>) => void

  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
  showEditorSettings: boolean
  setShowEditorSettings: (show: boolean) => void

  // === –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö ===
  analyzeParagraphMetrics: (paragraphId: number, text: string) => Promise<void>
  analyzeParagraphMetricsQuietly: (paragraphId: number, text: string) => Promise<void>
  updateParagraphMetricsQuietly: (paragraphId: number, metrics: any) => void
  analyzeFullText: (text?: string) => Promise<void>
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_SIGNAL_MIN_COLOR = "#FFFFFF"
const DEFAULT_SIGNAL_MAX_COLOR = "#FFDB58"
const DEFAULT_COMPLEXITY_MIN_COLOR = "#00FF00"
const DEFAULT_COMPLEXITY_MAX_COLOR = "#FF0000"
const DEFAULT_FONT_FAMILY = "Arial, sans-serif"

export const useAppStore = create<AppState>()(
  devtools(
    subscribeWithSelector((set, get) => {
      return {
        // === –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
        session: null,
        loading: false,
        error: null,
        isSemanticAnalysisUpToDate: true,
        isBackendReady: true,
        backendError: null,
        editorTopic: '',
        editorText: '',
        showEditorSettings: false,

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        fontSize: 12,
        fontFamily: DEFAULT_FONT_FAMILY,
        signalMinColor: DEFAULT_SIGNAL_MIN_COLOR,
        signalMaxColor: DEFAULT_SIGNAL_MAX_COLOR,
        complexityMinColor: DEFAULT_COMPLEXITY_MIN_COLOR,
        complexityMaxColor: DEFAULT_COMPLEXITY_MAX_COLOR,
        
        sortField: 'id',
        sortDirection: 'asc',
        semanticFilter: 'all',
        searchQuery: '',
        
        selectedParagraphId: null,
        hoveredParagraphId: null,

        // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
        handleAnalyzeText: async (text: string, topic: string) => {
          console.log('üîÑ Store handleAnalyzeText started', { text: text.substring(0, 50) + '...', topic })
          set({ loading: true, error: null, isSemanticAnalysisUpToDate: false })
          
          try {
            console.log('üì° Calling api.initializeAnalysis...')
            const analysisSessionData = await api.initializeAnalysis(text, topic)
            console.log('üì° api.initializeAnalysis response:', analysisSessionData)
            
            set({
              session: analysisSessionData,
              editorTopic: analysisSessionData.metadata.topic,
              editorText: text,
              isSemanticAnalysisUpToDate: true,
              loading: false
            })

            document.title = analysisSessionData.metadata.topic || "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
            window.history.pushState({}, '', `?session_id=${analysisSessionData.metadata.session_id}`)
            console.log('‚úÖ Store handleAnalyzeText completed successfully')

          } catch (err) {
            console.error('‚ùå Store handleAnalyzeText error:', err)
            set({ 
              error: err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞',
              loading: false 
            })
          }
        },

        handleSemanticRefreshSuccess: (updatedSession) => {
          set({
            session: updatedSession,
            editorText: updatedSession.paragraphs.map(p => p.text).join('\n\n'),
            isSemanticAnalysisUpToDate: true
          })
          document.title = updatedSession.metadata.topic || "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)"
        },

        markSemanticsAsStale: () => set({ isSemanticAnalysisUpToDate: false }),

        // === –†–ê–ë–û–¢–ê –° –ê–ë–ó–ê–¶–ê–ú–ò ===
        updateParagraph: (id: number, text: string) => {
          const state = get()
          if (!state.session) return

          console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞:', { id, text: text.substring(0, 50) + '...' })
          
          const updatedParagraphs = state.session.paragraphs.map(p => 
            p.id === id ? { ...p, text } : p
          )

          const newSession = {
            ...state.session,
            paragraphs: updatedParagraphs
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é - editorText –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ getVirtualText()
          set({
            session: newSession
          })
        },

        addParagraph: (text: string, afterId?: number) => {
          const state = get()
          if (!state.session) return

          console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞:', { text: text.substring(0, 50) + '...', afterId })
          
          // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞
          const maxId = Math.max(...state.session.paragraphs.map(p => p.id), 0)
          const newParagraph: ParagraphData = {
            id: maxId + 1,
            text,
            metrics: {
              signal_strength: 0,
              complexity: 0,
              semantic_function: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            }
          }

          let updatedParagraphs
          if (afterId !== undefined) {
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
            const insertIndex = state.session.paragraphs.findIndex(p => p.id === afterId) + 1
            updatedParagraphs = [
              ...state.session.paragraphs.slice(0, insertIndex),
              newParagraph,
              ...state.session.paragraphs.slice(insertIndex)
            ]
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            updatedParagraphs = [...state.session.paragraphs, newParagraph]
          }

          const newSession = {
            ...state.session,
            paragraphs: updatedParagraphs
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é
          set({
            session: newSession
          })
        },

        deleteParagraph: (id: number) => {
          const state = get()
          if (!state.session) return

          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞:', { id })
          
          const updatedParagraphs = state.session.paragraphs.filter(p => p.id !== id)

          const newSession = {
            ...state.session,
            paragraphs: updatedParagraphs
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é
          set({
            session: newSession
          })
        },

        updateParagraphsFromText: (text: string) => {
          const state = get()
          
          // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º editorText (–æ—á–∏—Å—Ç–∫–∞ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ TextEditorPanel)
          set({ editorText: text })
          
          if (!state.session) {
            return
          }

          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
          // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–∞–º —Å—Ç—Ä–æ–∫, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
          const paragraphTexts = text.split(/\n\s*\n/).filter(t => t.replace(/^\s+/, '')) // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
          const currentParagraphs = state.session.paragraphs
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∞–±–∑–∞—Ü–µ–≤
          const updatedParagraphs: ParagraphData[] = []
          
          paragraphTexts.forEach((paragraphText, index) => {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ü–µ
            const cleanText = paragraphText.replace(/^\s+/, '') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
            if (!cleanText) return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∞–±–∑–∞—Ü—ã
            
            if (currentParagraphs[index]) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–±–∑–∞—Ü
              updatedParagraphs.push({
                ...currentParagraphs[index],
                text: cleanText
              })
            } else {
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü
              const maxId = Math.max(...currentParagraphs.map(p => p.id), 0, ...updatedParagraphs.map(p => p.id))
              updatedParagraphs.push({
                id: maxId + 1,
                text: cleanText,
                metrics: {
                  signal_strength: 0,
                  complexity: 0,
                  semantic_function: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                }
              })
            }
          })

          // –ï—Å–ª–∏ –∞–±–∑–∞—Ü–µ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          const finalParagraphs = updatedParagraphs.slice(0, paragraphTexts.length)

          set({
            session: {
              ...state.session,
              paragraphs: finalParagraphs
            }
          })
        },

        getVirtualText: () => {
          const state = get()
          
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º editorText
          if (!state.session || state.session.paragraphs.length === 0) {
            return state.editorText
          }
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –∏ editorText –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∞–±–∑–∞—Ü–µ–≤
          if (!state.editorText.trim()) {
            return state.session.paragraphs
              .map(p => p.text)
              .join('\n\n')
          }
          
          // –í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º editorText (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –∫—É—Ä—Å–æ—Ä–∞)
          return state.editorText
        },

        // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–ê–ù–ï–õ–ï–ô ===
        setSelectedParagraph: (id) => {
          set({ selectedParagraphId: id })
          
          // CSS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          if (id) {
            const elements = document.querySelectorAll(`[data-paragraph-id="${id}"]`)
            elements.forEach(el => el.classList.add('selected-paragraph'))
            
            const allElements = document.querySelectorAll('[data-paragraph-id]')
            allElements.forEach(el => {
              if (el.getAttribute('data-paragraph-id') !== id) {
                el.classList.remove('selected-paragraph')
              }
            })
          }
        },

        setHoveredParagraph: (id) => {
          set({ hoveredParagraphId: id })
          
          const allElements = document.querySelectorAll('[data-paragraph-id]')
          allElements.forEach(el => el.classList.remove('hovered-paragraph'))
          
          if (id) {
            const elements = document.querySelectorAll(`[data-paragraph-id="${id}"]`)
            elements.forEach(el => el.classList.add('hovered-paragraph'))
          }
        },

        scrollToCard: (paragraphId: number) => {
          // –õ–æ–≥–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –∏–∑ App.tsx
          const cardElement = document.querySelector(`[data-paragraph-id="${paragraphId}"]`)
          if (cardElement) {
            cardElement.scrollIntoView({ behavior: 'smooth', block: 'center' })
            
            // –ê–Ω–∏–º–∞—Ü–∏—è "–ø—Ä—ã–∂–∫–∞"
            cardElement.classList.add('card-jump')
            setTimeout(() => cardElement.classList.remove('card-jump'), 600)
          }
        },

        // === –ù–ê–°–¢–†–û–ô–ö–ò ===
        updateSettings: (settings) => {
          set((state) => ({ ...state, ...settings }))
        },

        updateFilters: (filters) => {
          set((state) => ({ ...state, ...filters }))
        },

        // === –ü–†–û–°–¢–´–ï SETTER –§–£–ù–ö–¶–ò–ò ===
        setSession: (session) => set({ session }),
        setLoading: (loading) => set({ loading }),
        setError: (error) => set({ error }),
        setEditorTopic: (topic) => set({ editorTopic: topic }),
        setEditorText: (text: string) => set({ editorText: text }),

        // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
        setShowEditorSettings: (show: boolean) => set({ showEditorSettings: show }),

        // === –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö ===
        analyzeParagraphMetrics: async (paragraphId: number, text: string) => {
          const state = get()
          if (!state.session) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–±–∑–∞—Ü–∞')
            return
          }

          const startTime = performance.now()
          console.log(`üîÑ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞ ${paragraphId} (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`)
          console.log(`üìù –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: "${text.substring(0, 100)}..."`)
          
          try {
            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
            const metrics = await api.calculateParagraphMetrics(
              state.session.metadata.session_id,
              paragraphId,
              text
            )
            
            const endTime = performance.now()
            const duration = endTime - startTime
            console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∞–±–∑–∞—Ü–∞ ${paragraphId} –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${duration.toFixed(2)}–º—Å:`, metrics)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç—Ä–∏–∫–∏ –∞–±–∑–∞—Ü–∞ –≤ —Å–µ—Å—Å–∏–∏ (–ù–ï —Ç–µ–∫—Å—Ç!)
            const updatedParagraphs = state.session.paragraphs.map(p => 
              p.id === paragraphId 
                ? { ...p, metrics: { ...p.metrics, ...metrics } }  // –£–±—Ä–∞–ª text - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏
                : p
            )

            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ store –¥–ª—è –∞–±–∑–∞—Ü–∞ ${paragraphId}`)
            console.log(`üìä –°—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏:`, state.session.paragraphs.find(p => p.id === paragraphId)?.metrics)
            console.log(`üìä –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:`, metrics)

            set({
              session: {
                ...state.session,
                paragraphs: updatedParagraphs
              }
            })
            
            console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∞–±–∑–∞—Ü–∞ ${paragraphId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ store`)
            
          } catch (error) {
            const endTime = performance.now()
            const duration = endTime - startTime
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞ ${paragraphId} (${duration.toFixed(2)}–º—Å):`, error)
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          }
        },

        analyzeParagraphMetricsQuietly: async (paragraphId: number, text: string) => {
          const state = get()
          if (!state.session) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–∏—Ö–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–±–∑–∞—Ü–∞')
            return
          }

          const startTime = performance.now()
          console.log(`üîá –¢–∏—Ö–∏–π –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞ ${paragraphId} (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`)
          
          try {
            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
            const metrics = await api.calculateParagraphMetrics(
              state.session.metadata.session_id,
              paragraphId,
              text
            )
            
            const endTime = performance.now()
            const duration = endTime - startTime
            console.log(`‚úÖ –¢–∏—Ö–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–±–∑–∞—Ü–∞ ${paragraphId} –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${duration.toFixed(2)}–º—Å:`, metrics)
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–±–µ–∑ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ textarea)
            state.updateParagraphMetricsQuietly(paragraphId, metrics)
            
          } catch (error) {
            const endTime = performance.now()
            const duration = endTime - startTime
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–∏—Ö–æ–º –∞–Ω–∞–ª–∏–∑–µ –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞ ${paragraphId} (${duration.toFixed(2)}–º—Å):`, error)
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ç–∏—Ö–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          }
        },

        updateParagraphMetricsQuietly: (paragraphId: number, metrics: any) => {
          const state = get()
          if (!state.session) return

          console.log(`üîá –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞ ${paragraphId}:`, metrics)
          
          // –ù–∞—Ö–æ–¥–∏–º –∞–±–∑–∞—Ü –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
          const paragraph = state.session.paragraphs.find(p => p.id === paragraphId)
          if (paragraph) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±—ä–µ–∫—Ç–µ (–º—É—Ç–∞—Ü–∏—è)
            Object.assign(paragraph.metrics, metrics)
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫, –Ω–µ textarea
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            set((prevState) => ({
              ...prevState,
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Å—Å–∏—é –¥–ª—è React, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
              session: { ...prevState.session! }
            }))
          }
        },

        analyzeFullText: async (text?: string) => {
          const state = get()
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
          const textToAnalyze = text || state.getVirtualText()
          
          if (!textToAnalyze.trim() || !state.editorTopic.trim()) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞')
            return
          }
          
          console.log('üîÑ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞')
          
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            await state.handleAnalyzeText(textToAnalyze, state.editorTopic)
            console.log('‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error)
            set({ 
              error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞'
            })
          }
        },
      }
    }),
    { name: 'text-analyzer-store' }
  )
)

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (–ª–æ–≥–∏–∫–∞ –∏–∑ App.tsx)
export const useSortedAndFilteredParagraphs = () => {
  return useAppStore((state) => {
    if (!state.session) return []
    
    let result = [...state.session.paragraphs]
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (state.semanticFilter !== 'all') {
      result = result.filter(p => 
        (p.metrics.semantic_function || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') === state.semanticFilter
      )
    }
    
    if (state.searchQuery.trim()) {
      const query = state.searchQuery.toLowerCase()
      result = result.filter(p => p.text.toLowerCase().includes(query))
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    result.sort((a, b) => {
      let aValue: any = state.sortField === 'id' ? a.id : 
        a.metrics[state.sortField as keyof ParagraphData["metrics"]] ?? 
        (state.sortField === 'semantic_function' ? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' : 0)
      
      let bValue: any = state.sortField === 'id' ? b.id : 
        b.metrics[state.sortField as keyof ParagraphData["metrics"]] ?? 
        (state.sortField === 'semantic_function' ? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' : 0)
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return state.sortDirection === 'asc' ? 
          aValue.localeCompare(bValue) : bValue.localeCompare(aValue)
      }
      
      return state.sortDirection === 'asc' ? (aValue - bValue) : (bValue - aValue)
    })
    
    return result
  })
} 