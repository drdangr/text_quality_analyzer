import { create } from 'zustand'
import { devtools, subscribeWithSelector } from 'zustand/middleware'
import * as api from '../api'
import type { AnalysisResponse, ParagraphData } from '../components/CardView/types'
import { debounce } from 'lodash'

export type SortField = 'id' | 'signal_strength' | 'complexity' | 'semantic_function'
export type SortDirection = 'asc' | 'desc'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –∞–±–∑–∞—Ü–µ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
interface ParagraphPosition {
  id: number;
  start: number;
  end: number;
  text: string;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface EditingState {
  mode: 'none' | 'text-editor' | 'card-editor';
  paragraphId: number | null;
  text: string;
  lastChangeTimestamp: number | null;
  positions: ParagraphPosition[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∞–±–∑–∞—Ü–∞
interface ParagraphMetrics {
  signal_strength: number;
  complexity: number;
  semantic_function?: string;
}

interface AppState {
  // === –î–ê–ù–ù–´–ï –°–ï–°–°–ò–ò ===
  session: AnalysisResponse | null
  loading: boolean
  error: string | null
  isSemanticAnalysisUpToDate: boolean
  isBackendReady: boolean
  backendError: string | null

  // === –¢–ï–ö–°–¢–û–í–´–ô –†–ï–î–ê–ö–¢–û–† ===
  editorFullText: string
  editorTopic: string

  // === –°–û–°–¢–û–Ø–ù–ò–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
  editingState: EditingState

  // === –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ù–ï–õ–ï–ô ===
  fontSize: number
  fontFamily: string
  signalMinColor: string
  signalMaxColor: string
  complexityMinColor: string
  complexityMaxColor: string
  
  // === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –°–û–†–¢–ò–†–û–í–ö–ê ===
  sortField: SortField
  sortDirection: SortDirection
  semanticFilter: string
  searchQuery: string

  // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–ê–ù–ï–õ–ï–ô ===
  selectedParagraphId: string | null
  hoveredParagraphId: string | null

  // === –ü–†–û–°–¢–´–ï SETTER –§–£–ù–ö–¶–ò–ò ===
  setSession: (session: AnalysisResponse | null) => void
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  setEditorFullText: (text: string) => void
  setEditorTopic: (topic: string) => void

  // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
  handleAnalyzeText: (text: string, topic: string) => Promise<void>
  handleSemanticRefreshSuccess: (updatedSession: AnalysisResponse) => void
  markSemanticsAsStale: () => void
  
  // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===
  setSelectedParagraph: (id: string | null) => void
  setHoveredParagraph: (id: string | null) => void
  scrollToCard: (paragraphId: number) => void

  // === –ù–ê–°–¢–†–û–ô–ö–ò ===
  updateSettings: (settings: Partial<Pick<AppState, 'fontSize' | 'fontFamily' | 'signalMinColor' | 'signalMaxColor' | 'complexityMinColor' | 'complexityMaxColor'>>) => void
  updateFilters: (filters: Partial<Pick<AppState, 'sortField' | 'sortDirection' | 'semanticFilter' | 'searchQuery'>>) => void

  // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
  startEditing: (mode: EditingState['mode'], paragraphId?: number) => void
  updateEditingText: (text: string) => void
  finishEditing: () => Promise<void>
  calculateParagraphPositions: (text: string) => ParagraphPosition[]
  debouncedUpdateMetrics: (text: string, paragraphId?: number) => void
  cancelDebouncedMetricsUpdate: () => void

  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
  showEditorSettings: boolean
  setShowEditorSettings: (show: boolean) => void
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_SIGNAL_MIN_COLOR = "#FFFFFF"
const DEFAULT_SIGNAL_MAX_COLOR = "#FFDB58"
const DEFAULT_COMPLEXITY_MIN_COLOR = "#00FF00"
const DEFAULT_COMPLEXITY_MAX_COLOR = "#FF0000"
const DEFAULT_FONT_FAMILY = "Arial, sans-serif"

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ offsetTop –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function getRelativeOffsetTop(element: HTMLElement, container: HTMLElement): number {
  let offset = 0
  let el: HTMLElement | null = element
  while (el && el !== container) {
    offset += el.offsetTop
    el = el.offsetParent as HTMLElement | null
  }
  return offset
}

export const useAppStore = create<AppState>()(
  devtools(
    subscribeWithSelector((set, get) => {
      // –°–æ–∑–¥–∞–µ–º debounced —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const debouncedAnalyze = debounce(async (text: string) => {
        const state = get();
        if (!state.session) return;

        try {
          console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞');
          const updatedSession = await api.initializeAnalysis(
            text,
            state.editorTopic
          );
          
          console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
            paragraphsCount: updatedSession.paragraphs.length,
            timestamp: new Date().toLocaleTimeString()
          });

          set({ session: updatedSession });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞:', error);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞–º–µ–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞
          set({ showEditorSettings: true });
        }
      }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

      return {
        // === –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
        session: null,
        loading: false,
        error: null,
        isSemanticAnalysisUpToDate: true,
        isBackendReady: true,
        backendError: null,
        editorFullText: '',
        editorTopic: '',
        showEditorSettings: false,
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editingState: {
          mode: 'none',
          paragraphId: null,
          text: '',
          lastChangeTimestamp: null,
          positions: []
        },

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        fontSize: 12,
        fontFamily: DEFAULT_FONT_FAMILY,
        signalMinColor: DEFAULT_SIGNAL_MIN_COLOR,
        signalMaxColor: DEFAULT_SIGNAL_MAX_COLOR,
        complexityMinColor: DEFAULT_COMPLEXITY_MIN_COLOR,
        complexityMaxColor: DEFAULT_COMPLEXITY_MAX_COLOR,
        
        sortField: 'id',
        sortDirection: 'asc',
        semanticFilter: 'all',
        searchQuery: '',
        
        selectedParagraphId: null,
        hoveredParagraphId: null,

        // === –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
        handleAnalyzeText: async (text: string, topic: string) => {
          console.log('üîÑ Store handleAnalyzeText started', { text: text.substring(0, 50) + '...', topic })
          set({ loading: true, error: null, isSemanticAnalysisUpToDate: false })
          
          try {
            console.log('üì° Calling api.initializeAnalysis...')
            const analysisSessionData = await api.initializeAnalysis(text, topic)
            console.log('üì° api.initializeAnalysis response:', analysisSessionData)
            
            set({
              session: analysisSessionData,
              editorFullText: text,
              editorTopic: analysisSessionData.metadata.topic,
              isSemanticAnalysisUpToDate: true,
              loading: false
            })

            document.title = analysisSessionData.metadata.topic || "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
            window.history.pushState({}, '', `?session_id=${analysisSessionData.metadata.session_id}`)
            console.log('‚úÖ Store handleAnalyzeText completed successfully')

          } catch (err) {
            console.error('‚ùå Store handleAnalyzeText error:', err)
            set({ 
              error: err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞',
              loading: false 
            })
          }
        },

        handleSemanticRefreshSuccess: (updatedSession) => {
          set({
            session: updatedSession,
            isSemanticAnalysisUpToDate: true
          })
          document.title = updatedSession.metadata.topic || "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)"
        },

        markSemanticsAsStale: () => set({ isSemanticAnalysisUpToDate: false }),

        // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–ê–ù–ï–õ–ï–ô ===
        setSelectedParagraph: (id) => {
          set({ selectedParagraphId: id })
          
          // CSS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          if (id) {
            const elements = document.querySelectorAll(`[data-paragraph-id="${id}"]`)
            elements.forEach(el => el.classList.add('selected-paragraph'))
            
            const allElements = document.querySelectorAll('[data-paragraph-id]')
            allElements.forEach(el => {
              if (el.getAttribute('data-paragraph-id') !== id) {
                el.classList.remove('selected-paragraph')
              }
            })
          }
        },

        setHoveredParagraph: (id) => {
          set({ hoveredParagraphId: id })
          
          const allElements = document.querySelectorAll('[data-paragraph-id]')
          allElements.forEach(el => el.classList.remove('hovered-paragraph'))
          
          if (id) {
            const elements = document.querySelectorAll(`[data-paragraph-id="${id}"]`)
            elements.forEach(el => el.classList.add('hovered-paragraph'))
          }
        },

        scrollToCard: (paragraphId: number) => {
          // –õ–æ–≥–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –∏–∑ App.tsx
          const cardElement = document.querySelector(`[data-paragraph-id="${paragraphId}"]`)
          if (cardElement) {
            cardElement.scrollIntoView({ behavior: 'smooth', block: 'center' })
            
            // –ê–Ω–∏–º–∞—Ü–∏—è "–ø—Ä—ã–∂–∫–∞"
            cardElement.classList.add('card-jump')
            setTimeout(() => cardElement.classList.remove('card-jump'), 600)
          }
        },

        // === –ù–ê–°–¢–†–û–ô–ö–ò ===
        updateSettings: (settings) => {
          set((state) => ({ ...state, ...settings }))
        },

        updateFilters: (filters) => {
          set((state) => ({ ...state, ...filters }))
        },

        // === –ü–†–û–°–¢–´–ï SETTER –§–£–ù–ö–¶–ò–ò ===
        setSession: (session) => set({ session }),
        setLoading: (loading) => set({ loading }),
        setError: (error) => set({ error }),
        setEditorFullText: (text) => set({ editorFullText: text }),
        setEditorTopic: (topic) => set({ editorTopic: topic }),

        // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
        startEditing: (mode, paragraphId) => {
          console.log('üñäÔ∏è –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
            mode,
            paragraphId,
            timestamp: new Date().toLocaleTimeString()
          });
          const state = get();
          if (!state.session) return;

          const currentText = mode === 'card-editor' && paragraphId
            ? state.session.paragraphs.find(p => p.id === paragraphId)?.text || ''
            : state.editorFullText;

          set({
            editingState: {
              mode,
              paragraphId: paragraphId || null,
              text: currentText,
              lastChangeTimestamp: Date.now(),
              positions: get().calculateParagraphPositions(currentText)
            }
          });
        },

        updateEditingText: (text: string) => {
          const state = get();
          const positions = get().calculateParagraphPositions(text);
          
          console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:', {
            mode: state.editingState.mode,
            paragraphsCount: positions.length,
            timestamp: new Date().toLocaleTimeString()
          });

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
          if (state.session) {
            const newParagraphs = text.split('\n\n').map((paragraphText, index) => ({
              ...state.session!.paragraphs[index] || {},
              id: index,
              text: paragraphText.trim(),
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
              metrics: state.session!.paragraphs[index]?.metrics || {
                signal_strength: 0,
                complexity: 0
              }
            }));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
            set({
              session: {
                ...state.session,
                paragraphs: newParagraphs
              }
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            debouncedAnalyze(text);
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          set({
            editingState: {
              ...state.editingState,
              text,
              lastChangeTimestamp: Date.now(),
              positions
            }
          });
        },

        finishEditing: async () => {
          const state = get();
          if (state.editingState.mode === 'none') return;

          console.log('‚úçÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
            mode: state.editingState.mode,
            paragraphId: state.editingState.paragraphId,
            timestamp: new Date().toLocaleTimeString()
          });
          try {
            let updatedSession;
            
            if (state.editingState.mode === 'card-editor' && state.editingState.paragraphId) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
              updatedSession = await api.updateTextAndRestructureParagraph(
                state.session!.metadata.session_id,
                state.editingState.paragraphId,
                state.editingState.text
              );
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
              updatedSession = await api.initializeAnalysis(
                state.editingState.text,
                state.editorTopic
              );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            set({ session: updatedSession });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ, —á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫–∞–º
            const fullText = updatedSession.paragraphs
              .sort((a: any, b: any) => a.id - b.id)
              .map((p: any) => p.text)
              .join('\n\n');
            set({ editorFullText: fullText });

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            set({
              editingState: {
                mode: 'none',
                paragraphId: null,
                text: '',
                lastChangeTimestamp: null,
                positions: []
              }
            });
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
          }
        },

        calculateParagraphPositions: (text: string): ParagraphPosition[] => {
          const paragraphs = text.split('\n\n');
          const positions: ParagraphPosition[] = [];
          let currentPosition = 0;

          paragraphs.forEach((paragraph, index) => {
            const start = currentPosition;
            const end = start + paragraph.length;
            
            positions.push({
              id: index + 1, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
              start,
              end,
              text: paragraph
            });

            currentPosition = end + 2; // +2 –¥–ª—è \n\n
          });

          return positions;
        },

        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        debouncedUpdateMetrics: debouncedAnalyze,
        // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ—ë –ø—É—Å—Ç–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        cancelDebouncedMetricsUpdate: () => {},

        // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
        setShowEditorSettings: (show: boolean) => set({ showEditorSettings: show }),
      }
    }),
    { name: 'text-analyzer-store' }
  )
)

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (–ª–æ–≥–∏–∫–∞ –∏–∑ App.tsx)
export const useSortedAndFilteredParagraphs = () => {
  return useAppStore((state) => {
    if (!state.session) return []
    
    let result = [...state.session.paragraphs]
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (state.semanticFilter !== 'all') {
      result = result.filter(p => 
        (p.metrics.semantic_function || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ') === state.semanticFilter
      )
    }
    
    if (state.searchQuery.trim()) {
      const query = state.searchQuery.toLowerCase()
      result = result.filter(p => p.text.toLowerCase().includes(query))
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    result.sort((a, b) => {
      let aValue: any = state.sortField === 'id' ? a.id : 
        a.metrics[state.sortField as keyof ParagraphData["metrics"]] ?? 
        (state.sortField === 'semantic_function' ? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' : 0)
      
      let bValue: any = state.sortField === 'id' ? b.id : 
        b.metrics[state.sortField as keyof ParagraphData["metrics"]] ?? 
        (state.sortField === 'semantic_function' ? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' : 0)
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return state.sortDirection === 'asc' ? 
          aValue.localeCompare(bValue) : bValue.localeCompare(aValue)
      }
      
      return state.sortDirection === 'asc' ? (aValue - bValue) : (bValue - aValue)
    })
    
    return result
  })
} 