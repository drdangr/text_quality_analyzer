// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —á–∞–Ω–∫–æ–≤

import React, { useState } from 'react';
import { useDocumentStore } from '../store/documentStore';
import { MonacoEditor } from './MonacoEditor';
import type { ChangeInfo } from '../types/chunks';

export const TestChunks: React.FC = () => {
  const [testText, setTestText] = useState(`–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞–Ω–∫–æ–≤.

–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.

–¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è.`);

  const {
    document,
    loading,
    error,
    initializeDocument,
    updateText,
    getChunkText,
    getAllChunkTexts,
    getFilteredAndSortedChunks,
    setSelectedChunk,
    setHoveredChunk,
    ui
  } = useDocumentStore();

  const handleInitialize = () => {
    initializeDocument(testText, '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç');
  };

  const handleTextChange = (newText: string, changeInfo?: ChangeInfo) => {
    setTestText(newText);
    
    console.log('üîÑ handleTextChange (Monaco):', {
      newLength: newText.length,
      hasChangeInfo: !!changeInfo,
      hasDocument: !!document,
      documentVersion: document?.version,
      changeInfo
    });
    
    if (document) {
      try {
        if (changeInfo) {
          console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π changeInfo –æ—Ç Monaco:', changeInfo);
          updateText(newText, changeInfo);
        } else {
          console.log('üîÑ Fallback: –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç (–Ω–µ—Ç changeInfo)');
          updateText(newText); // –ë–µ–∑ changeInfo
        }
      } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –≤ handleTextChange:', error);
        console.error('‚ùå –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...');
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        initializeDocument(newText, '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ');
      initializeDocument(newText, '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (—Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ)');
    }
  };

  const chunks = getFilteredAndSortedChunks();

  return (
    <div className="p-3 max-w-7xl mx-auto">
      <h1 className="text-xl font-bold mb-3">–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —á–∞–Ω–∫–æ–≤ (Monaco Editor)</h1>
      
      {/* –°—Ç–∞—Ç—É—Å */}
      <div className="mb-3 p-2 bg-gray-100 rounded text-sm">
        <h2 className="font-semibold mb-1">–°—Ç–∞—Ç—É—Å:</h2>
        <div className="flex gap-4">
          <span>–î–æ–∫—É–º–µ–Ω—Ç: {document ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}</span>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞: {loading ? '‚è≥ –î–∞' : '‚úÖ –ù–µ—Ç'}</span>
          <span>–û—à–∏–±–∫–∞: {error || '‚úÖ –ù–µ—Ç'}</span>
          {document && (
            <>
              <span>–ß–∞–Ω–∫–æ–≤: {document.chunks.length}</span>
              <span>–í–µ—Ä—Å–∏—è: {document.version}</span>
              <span>–î–ª–∏–Ω–∞: {document.text.length}</span>
            </>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
      {!document && (
        <button
          onClick={handleInitialize}
          className="mb-3 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
        >
          –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        </button>
      )}

      {/* Monaco Editor */}
      <div className="mb-3">
        <h2 className="font-semibold mb-1 text-sm">–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ (Monaco):</h2>
        <MonacoEditor
          value={testText}
          onChange={handleTextChange}
          height="150px"
          options={{
            fontSize: 12,
            lineHeight: 13,  // –û—á–µ–Ω—å –∫–æ–º–ø–∞–∫—Ç–Ω–æ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ~1.08x)
            padding: { top: 4, bottom: 4 },
            wordWrap: 'on',
            lineNumbers: 'off',
            scrollbar: {
              vertical: 'hidden',
              horizontal: 'hidden'
            },
            overviewRulerLanes: 0,
            hideCursorInOverviewRuler: true,
            scrollBeyondLastLine: false,
            renderLineHighlight: 'none',  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å—Ç—Ä–æ–∫–∏
            glyphMargin: false,           // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –≥–ª–∏—Ñ–æ–≤
            folding: false,               // –£–±–∏—Ä–∞–µ–º —Ñ–æ–ª–¥–∏–Ω–≥
            lineDecorationsWidth: 0,      // –£–±–∏—Ä–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
            lineNumbersMinChars: 0        // –ú–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
          }}
        />
      </div>

      {/* –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ */}
      {document && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-3">
          {/* –ß–∞–Ω–∫–∏ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
          <div className="lg:col-span-2">
            <h2 className="font-semibold mb-2 text-sm">–ß–∞–Ω–∫–∏ ({chunks.length}):</h2>
            <div className="space-y-2">
              {chunks.map((chunk, index) => {
                const text = getChunkText(chunk.id);
                const isSelected = ui.selectedChunks.includes(chunk.id);
                const isHovered = ui.hoveredChunk === chunk.id;
                
                return (
                  <div
                    key={chunk.id}
                    className={`p-2 border rounded cursor-pointer transition-colors text-xs ${
                      isSelected ? 'border-blue-500 bg-blue-50' : 
                      isHovered ? 'border-gray-400 bg-gray-50' : 
                      'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => setSelectedChunk(isSelected ? null : chunk.id)}
                    onMouseEnter={() => setHoveredChunk(chunk.id)}
                    onMouseLeave={() => setHoveredChunk(null)}
                  >
                    <div className="flex justify-between items-start mb-1">
                      <span className="font-mono text-gray-500">
                        #{index + 1} ({chunk.start}-{chunk.end})
                      </span>
                      <span className="text-gray-400">
                        {chunk.id.slice(0, 8)}...
                      </span>
                    </div>
                    
                    <p className="mb-1 text-gray-700">{text}</p>
                    
                    <div className="text-gray-600 space-y-0.5">
                      <div className="flex justify-between">
                        <span>–°–∏–≥–Ω–∞–ª:</span>
                        <span className={chunk.metrics.isUpdating ? 'text-blue-500' : ''}>
                          {chunk.metrics.isUpdating ? '‚è≥' : 
                           chunk.metrics.signal_strength?.toFixed(2) || '‚Äî'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
                        <span className={chunk.metrics.isUpdating ? 'text-blue-500' : ''}>
                          {chunk.metrics.isUpdating ? '‚è≥' : 
                           chunk.metrics.complexity?.toFixed(2) || '‚Äî'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>–§—É–Ω–∫—Ü–∏—è:</span>
                        <span className={chunk.metrics.isUpdating ? 'text-blue-500' : ''}>
                          {chunk.metrics.isUpdating ? '‚è≥' : 
                           chunk.metrics.semantic_function || '‚Äî'}
                        </span>
                      </div>
                      {chunk.metrics.isStale && (
                        <div className="text-orange-500">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ */}
          <div>
            <h2 className="font-semibold mb-2 text-sm">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h2>
            <div className="space-y-2">
              
              {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
              <div className="p-2 bg-gray-50 rounded">
                <h3 className="font-medium mb-1 text-xs">–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</h3>
                <div className="text-xs space-y-0.5">
                  <p><strong>ID:</strong> {document.metadata.session_id.slice(0, 12)}...</p>
                  <p><strong>–¢–µ–º–∞:</strong> {document.metadata.topic}</p>
                  <p><strong>–°–æ–∑–¥–∞–Ω:</strong> {new Date(document.metadata.created_at).toLocaleTimeString()}</p>
                </div>
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <div className="p-2 bg-gray-50 rounded">
                <h3 className="font-medium mb-1 text-xs">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
                <div className="text-xs space-y-0.5">
                  <p><strong>–ß–∞–Ω–∫–æ–≤:</strong> {document.chunks.length}</p>
                  <p><strong>–°–∏–º–≤–æ–ª–æ–≤:</strong> {document.text.length}</p>
                  <p><strong>–¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> {
                    document.chunks.filter(c => c.metrics.isStale).length
                  }</p>
                  <p><strong>–û–±–Ω–æ–≤–ª—è—é—Ç—Å—è:</strong> {
                    document.chunks.filter(c => c.metrics.isUpdating).length
                  }</p>
                </div>
              </div>

              {/* –í—Å–µ —Ç–µ–∫—Å—Ç—ã —á–∞–Ω–∫–æ–≤ */}
              <div className="p-2 bg-gray-50 rounded">
                <h3 className="font-medium mb-1 text-xs">–¢–µ–∫—Å—Ç—ã —á–∞–Ω–∫–æ–≤:</h3>
                <div className="text-xs space-y-1 max-h-32 overflow-y-auto">
                  {getAllChunkTexts().map((item, index) => (
                    <div key={item.id} className="border-l-2 border-gray-300 pl-1">
                      <div className="text-gray-500">#{index + 1}: {item.id.slice(0, 6)}...</div>
                      <div className="text-gray-700">{item.text.slice(0, 50)}...</div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}; 