// –ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è TextEditorPanel —Å –Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞–Ω–∫–æ–≤

import React, { useCallback, useRef, useState, useEffect } from 'react'
import { Panel } from '../Panel'
import MonacoEditor from '../../MonacoEditor'
import { useDocumentStore } from '../../../store/documentStore'
import { useClipboard } from '../../../hooks/usePanelSync'
import type { ChangeInfo } from '../../../types/chunks'

interface TextEditorPanelV2Props {
  icon?: string
  isExpanded?: boolean
  onToggleExpanded?: () => void
}

export const TextEditorPanelV2: React.FC<TextEditorPanelV2Props> = ({ 
  icon, 
  isExpanded, 
  onToggleExpanded 
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [fileError, setFileError] = useState<string | null>(null)
  const [showTopicHint, setShowTopicHint] = useState<boolean>(false)
  const [editorTopic, setEditorTopic] = useState<string>('')
  const [showEditorSettings, setShowEditorSettings] = useState<boolean>(false)
  const [editorText, setEditorText] = useState<string>('') // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  const [lastCursorPosition, setLastCursorPosition] = useState<number>(0) // –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º documentStore –Ω–∞–ø—Ä—è–º—É—é
  const { 
    document,
    loading,
    error,
    initializeDocument,
    updateText,
    updateChunkMetrics,
    queueMetricsUpdate,
  } = useDocumentStore()

  const { pasteFromClipboard } = useClipboard()

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ documentStore –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const currentText = document?.text || editorText
  const chunksCount = document?.chunks.length || 0

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏
  const findTextDifference = (oldText: string, newText: string): ChangeInfo => {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π
    let start = 0;
    let oldEnd = oldText.length;
    let newEnd = newText.length;

    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Ä–∞–∑–ª–∏—á–∏–π
    while (start < Math.min(oldText.length, newText.length) && 
           oldText[start] === newText[start]) {
      start++;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ä–∞–∑–ª–∏—á–∏–π (–∏–¥–µ–º —Å –∫–æ–Ω—Ü–∞)
    while (oldEnd > start && newEnd > start && 
           oldText[oldEnd - 1] === newText[newEnd - 1]) {
      oldEnd--;
      newEnd--;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
    const changedOldText = oldText.slice(start, oldEnd);
    const changedNewText = newText.slice(start, newEnd);

    return {
      start,
      end: oldEnd,
      oldText: changedOldText,
      newText: changedNewText
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
  const findChunkAtPosition = (position: number) => {
    if (!document?.chunks) {
      console.log('‚ùå findChunkAtPosition: –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —á–∞–Ω–∫–æ–≤');
      return undefined;
    }
    
    console.log('üîç findChunkAtPosition –ø–æ–∏—Å–∫:', {
      position,
      chunksCount: document.chunks.length,
      documentTextLength: document.text.length,
      availableChunks: document.chunks.map(c => ({
        id: c.id.slice(0, 8),
        start: c.start,
        end: c.end,
        contains: position >= c.start && position <= c.end,
        text: document.text.slice(c.start, c.end).substring(0, 30) + '...'
      }))
    });
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    let foundChunk = document.chunks.find(chunk => 
      position >= chunk.start && position <= chunk.end
    );
    
    // FALLBACK 1: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —á–∞–Ω–∫
    if (!foundChunk) {
      console.log('‚ö†Ô∏è –¢–æ—á–Ω—ã–π —á–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π...');
      
      // –ò—â–µ–º —á–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –ø–æ–∑–∏—Ü–∏–∏
      let closestChunk = undefined;
      let minDistance = Infinity;
      
      for (const chunk of document.chunks) {
        const distanceToStart = Math.abs(position - chunk.start);
        const distanceToEnd = Math.abs(position - chunk.end);
        const minDist = Math.min(distanceToStart, distanceToEnd);
        
        if (minDist < minDistance) {
          minDistance = minDist;
          closestChunk = chunk;
        }
      }
      
      foundChunk = closestChunk;
      
      if (foundChunk) {
        console.log('üéØ –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —á–∞–Ω–∫:', {
          chunkId: foundChunk.id.slice(0, 8),
          distance: minDistance,
          chunkStart: foundChunk.start,
          chunkEnd: foundChunk.end,
          searchPosition: position
        });
      }
    }
    
    // FALLBACK 2: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
    if (!foundChunk && document.chunks.length > 0) {
      foundChunk = document.chunks[document.chunks.length - 1];
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –∫–∞–∫ fallback:', {
        chunkId: foundChunk.id.slice(0, 8),
        searchPosition: position,
        lastChunkEnd: foundChunk.end
      });
    }
    
    console.log('üéØ findChunkAtPosition —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      position,
      foundChunk: foundChunk ? {
        id: foundChunk.id.slice(0, 8),
        start: foundChunk.start,
        end: foundChunk.end,
        method: position >= foundChunk.start && position <= foundChunk.end ? 'exact' : 'fallback'
      } : undefined
    });
    
    return foundChunk;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –õ–û–ö–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ (signal_strength, complexity)
  const shouldTriggerLocalAnalysis = (newText: string, changeInfo: ChangeInfo): boolean => {
    const addedText = changeInfo.newText;
    const removedText = changeInfo.oldText;
    
    console.log('üèÉ‚Äç‚ôÇÔ∏è shouldTriggerLocalAnalysis –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
      hasAddedText: !!addedText,
      hasRemovedText: !!removedText,
      addedLength: addedText?.length || 0,
      removedLength: removedText?.length || 0,
      addedText: JSON.stringify(addedText),
      removedText: JSON.stringify(removedText),
      changeStart: changeInfo.start,
      changeEnd: changeInfo.end
    });
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –õ–Æ–ë–û–ú –∑–Ω–∞—á–∏–º–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:
    
    // 1. –£–î–ê–õ–ï–ù–ò–ï (Backspace/Delete) - –ª—é–±–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    const hasDeleted = removedText && removedText.length > 0;
    
    // 2. –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ò–ú–í–û–õ–û–í - –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    const hasAddedMeaningfulText = addedText && /[a-zA-Z–∞-—è—ë–ê-–Ø–Å0-9.,!?;:\-_()[\]{}'"¬´¬ª‚Äî‚Äì‚Ä¶]/.test(addedText);
    
    // 3. ENTER - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    const hasAddedNewlines = addedText && /[\n\r]/.test(addedText);
    
    // 4. –ü–†–û–ë–ï–õ–´ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
    const hasAddedMultipleSpaces = addedText && addedText.length > 1 && /\s/.test(addedText);
    
    // 5. –î–õ–ò–ù–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø (–≤—Å—Ç–∞–≤–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –±–ª–æ–∫–æ–≤)
    const hasLargeChange = 
      (addedText && addedText.length > 2) || 
      (removedText && removedText.length > 2);
    
    const significantChange = 
      hasDeleted ||
      hasAddedMeaningfulText ||
      hasAddedNewlines ||
      hasAddedMultipleSpaces ||
      hasLargeChange;
    
    console.log('üèÉ‚Äç‚ôÇÔ∏è shouldTriggerLocalAnalysis —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      significantChange: !!significantChange,
      reasons: {
        hasDeleted,
        hasAddedMeaningfulText,
        hasAddedNewlines,
        hasAddedMultipleSpaces,
        hasLargeChange
      },
      finalDecision: significantChange ? '–ó–ê–ü–£–°–ö–ê–ï–ú –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' : '–ü–†–û–ü–£–°–ö–ê–ï–ú –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
    });
    
    return !!significantChange;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑ (semantic_function)
  const shouldTriggerSemanticAnalysis = (newText: string, changeInfo: ChangeInfo): boolean => {
    const addedText = changeInfo.newText;
    
    console.log('üß† shouldTriggerSemanticAnalysis –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
      hasAddedText: !!addedText,
      addedText: JSON.stringify(addedText),
      addedTextLength: addedText?.length || 0,
      changeInfo: {
        start: changeInfo.start,
        end: changeInfo.end,
        oldText: JSON.stringify(changeInfo.oldText),
        newText: JSON.stringify(changeInfo.newText)
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç (–Ω–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    if (!addedText) {
      console.log('‚ùå shouldTriggerSemanticAnalysis: –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
      return false;
    }
    
    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º—ã—Å–ª–∏/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const triggerChars = [' ', '.', '!', '?', ',', ';', ':', '\n', '\r\n'];
    const hasTriggerChar = triggerChars.some(char => addedText.includes(char));
    
    console.log('üß† shouldTriggerSemanticAnalysis —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      triggerChars,
      addedText: JSON.stringify(addedText),
      hasTriggerChar,
      matchedChars: triggerChars.filter(char => addedText.includes(char))
    });
    
    return hasTriggerChar;
  };

  const handleTextChange = (newText: string, changeInfo?: ChangeInfo, cursorPosition?: number) => {
    console.log('‚å®Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ Monaco:', { 
      length: newText.length, 
      cursorPosition: cursorPosition || 0,
      preview: newText.substring(0, 30) + '...' 
    });
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
    setEditorText(newText);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    if (cursorPosition !== undefined) {
      setLastCursorPosition(cursorPosition);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ store –Ω–∞–ø—Ä—è–º—É—é
    const storeState = useDocumentStore.getState();
    const actualDocument = storeState.document;
    
    if (!actualDocument) {
      // –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –Ω—É–∂–Ω—ã —Ç–µ–∫—Å—Ç –ò —Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
      if (newText.trim() && editorTopic.trim()) {
        console.log('üÜï –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        initializeDocument(newText, editorTopic);
      } else {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
      return;
    }

    // –ï—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    if (newText.trim()) {
      console.log('üîÑ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—ã–π ChangeInfo —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–∑–ª–∏—á–∏–π
      const oldText = actualDocument.text;
      const textChangeInfo = findTextDifference(oldText, newText);
      
      console.log('üìù ChangeInfo —Å–æ–∑–¥–∞–Ω:', {
        start: textChangeInfo.start,
        end: textChangeInfo.end,
        oldTextLength: textChangeInfo.oldText.length,
        newTextLength: textChangeInfo.newText.length,
        cursorPosition: cursorPosition || 0,
        oldText: JSON.stringify(textChangeInfo.oldText.substring(0, 50) + (textChangeInfo.oldText.length > 50 ? '...' : '')),
        newText: JSON.stringify(textChangeInfo.newText.substring(0, 50) + (textChangeInfo.newText.length > 50 ? '...' : ''))
      });
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
      updateText(newText, textChangeInfo);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –õ–û–ö–ê–õ–¨–ù–û–ì–û –∏ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –∞–Ω–∞–ª–∏–∑–∞ –ù–ï–ó–ê–í–ò–°–ò–ú–û
      console.log('üîç –ü–†–û–í–ï–†–ö–ê —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', {
        willCheckLocal: true,
        willCheckSemantic: true,
        textChangeInfo: {
          start: textChangeInfo.start,
          end: textChangeInfo.end,
          oldText: textChangeInfo.oldText,
          newText: textChangeInfo.newText
        }
      });
      
      const shouldTriggerLocal = shouldTriggerLocalAnalysis(newText, textChangeInfo);
      const shouldTriggerSemantic = shouldTriggerSemanticAnalysis(newText, textChangeInfo);
      
      console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', {
        shouldTriggerLocal,
        shouldTriggerSemantic,
        textChangeInfo,
        newText: newText.length + ' —Å–∏–º–≤–æ–ª–æ–≤'
      });
      
      // –ù–∞—Ö–æ–¥–∏–º —á–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –∞–Ω–∞–ª–∏–∑–æ–≤)
      if (shouldTriggerLocal || shouldTriggerSemantic) {
        console.log('‚úÖ –•–û–¢–Ø –ë–´ –û–î–ò–ù –¢–†–ò–ì–ì–ï–† –°–†–ê–ë–û–¢–ê–õ - –∏—â–µ–º —á–∞–Ω–∫');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞
        const searchPosition = cursorPosition !== undefined ? cursorPosition : textChangeInfo.start;
        console.log('üîç –ü–û–ò–°–ö —á–∞–Ω–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏:', {
          cursorPosition,
          textChangeInfoStart: textChangeInfo.start,
          selectedSearchPosition: searchPosition
        });
        
        const editedChunk = findChunkAtPosition(searchPosition);
        
        if (editedChunk) {
          console.log('üéØ –ß–ê–ù–ö –ù–ê–ô–î–ï–ù - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã:', {
            chunkId: editedChunk.id.slice(0, 8),
            searchPosition,
            cursorPosition,
            changeStart: textChangeInfo.start,
            trigger: textChangeInfo.newText,
            willRunLocal: shouldTriggerLocal,
            willRunSemantic: shouldTriggerSemantic
          });
          
          // –ù–ï–ó–ê–í–ò–°–ò–ú–´–ï –í–´–ó–û–í–´ –ê–ù–ê–õ–ò–ó–û–í
          
          if (shouldTriggerLocal) {
            console.log('üèÉ‚Äç‚ôÇÔ∏è –õ–û–ö–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - –≤—ã–∑—ã–≤–∞–µ–º queueMetricsUpdate...');
            queueMetricsUpdate(editedChunk.id, 'local');
            console.log('‚úÖ queueMetricsUpdate LOCAL –í–´–ó–í–ê–ù–ê –¥–ª—è —á–∞–Ω–∫–∞:', editedChunk.id.slice(0, 8));
          } else {
            console.log('‚ùå –õ–û–ö–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ü–£–©–ï–ù - —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
          }
          
          if (shouldTriggerSemantic) {
            console.log('üß† –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó - –≤—ã–∑—ã–≤–∞–µ–º queueMetricsUpdate...');
            queueMetricsUpdate(editedChunk.id, 'contextual');
            console.log('‚úÖ queueMetricsUpdate CONTEXTUAL –í–´–ó–í–ê–ù–ê –¥–ª—è —á–∞–Ω–∫–∞:', editedChunk.id.slice(0, 8));
          } else {
            console.log('‚ùå –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ü–£–©–ï–ù - —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
          }
          
        } else {
          console.log('‚ùå –ß–ê–ù–ö –ù–ï –ù–ê–ô–î–ï–ù:', {
            searchPosition,
            cursorPosition,
            changeStart: textChangeInfo.start,
            availableChunks: actualDocument.chunks.map(c => ({ id: c.id.slice(0, 8), start: c.start, end: c.end }))
          });
        }
      } else {
        console.log('‚ùå –ù–ò –û–î–ò–ù –¢–†–ò–ì–ì–ï–† –ù–ï –°–†–ê–ë–û–¢–ê–õ - –∞–Ω–∞–ª–∏–∑ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
      }
    } else {
      console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
    }
  };

  const handleAnalyze = useCallback(async () => {
    const textToAnalyze = currentText.trim()
    
    console.log('üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û initializeDocument:', {
      document_before: document,
      editorText_before: editorText,
      currentText_before: currentText,
      document_exists_before: !!document
    })
    
    if (!textToAnalyze || !editorTopic.trim()) {
      if (textToAnalyze && !editorTopic.trim()) {
        setShowTopicHint(true)
        setTimeout(() => setShowTopicHint(false), 3000)
      }
      return
    }
    
    try {
      console.log('üîÑ –í–´–ó–´–í–ê–ï–ú initializeDocument —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
        text: textToAnalyze,
        topic: editorTopic
      })
      await initializeDocument(textToAnalyze, editorTopic)
      console.log('‚úÖ initializeDocument –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
      console.log('üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï initializeDocument:', {
        document_after: document,
        document_exists_after: !!document,
        chunks_count_after: document?.chunks.length || 0,
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ store
        store_state: useDocumentStore.getState()
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ initializeDocument:', error)
    }
  }, [currentText, editorTopic, initializeDocument])

  const handleFileLoad = useCallback(async (file: File) => {
    setFileError(null)
    
    if (!file.type.match('text.*') && !file.name.endsWith('.txt') && !file.name.endsWith('.md')) {
      setFileError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª')
      return
    }
    
    if (file.size > 1024 * 1024) {
      setFileError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1MB')
      return
    }

    try {
      const text = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader()
        reader.onload = (e) => resolve(e.target?.result as string)
        reader.onerror = reject
        reader.readAsText(file)
      })
      
      if (text) {
        console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
        setEditorText(text) // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–º–∞
        if (editorTopic.trim()) {
          console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞')
          initializeDocument(text, editorTopic)
        } else {
          console.log('‚ö†Ô∏è –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω—É–∂–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
          setShowTopicHint(true)
          setTimeout(() => setShowTopicHint(false), 3000)
        }
      }
    } catch (error) {
      setFileError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞')
    }
  }, [editorTopic, initializeDocument])

  const handlePaste = useCallback(async () => {
    const text = await pasteFromClipboard()
    if (text) {
      console.log('üìã –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –∫–ª–∏–ø–±–æ—Ä–¥–∞')
      setEditorText(text) // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ  
      
      // –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –∫–ª–∏–ø–±–æ—Ä–¥–∞ —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–º–∞ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç
      const storeState = useDocumentStore.getState()
      const actualDocument = storeState.document
      
      if (!actualDocument) {
        if (editorTopic.trim()) {
          console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–ª–∏–ø–±–æ—Ä–¥–∞')
          initializeDocument(text, editorTopic)
        } else {
          console.log('‚ö†Ô∏è –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –Ω—É–∂–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
          setShowTopicHint(true)
          setTimeout(() => setShowTopicHint(false), 3000)
        }
      } else {
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤—Å—Ç–∞–≤–∫—É')
        handleTextChange(text, undefined, undefined) // –í—Å—Ç–∞–≤–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
      }
    }
  }, [pasteFromClipboard, editorTopic, initializeDocument, handleTextChange])

  const headerControls = (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
      <div style={{ display: 'flex', gap: '8px' }}>
        <button
          onClick={() => {
            fileInputRef.current?.click()
          }}
          disabled={loading}
          style={{
            padding: '4px 12px',
            fontSize: '12px',
            backgroundColor: '#eff6ff',
            color: '#1d4ed8',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            opacity: loading ? 0.5 : 1,
            transition: 'background-color 0.2s'
          }}
          onMouseEnter={e => !loading && ((e.target as HTMLButtonElement).style.backgroundColor = '#dbeafe')}
          onMouseLeave={e => (e.target as HTMLButtonElement).style.backgroundColor = '#eff6ff'}
        >
          üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        </button>
        <button
          onClick={handlePaste}
          disabled={loading}
          style={{
            padding: '4px 12px',
            fontSize: '12px',
            backgroundColor: '#f0fdf4',
            color: '#15803d',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            opacity: loading ? 0.5 : 1,
            transition: 'background-color 0.2s'
          }}
          onMouseEnter={e => !loading && ((e.target as HTMLButtonElement).style.backgroundColor = '#dcfce7')}
          onMouseLeave={e => (e.target as HTMLButtonElement).style.backgroundColor = '#f0fdf4'}
        >
          üìã –í—Å—Ç–∞–≤–∏—Ç—å
        </button>
      </div>
      
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏ */}
      {showEditorSettings && (
        <div style={{
          padding: '8px',
          backgroundColor: '#f8fafc',
          borderRadius: '4px',
          fontSize: '12px'
        }}>
          <button
            onClick={() => {
              try {
                console.log('üî¨ –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:')
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ currentText
                if (!currentText) {
                  console.log('üìù –¢–µ–∫—Å—Ç: –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                  console.log('üìè –î–ª–∏–Ω–∞: 0')
                  return
                }
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                try {
                  console.log('üìù –¢–µ–∫—Å—Ç:', typeof currentText === 'string' ? JSON.stringify(currentText.substring(0, 100)) : '–ù–µ —Å—Ç—Ä–æ–∫–∞')
                } catch (err) {
                  console.log('üìù –¢–µ–∫—Å—Ç: [–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏]')
                }
                
                console.log('üìè –î–ª–∏–Ω–∞:', currentText.length)
                
                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                const maxChars = Math.min(currentText.length, 50)
                for (let i = 0; i < maxChars; i++) {
                  try {
                    const char = currentText[i]
                    if (char !== undefined && char !== null) {
                      const code = char.charCodeAt(0)
                      const name = code === 10 ? 'LF' : code === 13 ? 'CR' : code === 32 ? 'SPACE' : char
                      console.log(`  [${i}]: "${char}" ‚Üí ${code} (${name})`)
                    } else {
                      console.log(`  [${i}]: undefined –∏–ª–∏ null —Å–∏–º–≤–æ–ª`)
                    }
                  } catch (charErr) {
                    console.log(`  [${i}]: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–º–≤–æ–ª–∞`)
                  }
                }
                
                if (currentText.length > 50) {
                  console.log(`  ... –∏ –µ—â–µ ${currentText.length - 50} —Å–∏–º–≤–æ–ª–æ–≤`)
                }
              } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error)
              }
            }}
            style={{
              padding: '4px 8px',
              fontSize: '11px',
              backgroundColor: '#fef3c7',
              color: '#92400e',
              border: '1px solid #fbbf24',
              borderRadius: '4px',
              cursor: 'pointer',
              width: '100%'
            }}
          >
            üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
          </button>
        </div>
      )}
      
      <button
        onClick={handleAnalyze}
        disabled={loading || !currentText.trim() || !editorTopic.trim()}
        style={{
          padding: '8px 16px',
          backgroundColor: '#7c3aed',
          color: 'white',
          border: 'none',
          borderRadius: '4px',
          fontSize: '14px',
          cursor: 'pointer',
          width: '100%',
          opacity: (loading || !currentText.trim() || !editorTopic.trim()) ? 0.5 : 1,
          transition: 'background-color 0.2s'
        }}
        onMouseEnter={e => {
          const disabled = loading || !currentText.trim() || !editorTopic.trim()
          if (!disabled) (e.target as HTMLButtonElement).style.backgroundColor = '#6d28d9'
        }}
        onMouseLeave={e => (e.target as HTMLButtonElement).style.backgroundColor = '#7c3aed'}
      >
        {loading ? '–ê–Ω–∞–ª–∏–∑...' : '‚ñ∂Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'}
      </button>
    </div>
  )

  const headerButtons = (
    <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
      <div
        style={{
          padding: '2px 6px',
          fontSize: '10px',
          backgroundColor: '#dcfce7',
          color: '#16a34a',
          borderRadius: '4px',
          fontWeight: '600'
        }}
        title="–°–∏—Å—Ç–µ–º–∞ —á–∞–Ω–∫–æ–≤ V2"
      >
        V2
      </div>
      <button
        onClick={() => setShowEditorSettings(!showEditorSettings)}
        style={{
          padding: '4px',
          backgroundColor: showEditorSettings ? '#e0e7ff' : 'transparent',
          color: showEditorSettings ? '#4338ca' : '#666',
          border: 'none',
          borderRadius: '4px',
          fontSize: '14px',
          cursor: 'pointer',
          transition: 'background-color 0.2s'
        }}
        onMouseEnter={(e) => {
          try {
            if (!showEditorSettings && e.currentTarget) {
              e.currentTarget.style.backgroundColor = '#f5f5f5'
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π
          }
        }}
        onMouseLeave={(e) => {
          try {
            if (!showEditorSettings && e.currentTarget) {
              e.currentTarget.style.backgroundColor = 'transparent'
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π
          }
        }}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
      >
        ‚öôÔ∏è
      </button>
    </div>
  )

  return (
    <Panel
      title={`–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä (${chunksCount} —á–∞–Ω–∫–æ–≤)`}
      icon={icon}
      isExpanded={isExpanded}
      onToggleExpanded={onToggleExpanded}
      headerControls={headerControls}
      headerButtons={headerButtons}
      showSettings={showEditorSettings}
      onToggleSettings={() => setShowEditorSettings(!showEditorSettings)}
    >
      <div style={{ 
        height: '100%', 
        display: 'flex', 
        flexDirection: 'column', 
        padding: '16px'
      }}>
        <div style={{ 
          flexShrink: 0,
          marginBottom: '16px',
          position: 'relative'
        }}>
          <label style={{ 
            display: 'block', 
            fontSize: '14px', 
            fontWeight: '500', 
            color: '#374151', 
            marginBottom: '4px' 
          }}>
            –¢–µ–º–∞
          </label>
          <input
            type="text"
            value={editorTopic}
            onChange={(e) => {
              setEditorTopic(e.target.value)
              if (showTopicHint) setShowTopicHint(false)
            }}
            disabled={loading}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
            style={{
              width: '100%',
              padding: '8px 12px',
              border: showTopicHint ? '2px solid #ef4444' : '1px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '14px',
              outline: 'none',
              transition: 'border-color 0.2s',
              backgroundColor: loading ? '#f9fafb' : 'white'
            }}
            onFocus={e => e.target.style.borderColor = '#3b82f6'}
            onBlur={e => e.target.style.borderColor = showTopicHint ? '#ef4444' : '#d1d5db'}
          />
          
          {showTopicHint && (
            <div style={{
              position: 'absolute',
              top: '100%',
              left: '0',
              right: '0',
              marginTop: '4px',
              padding: '8px 12px',
              backgroundColor: '#fef2f2',
              border: '1px solid #fecaca',
              borderRadius: '6px',
              color: '#dc2626',
              fontSize: '13px',
              fontWeight: '500',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              animation: 'fadeInShake 0.5s ease-out',
              zIndex: 10,
              boxShadow: '0 2px 8px rgba(239, 68, 68, 0.2)'
            }}>
              <span>‚ö†Ô∏è</span>
              <span>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</span>
            </div>
          )}
        </div>

        {/* Monaco Editor —Å —Å–∏—Å—Ç–µ–º–æ–π —á–∞–Ω–∫–æ–≤ */}
        <div style={{ 
          flex: 1, 
          display: 'flex', 
          flexDirection: 'column',
          minHeight: '200px',
          position: 'relative'
        }}>
          <div style={{ flex: 1, minHeight: 0 }}>
            <MonacoEditor
              value={currentText}
              onChange={handleTextChange}
            />
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —á–∞–Ω–∫–æ–≤ */}
          <div style={{
            position: 'absolute',
            bottom: '8px',
            right: '8px',
            padding: '4px 8px',
            backgroundColor: 'rgba(34, 197, 94, 0.1)',
            border: '1px solid rgba(34, 197, 94, 0.2)',
            borderRadius: '4px',
            fontSize: '11px',
            color: '#16a34a',
            pointerEvents: 'none',
            display: 'flex',
            alignItems: 'center',
            gap: '4px'
          }}>
            <span>üß©</span>
            <span>{chunksCount} —á–∞–Ω–∫–æ–≤</span>
            <span>‚Ä¢</span>
            <span>V{document?.version || 0}</span>
          </div>
        </div>

        {/* –û—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        {fileError && (
          <div style={{ 
            padding: '12px', 
            backgroundColor: '#fef2f2', 
            border: '1px solid #fecaca', 
            borderRadius: '6px', 
            color: '#dc2626',
            fontSize: '14px',
            flexShrink: 0,
            marginTop: '16px'
          }}>
            <strong>–§–∞–π–ª:</strong> {fileError}
          </div>
        )}
        
        {error && (
          <div style={{ 
            padding: '12px', 
            backgroundColor: '#fef2f2', 
            border: '1px solid #fecaca', 
            borderRadius: '6px', 
            color: '#dc2626',
            fontSize: '14px',
            flexShrink: 0,
            marginTop: '16px'
          }}>
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </div>
        )}
      </div>
      
      <input
        ref={fileInputRef}
        type="file"
        accept=".txt,.md"
        onChange={(e) => {
          const file = e.target.files?.[0]
          if (file) {
            handleFileLoad(file)
          }
        }}
        style={{ display: 'none' }}
      />
    </Panel>
  )
} 