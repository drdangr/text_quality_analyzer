import React, { useState, useCallback, useRef, useEffect } from 'react'
import { Panel } from '../Panel'
import { useAppStore } from '../../../store/appStore'
import { HeatMap } from './HeatMap'
import { CardSettingsPanel } from './CardSettingsPanel'
import { updateTextAndRestructureParagraph, mergeParagraphs, reorderParagraphs, deleteParagraph } from '../../../api'
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core'
import type { DragEndEvent } from '@dnd-kit/core'
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'

interface CardDeckPanelProps {
  icon?: string
  isExpanded?: boolean
  onToggleExpanded?: () => void
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è draggable –∫–∞—Ä—Ç–æ—á–∫–∏
const SortableCard: React.FC<{
  paragraph: any
  index: number
  editingCardId: number | null
  editingText: string
  setEditingText: (text: string) => void
  startEditingCard: (id: number, text: string) => void
  finishCardEditing: () => void
  debouncedSyncToEditor: (cardId: number, text: string) => void
  mergeWithNext: (id: number) => void
  deleteParagraph: (id: number) => void
  setSelectedParagraph: (id: string) => void
  selectedParagraphId: string | null
  fontSize: number
  fontFamily: string
  getCardColor: (paragraph: any) => string
  getTextColor: (paragraph: any) => string
  isLastCard: boolean
}> = ({ 
  paragraph, 
  index, 
  editingCardId, 
  editingText, 
  setEditingText, 
  startEditingCard, 
  finishCardEditing,
  debouncedSyncToEditor,
  mergeWithNext, 
  deleteParagraph,
  setSelectedParagraph, 
  selectedParagraphId,
  fontSize,
  fontFamily,
  getCardColor,
  getTextColor,
  isLastCard
}) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({ id: paragraph.id.toString() })

  const [isEditing, setIsEditing] = useState(false)
  const [localText, setLocalText] = useState(paragraph.text)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å paragraph.text –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
  useEffect(() => {
    if (!isEditing) {
      setLocalText(paragraph.text)
    }
  }, [paragraph.text, isEditing])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É textarea
  useEffect(() => {
    if (isEditing && textareaRef.current) {
      const textarea = textareaRef.current
      textarea.style.height = 'auto'
      textarea.style.height = `${textarea.scrollHeight}px`
    }
  }, [isEditing, localText])

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  }

  const handleStartEditing = () => {
    setIsEditing(true)
    setLocalText(paragraph.text)
    startEditingCard(paragraph.id, paragraph.text)
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ textarea –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    setTimeout(() => {
      if (textareaRef.current) {
        textareaRef.current.focus()
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
        const length = textareaRef.current.value.length
        textareaRef.current.setSelectionRange(length, length)
      }
    }, 0)
  }

  const handleTextChange = (newText: string) => {
    setLocalText(newText)
    setEditingText(newText)
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    if (editingCardId === paragraph.id) {
      debouncedSyncToEditor(paragraph.id, newText)
    }
  }

  const handleFinishEditing = () => {
    setIsEditing(false)
    finishCardEditing()
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      e.preventDefault()
      // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å textarea, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç onBlur –∏ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (textareaRef.current) {
        textareaRef.current.blur()
      }
    } else if (e.key === 'Escape') {
      e.preventDefault()
      setLocalText(paragraph.text) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
      setIsEditing(false)
      finishCardEditing()
    }
  }

  // –¶–≤–µ—Ç —à–∞–ø–∫–∏ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
  const headerColor = '#f8f9fa'
  const headerTextColor = '#495057'

  return (
    <div ref={setNodeRef} style={style} {...attributes}>
      <div style={{
        border: selectedParagraphId === paragraph.id.toString() ? '2px solid #7c3aed' : '1px solid #e5e7eb',
        borderRadius: '8px',
        boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
        transition: 'all 0.2s',
        position: 'relative',
        marginBottom: '0',
        overflow: 'visible'
      }}
      data-paragraph-id={paragraph.id}
      onClick={() => setSelectedParagraph(paragraph.id.toString())}
      onMouseEnter={e => e.currentTarget.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)'}
      onMouseLeave={e => e.currentTarget.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)'}
      >
        {/* –®–∞–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º */}
        <div 
          style={{
            backgroundColor: headerColor,
            padding: '4px 12px',
            borderBottom: '1px solid #e5e7eb',
            position: 'relative',
            minHeight: 'auto',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            lineHeight: '1.2'
          }}
        >
          {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è drag-and-drop */}
          <div 
            {...listeners}
            style={{
              cursor: 'grab',
              display: 'flex',
              alignItems: 'center',
              gap: '12px',
              fontSize: `${Math.max(10, fontSize - 2)}px`,
              color: headerTextColor,
              flex: 1
            }}
          >
            <span style={{ fontWeight: '600' }}>ID: {paragraph.id}</span>
            <span>–°–∏–≥–Ω–∞–ª: {paragraph.metrics.signal_strength?.toFixed(2) || 'N/A'}</span>
            <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å: {paragraph.metrics.complexity?.toFixed(2) || 'N/A'}</span>
            {paragraph.metrics.semantic_function && (
              <span style={{ color: '#2563eb' }}>
                üè∑Ô∏è {paragraph.metrics.semantic_function}
              </span>
            )}
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –í–ù–ï –æ–±–ª–∞—Å—Ç–∏ drag-and-drop */}
          <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
            <button
              onClick={(e) => {
                console.log('üóëÔ∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', paragraph.id)
                e.stopPropagation()
                e.preventDefault()
                console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', paragraph.id)
                deleteParagraph(paragraph.id)
              }}
              onMouseDown={(e) => {
                console.log('üëÜ MouseDown –Ω–∞ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è:', paragraph.id)
                e.stopPropagation() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –¥–ª—è drag-and-drop
              }}
              style={{
                padding: '4px 8px',
                fontSize: '16px',
                backgroundColor: '#fee2e2',
                color: '#dc2626',
                border: '1px solid #fecaca',
                borderRadius: '4px',
                cursor: 'pointer',
                transition: 'all 0.2s',
                minWidth: '28px',
                minHeight: '28px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                zIndex: 10,
                position: 'relative',
                pointerEvents: 'auto'
              }}
              onMouseEnter={e => {
                console.log('üñ±Ô∏è Hover –Ω–∞ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è:', paragraph.id)
                e.currentTarget.style.backgroundColor = '#fecaca'
                e.currentTarget.style.transform = 'scale(1.1)'
              }}
              onMouseLeave={e => {
                e.currentTarget.style.backgroundColor = '#fee2e2'
                e.currentTarget.style.transform = 'scale(1)'
              }}
              title="–£–¥–∞–ª–∏—Ç—å –∞–±–∑–∞—Ü"
            >
              √ó
            </button>
          </div>
        </div>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ü–≤–µ—Ç–æ–º –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º */}
        <div style={{
          backgroundColor: getCardColor(paragraph),
          padding: '16px'
        }}>
          {/* –¢–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ - –ª–∏–±–æ textarea –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ª–∏–±–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç */}
          {isEditing ? (
            <textarea
              ref={textareaRef}
              value={localText}
              onChange={(e) => handleTextChange(e.target.value)}
              onBlur={handleFinishEditing}
              onKeyDown={handleKeyDown}
              style={{
                width: '100%',
                fontSize: `${fontSize}px`,
                fontFamily: fontFamily,
                color: getTextColor(paragraph),
                lineHeight: '1.6',
                margin: 0,
                padding: '4px',
                borderRadius: '4px',
                outline: 'none',
                border: '2px solid #7c3aed',
                background: 'rgba(255, 255, 255, 0.9)',
                resize: 'none',
                overflow: 'hidden'
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞..."
            />
          ) : (
            <p 
              onClick={handleStartEditing}
              style={{
                fontSize: `${fontSize}px`,
                color: getTextColor(paragraph),
                lineHeight: '1.6',
                margin: 0,
                cursor: 'text',
                padding: '4px',
                borderRadius: '4px',
                transition: 'background-color 0.2s',
                minHeight: '1.6em',
                whiteSpace: 'pre-wrap'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = 'rgba(0, 0, 0, 0.05)'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'transparent'
              }}
              title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Ctrl+Enter - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, Esc - –æ—Ç–º–µ–Ω–∞)"
            >
              {paragraph.text || '–ü—É—Å—Ç–æ–π –∞–±–∑–∞—Ü - –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
            </p>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π */}
        {!isLastCard && (
          <button
            onClick={(e) => {
              e.stopPropagation()
              mergeWithNext(paragraph.id)
            }}
            style={{
              position: 'absolute',
              bottom: '-12px',
              left: '50%',
              transform: 'translateX(-50%)',
              width: '24px',
              height: '24px',
              backgroundColor: '#10b981',
              color: 'white',
              border: 'none',
              borderRadius: '12px',
              fontSize: '16px',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 1,
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}
            title="–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π"
          >
            +
          </button>
        )}
      </div>
    </div>
  )
}

export const CardDeckPanel: React.FC<CardDeckPanelProps> = ({ 
  icon, 
  isExpanded, 
  onToggleExpanded 
}) => {
  const [showSettings, setShowSettings] = useState(false)
  const [showHeatMap, setShowHeatMap] = useState(false)
  const [editingCardId, setEditingCardId] = useState<number | null>(null)
  const [editingText, setEditingText] = useState('')
  
  const { 
    session, 
    fontSize, 
    fontFamily, 
    signalMinColor, 
    signalMaxColor, 
    complexityMinColor, 
    complexityMaxColor,
    setEditorFullText,
    selectedParagraphId,
    setSelectedParagraph,
    scrollToCard,
    setSession,
    updateEditingText,
    editingState,
    startEditing
  } = useAppStore()

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è drag-and-drop
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  )

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
  const syncToEditor = useCallback((cardId: number, newText: string) => {
    if (session) {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º:', cardId)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–µ—Å—Å–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
      const updatedParagraphs = session.paragraphs.map(p => 
        p.id === cardId ? { ...p, text: newText } : p
      )
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      const fullText = updatedParagraphs
        .sort((a, b) => a.id - b.id)
        .map(p => p.text)
        .join('\n\n')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
      setSession({
        ...session,
        paragraphs: updatedParagraphs
      })
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
      setEditorFullText(fullText)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (editingState.mode === 'none') {
        startEditing('card-editor', cardId)
      }
      updateEditingText(fullText)
    }
  }, [session, setSession, setEditorFullText, editingState.mode, startEditing, updateEditingText])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragEnd = useCallback(async (event: DragEndEvent) => {
    const { active, over } = event
    
    if (!over || !session || active.id === over.id) return
    
    const paragraphs = session.paragraphs
    const oldIndex = paragraphs.findIndex(p => p.id.toString() === active.id)
    const newIndex = paragraphs.findIndex(p => p.id.toString() === over.id)
    
    if (oldIndex === -1 || newIndex === -1) return
    
    try {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      const newOrderedParagraphs = arrayMove(paragraphs, oldIndex, newIndex)
      const optimisticSession = {
        ...session,
        paragraphs: newOrderedParagraphs
      }
      setSession(optimisticSession)
      
      // API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
      const newOrderIds = newOrderedParagraphs.map(p => p.id)
      const updatedSession = await reorderParagraphs(
        session.metadata.session_id,
        newOrderIds
      )
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      setSession(updatedSession)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const fullText = updatedSession.paragraphs
        .sort((a: any, b: any) => a.id - b.id)
        .map((p: any) => p.text)
        .join('\n\n')
      setEditorFullText(fullText)
      updateEditingText(fullText)
      
      console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞:', error)
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setSession(session)
      
      // –¢–∞–∫–∂–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
      const originalText = session.paragraphs
        .sort((a: any, b: any) => a.id - b.id)
        .map((p: any) => p.text)
        .join('\n\n')
      setEditorFullText(originalText)
      updateEditingText(originalText)
    }
  }, [session, setSession, setEditorFullText, updateEditingText])

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const startEditingCard = useCallback((cardId: number, currentText: string) => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', cardId)
    setEditingCardId(cardId)
    setEditingText(currentText)
  }, [])

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const finishCardEditing = useCallback(async () => {
    console.log('‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:', editingCardId)
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (editingCardId !== null && editingText && session) {
      // –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      syncToEditor(editingCardId, editingText)
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º API –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤
      if (editingText.includes('\n\n')) {
        try {
          console.log('üîÑ –†–∞–∑–±–∏–µ–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤ —á–µ—Ä–µ–∑ API')
          const updatedSession = await updateTextAndRestructureParagraph(
            session.metadata.session_id,
            editingCardId,
            editingText
          )
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          setSession(updatedSession)
          
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
          const fullText = updatedSession.paragraphs
            .sort((a: any, b: any) => a.id - b.id)
            .map((p: any) => p.text)
            .join('\n\n')
          
          setEditorFullText(fullText)
          updateEditingText(fullText)
          
          console.log('‚úÖ –†–∞–∑–±–∏–µ–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–±–∑–∞—Ü–µ–≤:', updatedSession.paragraphs.length)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –∞–±–∑–∞—Ü–µ–≤:', error)
        }
      }
    }
    
    setEditingCardId(null)
    setEditingText('')
  }, [editingCardId, editingText, session, syncToEditor, setSession, setEditorFullText, updateEditingText])

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
  const mergeWithNext = useCallback(async (cardId: number) => {
    if (session) {
      console.log('–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏', cardId, '—Å–æ —Å–ª–µ–¥—É—é—â–µ–π')
      
      try {
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        const currentIndex = session.paragraphs.findIndex((p: any) => p.id === cardId)
        if (currentIndex === -1 || currentIndex >= session.paragraphs.length - 1) {
          console.warn('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è')
          return
        }
        
        const nextParagraph = session.paragraphs[currentIndex + 1]
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        const updatedSession = await mergeParagraphs(
          session.metadata.session_id,
          cardId,
          nextParagraph.id
        )
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ store
        setSession(updatedSession)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const fullText = updatedSession.paragraphs
          .sort((a: any, b: any) => a.id - b.id)
          .map((p: any) => p.text)
          .join('\n\n')
        setEditorFullText(fullText)
        updateEditingText(fullText)
        
        console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error)
        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      }
    }
  }, [session, setSession, setEditorFullText, updateEditingText])

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  const moveCard = useCallback((fromId: number, toId: number) => {
    if (session) {
      console.log('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏', fromId, '–≤ –ø–æ–∑–∏—Ü–∏—é', toId)
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å drag-and-drop –∏ API –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
      syncToEditor(fromId, session.paragraphs.find(p => p.id === fromId)?.text || '')
    }
  }, [session, syncToEditor])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
  const getCardColor = useCallback((paragraph: any) => {
    const signal = paragraph.metrics.signal_strength || 0
    
    // –ù–∞—Ö–æ–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    if (!session) return 'white'
    
    const allSignals = session.paragraphs.map(p => p.metrics.signal_strength || 0)
    const minSignal = Math.min(...allSignals)
    const maxSignal = Math.max(...allSignals)
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
    const normalize = (value: number, min: number, max: number): number => {
      if (max === min) return value >= max ? 1 : 0
      const N = Math.max(0, Math.min(1, (value - min) / (max - min)))
      return isNaN(N) ? 0 : N
    }
    
    const normalizedSignal = normalize(signal, minSignal, maxSignal)
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º —Å–∏–≥–Ω–∞–ª–∞
    const hexToRgb = (hex: string) => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : { r: 255, g: 255, b: 255 }
    }
    
    const minColor = hexToRgb(signalMinColor)
    const maxColor = hexToRgb(signalMaxColor)
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ü–≤–µ—Ç–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
    const r = Math.round(minColor.r + (maxColor.r - minColor.r) * normalizedSignal)
    const g = Math.round(minColor.g + (maxColor.g - minColor.g) * normalizedSignal)
    const b = Math.round(minColor.b + (maxColor.b - minColor.b) * normalizedSignal)
    
    return `rgb(${r}, ${g}, ${b})`
  }, [session, signalMinColor, signalMaxColor])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getTextColor = useCallback((paragraph: any) => {
    const complexity = paragraph.metrics.complexity || 0
    
    // –ù–∞—Ö–æ–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    if (!session) return '#1f2937'
    
    const allComplexity = session.paragraphs.map(p => p.metrics.complexity || 0)
    const minComplexity = Math.min(...allComplexity)
    const maxComplexity = Math.max(...allComplexity)
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
    const normalize = (value: number, min: number, max: number): number => {
      if (max === min) return value >= max ? 1 : 0
      const N = Math.max(0, Math.min(1, (value - min) / (max - min)))
      return isNaN(N) ? 0 : N
    }
    
    const normalizedComplexity = normalize(complexity, minComplexity, maxComplexity)
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const hexToRgb = (hex: string) => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : { r: 31, g: 41, b: 55 } // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    }
    
    const minColor = hexToRgb(complexityMinColor)
    const maxColor = hexToRgb(complexityMaxColor)
    
    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ü–≤–µ—Ç–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
    const r = Math.round(minColor.r + (maxColor.r - minColor.r) * normalizedComplexity)
    const g = Math.round(minColor.g + (maxColor.g - minColor.g) * normalizedComplexity)
    const b = Math.round(minColor.b + (maxColor.b - minColor.b) * normalizedComplexity)
    
    return `rgb(${r}, ${g}, ${b})`
  }, [session, complexityMinColor, complexityMaxColor])

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  const deleteCard = useCallback(async (cardId: number) => {
    console.log('üóëÔ∏è deleteCard –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', cardId)
    
    if (!session) {
      console.error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏')
      return
    }
    
    console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏', cardId, '–∏–∑ —Å–µ—Å—Å–∏–∏:', session.metadata.session_id)
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      console.log('üì° –í—ã–∑–æ–≤ API deleteParagraph...')
      const updatedSession = await deleteParagraph(
        session.metadata.session_id,
        cardId
      )
      
      console.log('üì° API deleteParagraph –æ—Ç–≤–µ—Ç–∏–ª:', updatedSession)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ store
      setSession(updatedSession)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const fullText = updatedSession.paragraphs
        .sort((a: any, b: any) => a.id - b.id)
        .map((p: any) => p.text)
        .join('\n\n')
      setEditorFullText(fullText)
      updateEditingText(fullText)
      
      console.log('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫:', updatedSession.paragraphs.length)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error)
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: ${error}`)
    }
  }, [session, setSession, setEditorFullText, updateEditingText])

  if (!session) {
    return (
      <Panel
        id="cards"
        title="–ö–∞—Ä—Ç–æ—á–∫–∏"
        icon={icon}
        isExpanded={isExpanded}
        onToggleExpanded={onToggleExpanded}
      >
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: '256px',
          color: '#6b7280'
        }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '36px', marginBottom: '16px' }}>üÉè</div>
            <p style={{ fontSize: '18px', marginBottom: '8px' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
            <p style={{ fontSize: '14px' }}>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞</p>
          </div>
        </div>
      </Panel>
    )
  }

  const headerControls = (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
      {/* Heat Map */}
      {showHeatMap && (
        <HeatMap
          paragraphs={session.paragraphs}
          onParagraphClick={(id) => {
            setSelectedParagraph(id.toString())
            scrollToCard(id)
          }}
          selectedParagraphId={selectedParagraphId ? parseInt(selectedParagraphId) : null}
          signalMinColor={signalMinColor}
          signalMaxColor={signalMaxColor}
          complexityMinColor={complexityMinColor}
          complexityMaxColor={complexityMaxColor}
        />
      )}
      
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      {showSettings && (
        <CardSettingsPanel />
      )}
    </div>
  )

  const headerButtons = (
    <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
      <button
        onClick={() => setShowHeatMap(!showHeatMap)}
        style={{
          padding: '4px',
          backgroundColor: showHeatMap ? '#e0e7ff' : 'transparent',
          color: showHeatMap ? '#4338ca' : '#666',
          border: 'none',
          borderRadius: '4px',
          fontSize: '14px',
          cursor: 'pointer',
          transition: 'background-color 0.2s'
        }}
        onMouseOver={(e) => {
          if (!showHeatMap) e.currentTarget.style.backgroundColor = '#f5f5f5'
        }}
        onMouseOut={(e) => {
          if (!showHeatMap) e.currentTarget.style.backgroundColor = 'transparent'
        }}
        title="Heat Map"
      >
        üó∫Ô∏è
      </button>
      
      <button
        onClick={() => setShowSettings(!showSettings)}
        style={{
          padding: '4px',
          backgroundColor: showSettings ? '#e0e7ff' : 'transparent',
          color: showSettings ? '#4338ca' : '#666',
          border: 'none',
          borderRadius: '4px',
          fontSize: '14px',
          cursor: 'pointer',
          transition: 'background-color 0.2s'
        }}
        onMouseOver={(e) => {
          if (!showSettings) e.currentTarget.style.backgroundColor = '#f5f5f5'
        }}
        onMouseOut={(e) => {
          if (!showSettings) e.currentTarget.style.backgroundColor = 'transparent'
        }}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
      >
        ‚öôÔ∏è
      </button>
    </div>
  )

  return (
    <Panel
      id="cards"
      title={`–ö–∞—Ä—Ç–æ—á–∫–∏ (${session.paragraphs.length})`}
      icon={icon}
      isExpanded={isExpanded}
      onToggleExpanded={onToggleExpanded}
      headerControls={headerControls}
      headerButtons={headerButtons}
      showSettings={showSettings || showHeatMap}
      onToggleSettings={() => {
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç HeatMap, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
        if (showHeatMap) {
          setShowHeatMap(false)
        }
        if (showSettings) {
          setShowSettings(false)
        }
      }}
    >
      <div style={{ height: '100%', padding: '16px' }}>
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={handleDragEnd}
        >
          <SortableContext
            items={session.paragraphs.map(p => p.id.toString())}
            strategy={verticalListSortingStrategy}
          >
            <div style={{ 
              display: 'flex', 
              flexDirection: 'column', 
              gap: '0px', // —É–±–∏—Ä–∞–µ–º gap, —Ç.–∫. margin —Ç–µ–ø–µ—Ä—å –≤ SortableCard
              fontSize: `${fontSize}px`,
              fontFamily: fontFamily
            }}>
              {session.paragraphs.map((paragraph, index) => (
                <SortableCard
                  key={paragraph.id}
                  paragraph={paragraph}
                  index={index}
                  editingCardId={editingCardId}
                  editingText={editingText}
                  setEditingText={setEditingText}
                  startEditingCard={startEditingCard}
                  finishCardEditing={finishCardEditing}
                  debouncedSyncToEditor={syncToEditor}
                  mergeWithNext={mergeWithNext}
                  deleteParagraph={deleteCard}
                  setSelectedParagraph={setSelectedParagraph}
                  selectedParagraphId={selectedParagraphId}
                  fontSize={fontSize}
                  fontFamily={fontFamily}
                  getCardColor={getCardColor}
                  getTextColor={getTextColor}
                  isLastCard={index >= session.paragraphs.length - 1}
                />
              ))}
            </div>
          </SortableContext>
        </DndContext>
      </div>
    </Panel>
  )
}