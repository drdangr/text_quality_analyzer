// Monaco Editor —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ —Å–∏—Å—Ç–µ–º—É —á–∞–Ω–∫–æ–≤

import React, { useRef, useEffect, useCallback } from 'react';
import Editor, { type OnMount, type OnChange } from '@monaco-editor/react';
import type { editor } from 'monaco-editor';
import { useDocumentStore } from '../store/documentStore';
import type { ChangeInfo } from '../types/chunks';

interface MonacoEditorProps {
  value: string;
  onChange?: (value: string, changeInfo?: ChangeInfo, cursorPosition?: number) => void;
  height?: string;
  language?: string;
  options?: editor.IStandaloneEditorConstructionOptions;
}

const MonacoEditor: React.FC<MonacoEditorProps> = ({
  value,
  onChange,
  height = '200px',
  language = 'plaintext',
  options = {}
}) => {
  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);
  const containerRef = useRef<HTMLDivElement | null>(null);

  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è
  const defaultOptions: editor.IStandaloneEditorConstructionOptions = {
    minimap: { enabled: false },
    scrollBeyondLastLine: false,
    fontSize: 14,
    lineNumbers: 'off',
    wordWrap: 'on',
    automaticLayout: true, // –í–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π layout
    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    suggestOnTriggerCharacters: false,
    acceptSuggestionOnEnter: 'off',
    tabCompletion: 'off',
    wordBasedSuggestions: 'off',
    quickSuggestions: false,
    parameterHints: { enabled: false },
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
    scrollbar: {
      horizontal: 'hidden',
      vertical: 'auto'
    },
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
    wordWrapColumn: 120,
    rulers: [],
    renderLineHighlight: 'none'
  };

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç
  const finalOptions = {
    ...defaultOptions,
    ...options
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  const resizeEditor = useCallback(() => {
    if (editorRef.current && containerRef.current) {
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º layout
        editorRef.current.layout();
        console.log('üîß Monaco Editor layout –æ–±–Ω–æ–≤–ª–µ–Ω');
      } catch (layoutError) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ layout Monaco Editor:', layoutError);
      }
    }
  }, []);

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleChange = (newValue: string | undefined) => {
    if (onChange && newValue !== undefined) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è
        let cursorPosition = newValue.length; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        setTimeout(() => { // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
          if (editorRef.current) {
            const position = editorRef.current.getPosition();
            if (position) {
              // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –≤ offset –≤ —Ç–µ–∫—Å—Ç–µ
              const actualPosition = editorRef.current.getModel()?.getOffsetAt(position) || newValue.length;
              
              console.log('üìç Monaco Editor –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
                line: position.lineNumber,
                column: position.column,
                offset: actualPosition,
                textLength: newValue.length
              });
            }
          }
        }, 10);
        
        console.log('üìç Monaco Editor –∏–∑–º–µ–Ω–µ–Ω–∏–µ:', {
          textLength: newValue.length,
          cursorPosition: cursorPosition,
          preview: newValue.substring(0, 30) + '...'
        });
        
        onChange(newValue, undefined, cursorPosition);
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Monaco Editor:', error);
      }
    }
  };

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleEditorDidMount: OnMount = (editor, monaco) => {
    try {
      editorRef.current = editor;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å layout
      setTimeout(() => {
        try {
          if (editorRef.current) {
            editorRef.current.layout();
            console.log('üéØ Monaco Editor —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–∑–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          }
        } catch (layoutError) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ layout Monaco Editor:', layoutError);
        }
      }, 100);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      const handleWindowResize = () => {
        setTimeout(resizeEditor, 100);
      };
      
      window.addEventListener('resize', handleWindowResize);

      // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂–µ
      return () => {
        window.removeEventListener('resize', handleWindowResize);
      };
    } catch (mountError) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Monaco Editor:', mountError);
    }
  };

  // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  useEffect(() => {
    if (!containerRef.current) return;

    const resizeObserver = new ResizeObserver(() => {
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      setTimeout(resizeEditor, 50);
    });

    resizeObserver.observe(containerRef.current);

    return () => {
      resizeObserver.disconnect();
    };
  }, [resizeEditor]);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      try {
        if (editorRef.current) {
          editorRef.current.dispose();
          editorRef.current = null;
        }
      } catch (disposeError) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Monaco Editor:', disposeError);
      }
    };
  }, []);

  return (
    <div 
      ref={containerRef}
      style={{
        height: '100%',
        width: '100%', // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º 100% —à–∏—Ä–∏–Ω—ã
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden' // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
      }}
      className="monaco-container"
    >
      <div style={{ 
        flex: 1, 
        minHeight: 0, 
        width: '100%', // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º 100% —à–∏—Ä–∏–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        position: 'relative' 
      }}>
        <Editor
          height="100%"
          width="100%" // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º 100% —à–∏—Ä–∏–Ω—ã
          language={language}
          value={value}
          options={finalOptions}
          onChange={handleChange}
          onMount={handleEditorDidMount}
        />
      </div>
    </div>
  );
};

export default MonacoEditor;
export { MonacoEditor }; 