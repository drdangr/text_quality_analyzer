import React from 'react';
import { useEffect, useState } from 'react'
import { Toaster } from 'react-hot-toast'
import toast from 'react-hot-toast'
import { TextEditorPanelV2 } from './components/panels/TextEditorPanel/TextEditorPanelV2'
import { CardDeckPanelV2 } from './components/panels/CardDeckPanel/CardDeckPanelV2'
import { SemanticMapPanel } from './components/panels/SemanticMapPanel'
import { PanelResizer } from './components/panels/PanelResizer'
import { TestChunks } from './components/TestChunks'
import { useDocumentStore } from './store/documentStore'
import './App.css'
import { SemanticUpdateType } from './types/chunks'
import type { SemanticAnalysisProgress } from './types/chunks'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
const PANEL_COUNT = 3
const COLLAPSED_PANEL_WIDTH = 48
const RESIZER_WIDTH = 4

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ—Ç—Ä–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —à–∞–ø–∫–∏
const DocumentMetrics: React.FC<{
  document: any
  progress?: SemanticAnalysisProgress
}> = ({ document, progress }) => {
  if (!document?.chunks) return null

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
  const chunks = document.chunks
  const validSignalChunks = chunks.filter((c: any) => c.metrics.signal_strength !== undefined && c.metrics.signal_strength !== null)
  const validComplexityChunks = chunks.filter((c: any) => c.metrics.complexity !== undefined && c.metrics.complexity !== null)
  
  const avgSignal = validSignalChunks.length > 0 
    ? validSignalChunks.reduce((sum: number, c: any) => sum + c.metrics.signal_strength, 0) / validSignalChunks.length
    : 0

  const avgComplexity = validComplexityChunks.length > 0
    ? validComplexityChunks.reduce((sum: number, c: any) => sum + c.metrics.complexity, 0) / validComplexityChunks.length
    : 0

  // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è 200 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
  const wordCount = document.text.split(/\s+/).filter((word: string) => word.length > 0).length
  const readingTimeMinutes = Math.ceil(wordCount / 200)

  return (
    <div style={{
      display: 'flex',
      alignItems: 'center',
      gap: '24px',
      fontSize: '13px',
      color: '#64748b'
    }}>
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <span>üéØ</span>
          <span style={{ 
            fontWeight: '600',
            color: avgSignal > 0.7 ? '#059669' : avgSignal > 0.5 ? '#d97706' : '#dc2626'
          }}>
            {avgSignal.toFixed(2)}
          </span>
        </div>

        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <span>üß†</span>
          <span style={{ 
            fontWeight: '600',
            color: avgComplexity < 0.3 ? '#059669' : avgComplexity < 0.7 ? '#d97706' : '#dc2626'
          }}>
            {avgComplexity.toFixed(2)}
          </span>
        </div>

        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <span>‚è±Ô∏è</span>
          <span style={{ fontWeight: '600', color: '#1e40af' }}>
            ~{readingTimeMinutes} –º–∏–Ω
          </span>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
      <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
        <span>üìù {wordCount} —Å–ª–æ–≤</span>
        <span>üß© {chunks.length} —á–∞–Ω–∫–æ–≤</span>
        <span>üìÑ {document.text.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
const SemanticAnalysisProgressBar: React.FC<{
  progress: SemanticAnalysisProgress
}> = ({ progress }) => {
  console.log('üé® SemanticAnalysisProgressBar render:', { 
    progress,
    isActive: progress?.isActive,
    processedChunks: progress?.processedChunks,
    totalChunks: progress?.totalChunks
  });

  if (!progress || !progress.isActive) {
    console.log('üé® –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–∫—Ä—ã—Ç: progress =', progress);
    return null;
  }

  const percentage = progress.totalChunks > 0 
    ? Math.round((progress.processedChunks / progress.totalChunks) * 100)
    : 0

  const elapsedTime = Date.now() - progress.startTime
  const avgTimePerChunk = progress.processedChunks > 0 ? elapsedTime / progress.processedChunks : 0
  const remainingChunks = progress.totalChunks - progress.processedChunks
  const estimatedTimeRemaining = Math.round((remainingChunks * avgTimePerChunk) / 1000)

  const isGlobal = progress.type === SemanticUpdateType.GLOBAL

  console.log('üé® –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:', {
    percentage,
    isGlobal,
    processedChunks: progress.processedChunks,
    totalChunks: progress.totalChunks,
    estimatedTimeRemaining
  });

  return (
    <div style={{
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      height: '3px',
      backgroundColor: '#f1f5f9',
      borderRadius: '0 0 6px 6px',
      overflow: 'hidden'
    }}>
      <div style={{
        height: '100%',
        width: `${percentage}%`,
        backgroundColor: isGlobal ? '#ef4444' : '#3b82f6',
        transition: 'width 0.3s ease',
        position: 'relative'
      }}>
        <div style={{
          position: 'absolute',
          top: '-24px',
          right: '8px',
          fontSize: '11px',
          color: isGlobal ? '#dc2626' : '#1e40af',
          fontWeight: '600',
          backgroundColor: 'white',
          padding: '2px 6px',
          borderRadius: '4px',
          border: `1px solid ${isGlobal ? '#fecaca' : '#dbeafe'}`,
          whiteSpace: 'nowrap'
        }}>
          {isGlobal ? 'üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π' : 'üéØ –õ–æ–∫–∞–ª—å–Ω—ã–π'} –∞–Ω–∞–ª–∏–∑: {progress.processedChunks}/{progress.totalChunks}
          {estimatedTimeRemaining > 0 && ` ‚Ä¢ ~${estimatedTimeRemaining}—Å`}
        </div>
      </div>
    </div>
  )
}

function App() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const isTestMode = window.location.pathname === '/test-chunks' || window.location.search.includes('test=chunks');
  
  // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (isTestMode) {
    return <TestChunks />;
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ flex-–≤–µ—Å–æ–≤ –ø–∞–Ω–µ–ª–µ–π (–≤–º–µ—Å—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —à–∏—Ä–∏–Ω)
  const [panelFlexWeights, setPanelFlexWeights] = useState({
    editor: 1,
    cards: 1,
    semantic: 1
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
  const [collapsedPanels, setCollapsedPanels] = useState({
    editor: false,
    cards: false,
    semantic: false
  })

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ flex-–≤–µ—Å–∞ –ø–∞–Ω–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º
  const [savedPanelFlexWeights, setSavedPanelFlexWeights] = useState({
    editor: 1,
    cards: 1,
    semantic: 1
  })

  const { 
    document,
    loading, 
    error, 
    semanticProgress
  } = useDocumentStore()
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
  const enableRealtimeSemantic = useDocumentStore(state => state.ui.enableRealtimeSemantic)
  const toggleRealtimeSemantic = useDocumentStore(state => state.toggleRealtimeSemantic)
  const forceSemanticAnalysis = useDocumentStore(state => state.forceSemanticAnalysis)

  // –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è semanticProgress
  console.log('üéØ App render - semanticProgress —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    semanticProgress,
    hasProgress: !!semanticProgress,
    isActive: semanticProgress?.isActive,
    processedChunks: semanticProgress?.processedChunks,
    totalChunks: semanticProgress?.totalChunks
  });

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–Ω–µ–ª–µ–π
  const handleEditorResize = (delta: number) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—É—é –¥–µ–ª—å—Ç—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ flex-–≤–µ—Å–∞
    const containerWidth = window.innerWidth - (PANEL_COUNT - 1) * RESIZER_WIDTH
    const deltaRatio = delta / containerWidth * 2 // —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    setPanelFlexWeights(prev => ({
      ...prev,
      editor: Math.max(0.2, prev.editor + deltaRatio),
      cards: Math.max(0.2, prev.cards - deltaRatio)
    }))
  }

  const handleCardsResize = (delta: number) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—É—é –¥–µ–ª—å—Ç—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ flex-–≤–µ—Å–∞
    const containerWidth = window.innerWidth - (PANEL_COUNT - 1) * RESIZER_WIDTH
    const deltaRatio = delta / containerWidth * 2 // —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    setPanelFlexWeights(prev => ({
      ...prev,
      cards: Math.max(0.2, prev.cards + deltaRatio),
      semantic: Math.max(0.2, prev.semantic - deltaRatio)
    }))
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
  const togglePanel = (panelId: 'editor' | 'cards' | 'semantic') => {
    const isCurrentlyCollapsed = collapsedPanels[panelId]
    
    if (isCurrentlyCollapsed) {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π flex-–≤–µ—Å
      setSavedPanelFlexWeights(prev => ({
        ...prev,
        [panelId]: savedPanelFlexWeights[panelId]
      }))
      
      setPanelFlexWeights(prev => ({
        ...prev,
        [panelId]: savedPanelFlexWeights[panelId]
      }))
    } else {
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë —Ç–µ–∫—É—â–∏–π flex-–≤–µ—Å
      setSavedPanelFlexWeights(prev => ({
        ...prev,
        [panelId]: panelFlexWeights[panelId]
      }))
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    setCollapsedPanels(prev => ({
      ...prev,
      [panelId]: !prev[panelId]
    }))
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –ø–∞–Ω–µ–ª–∏
  const getPanelStyle = (panelKey: keyof typeof collapsedPanels) => {
    const isCollapsed = collapsedPanels[panelKey]
    
    const baseStyle = {
      display: 'flex',
      flexDirection: 'column' as const,
      transition: 'all 0.3s ease'
    }
    
    if (isCollapsed) {
      return {
        ...baseStyle,
        width: `${COLLAPSED_PANEL_WIDTH}px`,
        flex: 0,
        minWidth: `${COLLAPSED_PANEL_WIDTH}px`,
        maxWidth: `${COLLAPSED_PANEL_WIDTH}px`,
      }
    }
    
    // –î–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º flex-–≤–µ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return {
      ...baseStyle,
      flex: panelFlexWeights[panelKey],
      minWidth: '200px',
      width: 'auto'
    }
  }

  // –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (flex-–≤–µ—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
  useEffect(() => {
    const handleResize = () => {
      // –° flex-—Å–∏—Å—Ç–µ–º–æ–π –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      // Flex –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      console.log('üîÑ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω, flex-–≤–µ—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏')
    }

    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  if (loading && !document) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="app">
      {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ TestChunks –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      {isTestMode && <TestChunks />}
      <div style={{ 
        height: '100vh', 
        backgroundColor: '#f3f4f6',
        display: 'flex',
        flexDirection: 'column' 
      }}>
        {/* Global Header */}
        <header style={{
          backgroundColor: 'white',
          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
          borderBottom: '1px solid #e5e7eb',
          padding: '12px 24px',
          flexShrink: 0,
          position: 'relative'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              <h1 style={{ 
                fontSize: '1.25rem', 
                fontWeight: 600, 
                color: '#1f2937',
                margin: 0 
              }}>
                {document?.metadata.topic || '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞'}
              </h1>
              
              {/* –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
              {document && (
                <DocumentMetrics 
                  document={document}
                />
              )}
            </div>
            
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Real-time —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ */}
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                backgroundColor: '#f3f4f6',
                borderRadius: '8px',
                padding: '6px 12px',
                marginRight: '8px'
              }}>
                <span style={{ 
                  fontSize: '13px', 
                  color: '#4b5563',
                  fontWeight: '500',
                  whiteSpace: 'nowrap'
                }}>
                  Real-time –∞–Ω–∞–ª–∏–∑
                </span>
                <label style={{
                  position: 'relative',
                  display: 'inline-block',
                  width: '40px',
                  height: '22px',
                  cursor: 'pointer'
                }}>
                  <input
                    type="checkbox"
                    checked={enableRealtimeSemantic}
                    onChange={toggleRealtimeSemantic}
                    style={{
                      opacity: 0,
                      width: 0,
                      height: 0
                    }}
                  />
                  <span style={{
                    position: 'absolute',
                    cursor: 'pointer',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: enableRealtimeSemantic ? '#10b981' : '#d1d5db',
                    transition: '0.3s',
                    borderRadius: '22px'
                  }}>
                    <span style={{
                      position: 'absolute',
                      content: '',
                      height: '16px',
                      width: '16px',
                      left: enableRealtimeSemantic ? '21px' : '3px',
                      bottom: '3px',
                      backgroundColor: 'white',
                      transition: '0.3s',
                      borderRadius: '50%'
                    }}></span>
                  </span>
                </label>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ real-time –≤—ã–∫–ª—é—á–µ–Ω) */}
              {!enableRealtimeSemantic && document && (
                <button
                  onClick={() => {
                    forceSemanticAnalysis();
                    toast.success('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤', {
                      icon: 'üß†',
                      duration: 3000,
                    });
                  }}
                  style={{
                    padding: '6px 16px',
                    backgroundColor: '#3b82f6',
                    color: 'white',
                    border: 'none',
                    borderRadius: '6px',
                    fontSize: '13px',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    fontWeight: '500',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '6px',
                    marginRight: '16px'
                  }}
                  title="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤"
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#2563eb';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = '#3b82f6';
                  }}
                >
                  üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                </button>
              )}
              
              {error && (
                <div style={{ 
                  color: '#dc2626', 
                  fontSize: '0.875rem', 
                  maxWidth: '24rem',
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  whiteSpace: 'nowrap'
                }}>
                  –û—à–∏–±–∫–∞: {error}
                </div>
              )}
            </div>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ */}
          {semanticProgress && (
            <SemanticAnalysisProgressBar progress={semanticProgress} />
          )}
        </header>

        {/* Panels Container */}
        <div style={{
          flex: 1,
          display: 'flex',
          flexDirection: 'row',
          overflow: 'hidden',
          width: '100%',
          minHeight: 0,
          alignItems: 'stretch'
        }}>
          {/* Text Editor Panel */}
          <div style={getPanelStyle('editor')}>
            <TextEditorPanelV2 
              icon="üß©" 
              isExpanded={!collapsedPanels.editor}
              onToggleExpanded={() => togglePanel('editor')}
            />
          </div>

          {/* Resizer 1 - –º–µ–∂–¥—É editor –∏ cards */}
          {!collapsedPanels.editor && !collapsedPanels.cards && (
            <PanelResizer onResize={handleEditorResize} />
          )}

          {/* Cards Panel */}
          <div style={getPanelStyle('cards')}>
            <CardDeckPanelV2 
              icon="üÉè" 
              isExpanded={!collapsedPanels.cards}
              onToggleExpanded={() => togglePanel('cards')}
            />
          </div>

          {/* Resizer 2 - –º–µ–∂–¥—É cards –∏ semantic */}
          {!collapsedPanels.cards && !collapsedPanels.semantic && (
            <PanelResizer onResize={handleCardsResize} />
          )}

          {/* Semantic Map Panel */}
          <div style={getPanelStyle('semantic')}>
            <SemanticMapPanel 
              icon="üß†" 
              isExpanded={!collapsedPanels.semantic}
              onToggleExpanded={() => togglePanel('semantic')}
            />
          </div>
        </div>

        {/* Toast Notifications */}
        <Toaster 
          position="bottom-right"
          toastOptions={{
            duration: 4000,
            style: {
              fontSize: '14px',
            }
          }}
        />
      </div>
    </div>
  )
}

export default App 