import { useEffect, useState } from 'react'
import { Toaster } from 'react-hot-toast'
import { TextEditorPanel } from './components/panels/TextEditorPanel'
import { CardDeckPanel } from './components/panels/CardDeckPanel'
import { SemanticMapPanel } from './components/panels/SemanticMapPanel'
import { PanelResizer } from './components/panels/PanelResizer'
import { useAppStore } from './store/appStore'
import { fetchAnalysis } from './api'
import './App.css'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
const PANEL_COUNT = 3
const COLLAPSED_PANEL_WIDTH = 48
const RESIZER_WIDTH = 4

function App() {
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π
  const calculateInitialPanelWidth = () => {
    const viewportWidth = window.innerWidth
    const totalResizerWidth = (PANEL_COUNT - 1) * RESIZER_WIDTH
    const availableWidth = viewportWidth - totalResizerWidth
    const panelWidth = Math.floor(availableWidth / PANEL_COUNT)
    
    console.log('üîç –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –ø–∞–Ω–µ–ª–µ–π:', {
      viewportWidth,
      totalResizerWidth,
      availableWidth,
      panelWidth
    })
    
    return panelWidth
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ flex-–≤–µ—Å–æ–≤ –ø–∞–Ω–µ–ª–µ–π (–≤–º–µ—Å—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —à–∏—Ä–∏–Ω)
  const [panelFlexWeights, setPanelFlexWeights] = useState({
    editor: 1,
    cards: 1,
    semantic: 1
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
  const [collapsedPanels, setCollapsedPanels] = useState({
    editor: false,
    cards: false,
    semantic: false
  })

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ flex-–≤–µ—Å–∞ –ø–∞–Ω–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º
  const [savedPanelFlexWeights, setSavedPanelFlexWeights] = useState({
    editor: 1,
    cards: 1,
    semantic: 1
  })

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
  const expandedPanelsCount = Object.values(collapsedPanels).filter(collapsed => !collapsed).length
  const allPanelsExpanded = expandedPanelsCount === PANEL_COUNT

  const { 
    session, 
    loading, 
    error, 
    setSession, 
    setEditorFullText, 
    setEditorTopic, 
    setLoading, 
    setError 
  } = useAppStore()

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–Ω–µ–ª–µ–π
  const handleEditorResize = (delta: number) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—É—é –¥–µ–ª—å—Ç—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ flex-–≤–µ—Å–∞
    const containerWidth = window.innerWidth - (PANEL_COUNT - 1) * RESIZER_WIDTH
    const deltaRatio = delta / containerWidth * 2 // —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    setPanelFlexWeights(prev => ({
      ...prev,
      editor: Math.max(0.2, prev.editor + deltaRatio),
      cards: Math.max(0.2, prev.cards - deltaRatio)
    }))
  }

  const handleCardsResize = (delta: number) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—É—é –¥–µ–ª—å—Ç—É –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ flex-–≤–µ—Å–∞
    const containerWidth = window.innerWidth - (PANEL_COUNT - 1) * RESIZER_WIDTH
    const deltaRatio = delta / containerWidth * 2 // —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    setPanelFlexWeights(prev => ({
      ...prev,
      cards: Math.max(0.2, prev.cards + deltaRatio),
      semantic: Math.max(0.2, prev.semantic - deltaRatio)
    }))
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
  const togglePanel = (panelId: 'editor' | 'cards' | 'semantic') => {
    const isCurrentlyCollapsed = collapsedPanels[panelId]
    
    if (isCurrentlyCollapsed) {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π flex-–≤–µ—Å
      setSavedPanelFlexWeights(prev => ({
        ...prev,
        [panelId]: savedPanelFlexWeights[panelId]
      }))
      
      setPanelFlexWeights(prev => ({
        ...prev,
        [panelId]: savedPanelFlexWeights[panelId]
      }))
    } else {
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë —Ç–µ–∫—É—â–∏–π flex-–≤–µ—Å
      setSavedPanelFlexWeights(prev => ({
        ...prev,
        [panelId]: panelFlexWeights[panelId]
      }))
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    setCollapsedPanels(prev => ({
      ...prev,
      [panelId]: !prev[panelId]
    }))
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –ø–∞–Ω–µ–ª–∏
  const getPanelStyle = (panelKey: keyof typeof collapsedPanels) => {
    const isCollapsed = collapsedPanels[panelKey]
    
    const baseStyle = {
      display: 'flex',
      flexDirection: 'column' as const,
      transition: 'all 0.3s ease'
    }
    
    if (isCollapsed) {
      return {
        ...baseStyle,
        width: `${COLLAPSED_PANEL_WIDTH}px`,
        flex: 0,
        minWidth: `${COLLAPSED_PANEL_WIDTH}px`,
        maxWidth: `${COLLAPSED_PANEL_WIDTH}px`,
      }
    }
    
    // –î–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º flex-–≤–µ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return {
      ...baseStyle,
      flex: panelFlexWeights[panelKey],
      minWidth: '200px',
      width: 'auto'
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ URL
  useEffect(() => {
    const params = new URLSearchParams(window.location.search)
    const sessionIdFromUrl = params.get('session_id')
    
    if (sessionIdFromUrl) {
      console.log('üîç –ù–∞–π–¥–µ–Ω session_id –≤ URL:', sessionIdFromUrl)
      const loadSession = async () => {
        try {
          setLoading(true)
          setError(null)
          console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ API...')
          const loadedSession = await fetchAnalysis(sessionIdFromUrl)
          
          setSession(loadedSession)
          setEditorFullText(loadedSession.paragraphs.map(p => p.text).join('\n\n'))
          setEditorTopic(loadedSession.metadata.topic || '')
          setLoading(false)
          
          document.title = loadedSession.metadata.topic || "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
          console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', err)
          setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏')
          setLoading(false)
          
          // –û—á–∏—â–∞–µ–º URL –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ session_id
          window.history.replaceState({}, document.title, window.location.pathname)
          console.log('üßπ URL –æ—á–∏—â–µ–Ω –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ session_id')
        }
      }
      
      loadSession()
    } else {
      console.log('‚ÑπÔ∏è session_id –≤ URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è')
    }
  }, [setSession, setEditorFullText, setEditorTopic, setLoading, setError])

  // –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (flex-–≤–µ—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
  useEffect(() => {
    const handleResize = () => {
      // –° flex-—Å–∏—Å—Ç–µ–º–æ–π –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      // Flex –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –Ω–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      console.log('üîÑ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω, flex-–≤–µ—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏')
    }

    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  if (loading && !session) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <div style={{ 
      height: '100vh', 
      backgroundColor: '#f3f4f6',
      display: 'flex',
      flexDirection: 'column' 
    }}>
      {/* Global Header */}
      <header style={{
        backgroundColor: 'white',
        boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
        borderBottom: '1px solid #e5e7eb',
        padding: '12px 24px',
        flexShrink: 0
      }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            <h1 style={{ 
              fontSize: '1.25rem', 
              fontWeight: 600, 
              color: '#1f2937',
              margin: 0 
            }}>
              {session?.metadata.topic || '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞'}
            </h1>
            {session && (
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px', fontSize: '0.875rem', color: '#6b7280' }}>
                <span style={{ 
                  padding: '2px 8px', 
                  backgroundColor: '#f3f4f6', 
                  borderRadius: '4px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px'
                }}>
                  üìÑ {session.paragraphs.length} –∞–±–∑.
                </span>
                <span style={{ 
                  padding: '2px 8px', 
                  backgroundColor: '#f0f9ff', 
                  borderRadius: '4px',
                  color: '#0369a1',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px'
                }}>
                  üìä –°–∏–≥–Ω–∞–ª: {(
                    session.paragraphs.reduce((sum, p) => sum + (p.metrics.signal_strength || 0), 0) / 
                    session.paragraphs.length
                  ).toFixed(2)}
                </span>
                <span style={{ 
                  padding: '2px 8px', 
                  backgroundColor: '#fef3f2', 
                  borderRadius: '4px',
                  color: '#dc2626',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px'
                }}>
                  üß© –°–ª–æ–∂–Ω–æ—Å—Ç—å: {(
                    session.paragraphs.reduce((sum, p) => sum + (p.metrics.complexity || 0), 0) / 
                    session.paragraphs.length
                  ).toFixed(2)}
                </span>
                <span style={{ 
                  padding: '2px 8px', 
                  backgroundColor: '#f0fdf4', 
                  borderRadius: '4px',
                  color: '#16a34a'
                }}>
                  ID: {session.metadata.session_id.slice(0, 8)}...
                </span>
              </div>
            )}
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            {error && (
              <div style={{ 
                color: '#dc2626', 
                fontSize: '0.875rem', 
                maxWidth: '24rem',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                whiteSpace: 'nowrap'
              }}>
                –û—à–∏–±–∫–∞: {error}
              </div>
            )}
            <button
              onClick={() => {
                setSession(null)
                setEditorFullText('')
                setEditorTopic('')
                setError(null)
                document.title = "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞"
                window.history.pushState({}, document.title, window.location.pathname)
              }}
              style={{
                padding: '4px 12px',
                fontSize: '0.875rem',
                backgroundColor: '#f3f4f6',
                color: '#374151',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                transition: 'background-color 0.2s'
              }}
              onMouseEnter={e => e.currentTarget.style.backgroundColor = '#e5e7eb'}
              onMouseLeave={e => e.currentTarget.style.backgroundColor = '#f3f4f6'}
            >
              üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            </button>
            {error && (
              <button
                onClick={() => {
                  setError(null)
                  window.history.replaceState({}, document.title, window.location.pathname)
                }}
                style={{
                  padding: '4px 12px',
                  fontSize: '0.875rem',
                  backgroundColor: '#fef2f2',
                  color: '#dc2626',
                  border: '1px solid #fecaca',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={e => e.currentTarget.style.backgroundColor = '#fee2e2'}
                onMouseLeave={e => e.currentTarget.style.backgroundColor = '#fef2f2'}
                title="–û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –∏ URL"
              >
                ‚ùå –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
              </button>
            )}
          </div>
        </div>
      </header>

      {/* Panels Container */}
      <div style={{
        flex: 1,
        display: 'flex',
        flexDirection: 'row',
        overflow: 'hidden',
        width: '100%',
        minHeight: 0,
        alignItems: 'stretch'
      }}>
        {/* Text Editor Panel */}
        <div style={getPanelStyle('editor')}>
          <TextEditorPanel 
            icon="‚úçÔ∏è" 
            isExpanded={!collapsedPanels.editor}
            onToggleExpanded={() => togglePanel('editor')}
          />
        </div>

        {/* Resizer 1 - –º–µ–∂–¥—É editor –∏ cards */}
        {!collapsedPanels.editor && !collapsedPanels.cards && (
          <PanelResizer onResize={handleEditorResize} />
        )}

        {/* Cards Panel */}
        <div style={getPanelStyle('cards')}>
          <CardDeckPanel 
            icon="üÉè" 
            isExpanded={!collapsedPanels.cards}
            onToggleExpanded={() => togglePanel('cards')}
          />
        </div>

        {/* Resizer 2 - –º–µ–∂–¥—É cards –∏ semantic */}
        {!collapsedPanels.cards && !collapsedPanels.semantic && (
          <PanelResizer onResize={handleCardsResize} />
        )}

        {/* Semantic Map Panel */}
        <div style={getPanelStyle('semantic')}>
          <SemanticMapPanel 
            icon="üß†" 
            isExpanded={!collapsedPanels.semantic}
            onToggleExpanded={() => togglePanel('semantic')}
          />
        </div>
      </div>

      {/* Toast Notifications */}
      <Toaster 
        position="bottom-right"
        toastOptions={{
          duration: 4000,
          style: {
            fontSize: '14px',
          }
        }}
      />
    </div>
  )
}

export default App 