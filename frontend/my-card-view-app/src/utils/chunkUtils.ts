// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞–Ω–∫–∞–º–∏

import { v4 as uuidv4 } from 'uuid';
import type { 
  Chunk, 
  DocumentState, 
  ChangeInfo, 
  ChunkMetrics
} from '../types/chunks';
import { SemanticUpdateType } from '../types/chunks';
import { DEFAULT_CHUNK_METRICS, CHUNK_SEPARATOR_REGEX } from '../types/chunks';

/**
 * –°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
 */
export function createChunksFromText(text: string): Chunk[] {
  console.log('üö®üö®üö® –§–£–ù–ö–¶–ò–Ø createChunksFromText –í–´–ó–í–ê–ù–ê! üö®üö®üö®');
  console.log('üìè –î–ª–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:', text.length);
  console.log('üìù –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', JSON.stringify(text));
  
  if (!text.trim()) {
    console.log('‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    return [];
  }

  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞:', CHUNK_SEPARATOR_REGEX.source);

  // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  console.log('üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ñ–î–û–ì–û –°–ò–ú–í–û–õ–ê:');
  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    const code = char.charCodeAt(0);
    const name = code === 10 ? 'LF' : code === 13 ? 'CR' : code === 32 ? 'SPACE' : char;
    console.log(`  [${i}]: "${char}" ‚Üí –∫–æ–¥ ${code} (${name})`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—É–ª—è—Ä–∫—É –Ω–∞ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–µ
  const separatorRegex = new RegExp(CHUNK_SEPARATOR_REGEX.source, 'g');
  console.log('üîß –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞:', separatorRegex);
  
  // –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  const separatorMatches = Array.from(text.matchAll(new RegExp(CHUNK_SEPARATOR_REGEX.source, 'g')));
  
  console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–≤—Å–µ–≥–æ:', separatorMatches.length, '):');
  if (separatorMatches.length === 0) {
    console.log('  ‚úÖ –ù–ï–¢ –†–ê–ó–î–ï–õ–ò–¢–ï–õ–ï–ô - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω 1 —á–∞–Ω–∫');
  } else {
    separatorMatches.forEach((match, i) => {
      const separatorStart = match.index!;
      const separatorEnd = separatorStart + match[0].length;
      console.log(`  ‚úÖ –ù–ê–ô–î–ï–ù —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ${i + 1}: –ø–æ–∑–∏—Ü–∏—è ${separatorStart}-${separatorEnd}, —Ç–µ–∫—Å—Ç: ${JSON.stringify(match[0])}`);
    });
    console.log(`  üìä –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ ${separatorMatches.length + 1} —á–∞–Ω–∫–æ–≤`);
  }

  const chunks: Chunk[] = [];
  
  let currentStart = 0;

  // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
  for (let i = 0; i <= separatorMatches.length; i++) {
    let chunkEnd: number;
    let nextChunkStart: number;
    
    if (i < separatorMatches.length) {
      // –¢–µ–∫—É—â–∏–π —á–∞–Ω–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –î–û —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–∏—Å–∫–ª—é—á–∞—è \n\n)
      const separatorStart = separatorMatches[i].index!;
      const separatorLength = separatorMatches[i][0].length;
      chunkEnd = separatorStart; // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –î–û —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
      nextChunkStart = separatorStart + separatorLength; // –°–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    } else {
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ - –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
      chunkEnd = text.length;
      nextChunkStart = text.length; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞
    }
    
    const chunkText = text.slice(currentStart, chunkEnd);
    
    // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (chunkText.trim().length > 0) {
      chunks.push({
        id: uuidv4(),
        start: currentStart,
        end: chunkEnd,
        metrics: { ...DEFAULT_CHUNK_METRICS }
      });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ ${chunks.length}: [${currentStart}-${chunkEnd-1}], —Ç–µ–∫—Å—Ç: ${JSON.stringify(chunkText.slice(0, 50))}`);
    }

    // –°–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ)
    currentStart = i < separatorMatches.length ? nextChunkStart : text.length;
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤`);
  
  return chunks;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
 */
export function updateChunkPositions(
  chunks: Chunk[],
  change: ChangeInfo
): Chunk[] {
  const { start: changeStart, end: changeEnd, newText } = change;
  const delta = newText.length - (changeEnd - changeStart);

  console.log('üìç updateChunkPositions –í–´–ó–í–ê–ù–ê —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
    chunksCount: chunks.length,
    changeStart,
    changeEnd,
    delta,
    newTextLength: newText.length,
    oldTextLength: changeEnd - changeStart,
    newText: JSON.stringify(newText),
    oldText: JSON.stringify(change.oldText)
  });

  const result = chunks.map((chunk, index) => {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${index + 1} [${chunk.start}-${chunk.end-1}]:`, {
      chunkId: chunk.id.slice(0,8),
      chunkStart: chunk.start,
      chunkEnd: chunk.end,
      changeStart,
      changeEnd,
      condition: chunk.end <= changeStart ? '–¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è' :
                chunk.start >= changeEnd ? '–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è' :
                '–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º'
    });

    if (chunk.end <= changeStart) {
      // –ß–∞–Ω–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
      console.log(`  ‚úÖ –ß–∞–Ω–∫ ${index + 1} –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º`);
      return chunk;
    } else if (chunk.start >= changeEnd) {
      // –ß–∞–Ω–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Å–¥–≤–∏–≥–∞–µ–º
      const newStart = chunk.start + delta;
      const newEnd = chunk.end + delta;
      console.log(`  ‚ÜóÔ∏è –ß–∞–Ω–∫ ${index + 1} –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ ${delta}: [${chunk.start}-${chunk.end-1}] ‚Üí [${newStart}-${newEnd-1}]`);
      return {
        ...chunk,
        start: newStart,
        end: newEnd,
        metrics: {
          ...chunk.metrics,
          isStale: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }
      };
    } else {
      // –ß–∞–Ω–∫ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
      console.log(`  üîÑ –ß–∞–Ω–∫ ${index + 1} –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º`);
      
      // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ —á–∞–Ω–∫–∞ (–≤—Å—Ç–∞–≤–∫–∞)
      if (changeStart === chunk.end && changeEnd === changeStart) {
        // –≠—Ç–æ –≤—Å—Ç–∞–≤–∫–∞ –≤ –∫–æ–Ω—Ü–µ —á–∞–Ω–∫–∞ - —Ä–∞—Å—à–∏—Ä—è–µ–º —á–∞–Ω–∫
        const newEnd = chunk.end + delta;
        console.log(`  üìù –†–∞—Å—à–∏—Ä—è–µ–º —á–∞–Ω–∫ ${index + 1} —Å ${chunk.end} –¥–æ ${newEnd} (–≤—Å—Ç–∞–≤–∫–∞ –≤ –∫–æ–Ω—Ü–µ)`);
        return {
          ...chunk,
          end: newEnd,
          metrics: {
            ...chunk.metrics,
            isStale: true
          }
        };
      } else {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —á–∞–Ω–∫–∞ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        console.log(`  ‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —á–∞–Ω–∫–∞ ${index + 1} - —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º end –ø–æ–∑–∏—Ü–∏—é —á–∞–Ω–∫–∞ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏
        let newEnd = chunk.end;
        if (changeEnd <= chunk.end) {
          // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ —á–∞–Ω–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º end
          newEnd = chunk.end + delta;
          console.log(`  üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º end –ø–æ–∑–∏—Ü–∏—é —á–∞–Ω–∫–∞ ${index + 1}: ${chunk.end} ‚Üí ${newEnd} (delta: ${delta})`);
        }
        
        return {
          ...chunk,
          end: newEnd,
          metrics: {
            ...chunk.metrics,
            isStale: true
          }
        };
      }
    }
  }).filter((chunk, index) => {
    // –£–¥–∞–ª—è–µ–º —á–∞–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ø–∞–ª–∏ –≤ –æ–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const shouldRemove = chunk.start >= changeStart && chunk.end <= changeEnd;
    if (shouldRemove) {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–∞–Ω–∫ ${index + 1} [${chunk.start}-${chunk.end-1}] - –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è`);
    }
    return !shouldRemove;
  });

  console.log('üìä updateChunkPositions –†–ï–ó–£–õ–¨–¢–ê–¢:', {
    oldChunksCount: chunks.length,
    newChunksCount: result.length,
    resultChunks: result.map((c, i) => ({
      index: i + 1,
      id: c.id.slice(0,8),
      start: c.start,
      end: c.end,
      isStale: c.metrics.isStale
    }))
  });

  return result;
}

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —á–∞–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è ID –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
 */
export function recalculateAllChunks(
  newText: string, 
  oldChunks: Chunk[] = []
): Chunk[] {
  const newChunks = createChunksFromText(newText);
  
  console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç —á–∞–Ω–∫–æ–≤:', {
    oldChunksCount: oldChunks.length,
    newChunksCount: newChunks.length
  });
  
  // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ –ø–æ–∑–∏—Ü–∏—è–º
  const usedOldChunkIds = new Set<string>(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ ID
  
  return newChunks.map((newChunk, index) => {
    const chunkText = newText.slice(newChunk.start, newChunk.end);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∞–Ω–∫ —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º
    if (oldChunks[index] && !usedOldChunkIds.has(oldChunks[index].id)) {
      const oldChunkText = oldChunks[index] ? 
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        (oldChunks[index].start !== undefined && oldChunks[index].end !== undefined) ? 
          newText.slice(oldChunks[index].start, oldChunks[index].end) : 
          chunkText
        : chunkText;
      
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
      if (chunkText.trim() === oldChunkText.trim() || 
          chunkText.includes(oldChunkText.trim()) || 
          oldChunkText.includes(chunkText.trim())) {
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞–Ω–∫–∞ ${index + 1}: ${oldChunks[index].id.slice(0, 8)}`);
        usedOldChunkIds.add(oldChunks[index].id);
        return {
          ...newChunk,
          id: oldChunks[index].id,
          metrics: {
            ...oldChunks[index].metrics,
            isStale: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          }
        };
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ä–µ–¥–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ä–æ–º—É —Ç–µ–∫—Å—Ç—É
    // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è ID
    /*
    const matchingOldChunk = oldChunks.find(oldChunk => {
      if (usedOldChunkIds.has(oldChunk.id)) {
        return false; // –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
      }
      
      // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤—ã–º/–ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–ª–æ–≤–∞–º
      const currentWords = chunkText.trim().split(/\s+/);
      const oldChunkTextApprox = chunkText; // –£–ø—Ä–æ—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ä–æ–º—É —Ç–µ–∫—Å—Ç—É
      const oldWords = oldChunkTextApprox.trim().split(/\s+/);
      
      if (currentWords.length < 3 || oldWords.length < 3) {
        return false; // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–≤
      return currentWords[0] === oldWords[0] && 
             currentWords[currentWords.length - 1] === oldWords[oldWords.length - 1];
    });

    if (matchingOldChunk) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —á–∞–Ω–∫ –¥–ª—è ${index + 1}: ${matchingOldChunk.id.slice(0, 8)}`);
      usedOldChunkIds.add(matchingOldChunk.id);
      return {
        ...newChunk,
        id: matchingOldChunk.id,
        metrics: {
          ...matchingOldChunk.metrics,
          isStale: true
        }
      };
    }
    */

    console.log(`üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ ${index + 1}: ${newChunk.id.slice(0, 8)}`);
    return newChunk;
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
export function getChunkText(document: DocumentState, chunkId: string): string {
  const chunk = document.chunks.find(c => c.id === chunkId);
  if (!chunk) return '';
  
  return document.text.slice(chunk.start, chunk.end);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —á–∞–Ω–∫–æ–≤
 */
export function getAllChunkTexts(document: DocumentState): Array<{id: string, text: string}> {
  return document.chunks.map(chunk => ({
    id: chunk.id,
    text: document.text.slice(chunk.start, chunk.end)
  }));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏ (–ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)
 */
export function shouldCreateNewChunks(
  text: string,
  change: ChangeInfo
): boolean {
  console.log('ü§î shouldCreateNewChunks –í–´–ó–í–ê–ù–ê —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
    textLength: text.length,
    changeStart: change.start,
    changeEnd: change.end,
    oldText: JSON.stringify(change.oldText),
    newText: JSON.stringify(change.newText)
  });

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  const hasLineSeparators = (text: string): boolean => {
    return new RegExp(CHUNK_SEPARATOR_REGEX.source).test(text);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  const countSeparators = (text: string): number => {
    const matches = text.match(new RegExp(CHUNK_SEPARATOR_REGEX.source, 'g'));
    return matches ? matches.length : 0;
  };
  
  // 1. –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
  if (hasLineSeparators(change.newText)) {
    console.log('‚úÖ –†–ï–®–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –¥–æ–±–∞–≤–ª—è–µ–º–æ–º —Ç–µ–∫—Å—Ç–µ - –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú —á–∞–Ω–∫–∏');
    return true;
  }

  // 2. –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å  
  if (change.oldText && hasLineSeparators(change.oldText)) {
    console.log('‚úÖ –†–ï–®–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —É–¥–∞–ª—è–µ–º–æ–º —Ç–µ–∫—Å—Ç–µ - –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú —á–∞–Ω–∫–∏');
    return true;
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –º–æ–∂–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç—å—Å—è/–∏—Å—á–µ–∑–Ω—É—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  const contextBefore = text.slice(Math.max(0, change.start - 5), change.start);
  const contextAfter = text.slice(change.end, Math.min(text.length, change.end + 5));
  const fullContext = contextBefore + change.newText + contextAfter;
  
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
    contextBefore: JSON.stringify(contextBefore),
    newText: JSON.stringify(change.newText),
    contextAfter: JSON.stringify(contextAfter),
    fullContext: JSON.stringify(fullContext)
  });

  // 4. –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–æ –∏ –ø–æ—Å–ª–µ
  const separatorsInNewText = countSeparators(text);
  
  // –í–æ—Å—Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  const oldText = text.slice(0, change.start) + change.oldText + text.slice(change.end);
  const separatorsInOldText = countSeparators(oldText);
  
  console.log('üî¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π:', {
    oldText: JSON.stringify(oldText),
    newText: JSON.stringify(text),
    separatorsInOldText,
    separatorsInNewText,
    difference: separatorsInNewText - separatorsInOldText
  });

  if (separatorsInOldText !== separatorsInNewText) {
    console.log('‚úÖ –†–ï–®–ï–ù–ò–ï: –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π - –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú —á–∞–Ω–∫–∏');
    return true;
  }

  // 5. –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
  if (hasLineSeparators(fullContext)) {
    console.log('‚úÖ –†–ï–®–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú —á–∞–Ω–∫–∏');
    return true;
  }

  console.log('‚ùå –†–ï–®–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –û–ë–ù–û–í–õ–Ø–ï–ú —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏');
  return false;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —á–∞–Ω–∫–∞
 */
export function updateChunkMetrics(
  chunks: Chunk[],
  chunkId: string,
  metrics: Partial<ChunkMetrics>
): Chunk[] {
  return chunks.map(chunk => 
    chunk.id === chunkId 
      ? {
          ...chunk,
          metrics: {
            ...chunk.metrics,
            ...metrics,
            lastUpdated: Date.now(),
            isStale: false,
            isUpdating: false
          }
        }
      : chunk
  );
}

/**
 * –ü–æ–º–µ—á–∞–µ—Ç —á–∞–Ω–∫ –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è—é—â–∏–π—Å—è
 */
export function markChunkAsUpdating(
  chunks: Chunk[],
  chunkId: string
): Chunk[] {
  return chunks.map(chunk =>
    chunk.id === chunkId
      ? {
          ...chunk,
          metrics: {
            ...chunk.metrics,
            isUpdating: true
          }
        }
      : chunk
  );
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–∞–Ω–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
 */
export function getStaleChunks(chunks: Chunk[]): Chunk[] {
  return chunks.filter(chunk => chunk.metrics.isStale && !chunk.metrics.isUpdating);
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π —á–∞–Ω–∫–æ–≤
 */
export function validateChunkPositions(
  chunks: Chunk[],
  textLength: number
): boolean {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤:', { chunksCount: chunks.length, textLength });
  
  for (let i = 0; i < chunks.length; i++) {
    const chunk = chunks[i];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    if (chunk.start < 0 || chunk.end > textLength || chunk.start >= chunk.end) {
      console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —á–∞–Ω–∫–∞ ${chunk.id.slice(0, 8)}: start=${chunk.start}, end=${chunk.end}, textLength=${textLength}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —á–∞–Ω–∫–∞–º–∏
    for (let j = i + 1; j < chunks.length; j++) {
      const otherChunk = chunks[j];
      if (!(chunk.end <= otherChunk.start || otherChunk.end <= chunk.start)) {
        console.error(`‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ ${chunk.id.slice(0, 8)} (${chunk.start}-${chunk.end-1}) –∏ ${otherChunk.id.slice(0, 8)} (${otherChunk.start}-${otherChunk.end-1})`);
        return false;
      }
    }
    
    console.log(`‚úÖ –ß–∞–Ω–∫ ${i + 1}: ${chunk.id.slice(0, 8)} (${chunk.start}-${chunk.end-1}) - OK`);
  }
  
  console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
  return true;
}

/**
 * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —á–∞–Ω–∫ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–¥–ª—è drag & drop)
 */
export function moveChunk(
  document: DocumentState,
  sourceChunkId: string,
  targetPosition: number
): DocumentState {
  const sourceChunk = document.chunks.find(c => c.id === sourceChunkId);
  if (!sourceChunk) {
    throw new Error(`–ß–∞–Ω–∫ ${sourceChunkId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —á–∞–Ω–∫–∞
  const chunkText = document.text.slice(sourceChunk.start, sourceChunk.end);
  
  // 2. –£–¥–∞–ª—è–µ–º —á–∞–Ω–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
  const textWithoutSource = 
    document.text.slice(0, sourceChunk.start) + 
    document.text.slice(sourceChunk.end);
  
  // 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
  let adjustedTargetPosition = targetPosition;
  if (targetPosition > sourceChunk.start) {
    adjustedTargetPosition -= (sourceChunk.end - sourceChunk.start);
  }
  
  // 4. –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
  const newText = 
    textWithoutSource.slice(0, adjustedTargetPosition) + 
    chunkText + 
    textWithoutSource.slice(adjustedTargetPosition);
  
  // 5. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
  const newChunks = recalculateAllChunks(newText, document.chunks);
  
  return {
    ...document,
    text: newText,
    chunks: newChunks,
    version: document.version + 1,
    metadata: {
      ...document.metadata,
      last_modified: new Date().toISOString()
    }
  };
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —á–∞–Ω–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
 */
export function findChunkAtPosition(
  chunks: Chunk[],
  position: number
): Chunk | null {
  return chunks.find(chunk => 
    position >= chunk.start && position <= chunk.end
  ) || null;
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∞–Ω–∫–∞ –≤ –æ–¥–∏–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
export function mergeAdjacentChunks(
  document: DocumentState,
  sourceChunkId: string
): DocumentState {
  const sourceIndex = document.chunks.findIndex(c => c.id === sourceChunkId);
  
  if (sourceIndex === -1 || sourceIndex >= document.chunks.length - 1) {
    throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —á–∞–Ω–∫ –¥–ª—è —Å–ª–∏—è–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫');
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —á–∞–Ω–∫–∏
  const currentChunk = document.chunks[sourceIndex];
  const nextChunk = document.chunks[sourceIndex + 1];

  console.log('üîó –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–∏—è–Ω–∏–µ —á–∞–Ω–∫–æ–≤:', {
    current: currentChunk.id.slice(0, 8),
    next: nextChunk.id.slice(0, 8),
    currentRange: `${currentChunk.start}-${currentChunk.end}`,
    nextRange: `${nextChunk.start}-${nextChunk.end}`
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã —á–∞–Ω–∫–æ–≤
  const currentText = document.text.slice(currentChunk.start, currentChunk.end);
  const nextText = document.text.slice(nextChunk.start, nextChunk.end);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ (–æ–±—ã—á–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å \n\n)
  const betweenText = document.text.slice(currentChunk.end, nextChunk.start);
  
  console.log('üìù –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–ª–∏—è–Ω–∏—è:', {
    currentText: currentText.slice(0, 50) + '...',
    betweenText: JSON.stringify(betweenText),
    nextText: nextText.slice(0, 50) + '...'
  });

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏)
  const mergedText = currentText + ' ' + nextText; // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const beforeMerged = document.text.slice(0, currentChunk.start);
  const afterMerged = document.text.slice(nextChunk.end);
  const newDocumentText = beforeMerged + mergedText + afterMerged;

  console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è:', {
    oldLength: document.text.length,
    newLength: newDocumentText.length,
    preview: newDocumentText.slice(0, 100) + '...'
  });

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
  const newChunks = recalculateAllChunks(newDocumentText);

  if (newChunks.length === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏ –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è');
  }

  return {
    ...document,
    text: newDocumentText,
    chunks: newChunks,
    version: document.version + 1,
    metadata: {
      ...document.metadata,
      last_modified: new Date().toISOString()
    }
  };
}

/**
 * –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞–Ω–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –∏–∑–º–µ–Ω—è—è —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function reorderChunksInDocument(
  document: DocumentState,
  oldIndex: number,
  newIndex: number
): DocumentState {
  if (oldIndex === newIndex || oldIndex < 0 || newIndex < 0 || 
      oldIndex >= document.chunks.length || newIndex >= document.chunks.length) {
    return document;
  }

  console.log('üîÑ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞–Ω–∫–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:', { oldIndex, newIndex });

  try {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    const sortedChunks = [...document.chunks].sort((a, b) => a.start - b.start);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
    if (oldIndex >= sortedChunks.length || newIndex >= sortedChunks.length) {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏');
      return document;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const chunkTexts = sortedChunks.map(chunk => {
      const text = document.text.slice(chunk.start, chunk.end);
      console.log(`üìù –ß–∞–Ω–∫ ${sortedChunks.indexOf(chunk)}: "${text.slice(0, 30)}..."`);
      return text.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (chunkTexts.some(text => text === '')) {
      console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏');
    }

    // –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
    const [movedText] = chunkTexts.splice(oldIndex, 1);
    chunkTexts.splice(newIndex, 0, movedText);

    console.log('üîÑ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤:', {
      movedText: movedText.slice(0, 30) + '...',
      from: oldIndex,
      to: newIndex
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –æ–±—ä–µ–¥–∏–Ω—è—è —á–∞–Ω–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    const SEPARATOR = '\n\n'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const newText = chunkTexts.filter(text => text.length > 0).join(SEPARATOR);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if (!newText.trim()) {
      console.error('‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏');
      return document;
    }

    console.log('üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏:', {
      oldLength: document.text.length,
      newLength: newText.length,
      preview: newText.slice(0, 100) + '...'
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const newChunks = recalculateAllChunks(newText);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (newChunks.length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
      return document;
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤:', newChunks.length);

    return {
      ...document,
      text: newText,
      chunks: newChunks,
      version: document.version + 1,
      metadata: {
        ...document.metadata,
        last_modified: new Date().toISOString()
      }
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞–Ω–∫–æ–≤:', error);
    return document; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∞–Ω–∫–∞ –ø–æ –∏—Ö ID (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Å–µ–¥–Ω–∏–µ)
 */
export function mergeTwoChunks(
  document: DocumentState,
  sourceChunkId: string,
  targetChunkId: string
): DocumentState {
  const sourceChunk = document.chunks.find(c => c.id === sourceChunkId);
  const targetChunk = document.chunks.find(c => c.id === targetChunkId);
  
  if (!sourceChunk || !targetChunk) {
    throw new Error('–û–¥–∏–Ω –∏–∑ —á–∞–Ω–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —á–∞–Ω–∫ –ø–µ—Ä–≤—ã–π, –∞ –∫–∞–∫–æ–π –≤—Ç–æ—Ä–æ–π –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
  const firstChunk = sourceChunk.start < targetChunk.start ? sourceChunk : targetChunk;
  const secondChunk = sourceChunk.start < targetChunk.start ? targetChunk : sourceChunk;

  console.log('üîó –°–ª–∏—è–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤:', {
    source: { id: sourceChunk.id.slice(0, 8), range: `${sourceChunk.start}-${sourceChunk.end}` },
    target: { id: targetChunk.id.slice(0, 8), range: `${targetChunk.start}-${targetChunk.end}` },
    first: { id: firstChunk.id.slice(0, 8), range: `${firstChunk.start}-${firstChunk.end}` },
    second: { id: secondChunk.id.slice(0, 8), range: `${secondChunk.start}-${secondChunk.end}` }
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã —á–∞–Ω–∫–æ–≤
  const firstChunkText = document.text.slice(firstChunk.start, firstChunk.end);
  const secondChunkText = document.text.slice(secondChunk.start, secondChunk.end);

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
  const intermediateText = document.text.slice(firstChunk.end, secondChunk.start);
  
  console.log('üìù –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–ª–∏—è–Ω–∏—è:', {
    firstText: firstChunkText.slice(0, 50) + '...',
    intermediateText: JSON.stringify(intermediateText),
    secondText: secondChunkText.slice(0, 50) + '...'
  });

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª
  const mergedText = intermediateText.trim() 
    ? firstChunkText + intermediateText + secondChunkText
    : firstChunkText + ' ' + secondChunkText;

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const beforeFirst = document.text.slice(0, firstChunk.start);
  const afterSecond = document.text.slice(secondChunk.end);
  const newDocumentText = beforeFirst + mergedText + afterSecond;

  console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤:', {
    oldLength: document.text.length,
    newLength: newDocumentText.length,
    preview: newDocumentText.slice(0, 100) + '...'
  });

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
  const newChunks = recalculateAllChunks(newDocumentText);

  if (newChunks.length === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏ –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è');
  }

  return {
    ...document,
    text: newDocumentText,
    chunks: newChunks,
    version: document.version + 1,
    metadata: {
      ...document.metadata,
      last_modified: new Date().toISOString()
    }
  };
}

/**
 * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export function classifySemanticUpdate(
  changeInfo?: ChangeInfo, 
  affectedChunks?: Chunk[]
): SemanticUpdateType {
  // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ - —Å—á–∏—Ç–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º
  if (!changeInfo) {
    console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–µ—Ç changeInfo (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)');
    return SemanticUpdateType.GLOBAL;
  }

  console.log('üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
    newText: JSON.stringify(changeInfo.newText),
    oldText: JSON.stringify(changeInfo.oldText),
    newTextLength: changeInfo.newText.length,
    oldTextLength: changeInfo.oldText?.length || 0,
    start: changeInfo.start,
    end: changeInfo.end
  });

  // 1. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–±–∑–∞—Ü–µ–≤
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –Ω–æ–≤—ã–µ –∞–±–∑–∞—Ü—ã
  const createsNewParagraph = changeInfo.newText.includes('\n\n');
  const removesNewlines = changeInfo.oldText?.includes('\n\n') || false;
  
  if (createsNewParagraph || removesNewlines) {
    console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –∞–±–∑–∞—Ü–µ–≤');
    return SemanticUpdateType.GLOBAL;
  }

  // 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –≤—Å—Ç–∞–≤–∫–∏ (–±–æ–ª—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
  // –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –±–æ–ª—å—à–∏—Ö –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞
  if (changeInfo.newText.length > 1000) {
    console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (>1000 —Å–∏–º–≤–æ–ª–æ–≤)');
    return SemanticUpdateType.GLOBAL;
  }

  // 3. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (–±–æ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
  // –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö –∞–±–∑–∞—Ü–µ–≤
  const deletedTextLength = changeInfo.oldText?.length || 0;
  if (deletedTextLength > 500) {
    console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (>500 —Å–∏–º–≤–æ–ª–æ–≤)');
    return SemanticUpdateType.GLOBAL;
  }

  // 4. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –í—Å—Ç–∞–≤–∫–∞ –º–Ω–æ–≥–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–±–æ–ª—å—à–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
  // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤ –±–µ–∑ —è–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  const sentenceCount = (changeInfo.newText.match(/[.!?]+/g) || []).length;
  if (sentenceCount > 5) {
    console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –≤—Å—Ç–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (>5)');
    return SemanticUpdateType.GLOBAL;
  }

  // 5. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ú–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª—å—à–µ 5)
  // –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
  const newlineCount = (changeInfo.newText.match(/\n/g) || []).length;
  if (newlineCount > 5) {
    console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ (>5)');
    return SemanticUpdateType.GLOBAL;
  }

  // 6. –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò - –õ–û–ö–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
  // - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤, —Ñ—Ä–∞–∑
  // - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫  
  // - –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
  // - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?
  const isSimpleEdit = (
    changeInfo.newText.length < 200 &&           // –ù–µ–±–æ–ª—å—à–∞—è –≤—Å—Ç–∞–≤–∫–∞
    deletedTextLength < 100 &&                   // –ù–µ–±–æ–ª—å—à–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ  
    sentenceCount <= 2 &&                        // –ú–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    newlineCount <= 2                            // –ú–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
  );

  if (isSimpleEdit) {
    console.log('üéØ –õ–û–ö–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ–±–ª—é–¥–µ–Ω—ã)');
    return SemanticUpdateType.LOCAL;
  }

  // 7. –ü–û–ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  
  // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–±–∑–∞—Ü–µ–≤ - –ª–æ–∫–∞–ª—å–Ω–æ–µ
  if (sentenceCount <= 2 && !createsNewParagraph && changeInfo.newText.length < 500) {
    console.log('üéØ –õ–û–ö–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ –Ω–æ–≤—ã—Ö –∞–±–∑–∞—Ü–µ–≤');
    return SemanticUpdateType.LOCAL;
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å—á–∏—Ç–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º 
  // (–ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)
  console.log('üåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑');
  return SemanticUpdateType.GLOBAL;
} 