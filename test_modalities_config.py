#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π modalities –≤ Realtime API
"""

import asyncio
import websockets
import json
import os
from dotenv import load_dotenv
import time

load_dotenv()

async def test_modalities_config(modalities_config, turn_detection_type, test_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é modalities"""
    api_key = os.getenv("OPENAI_API_KEY")
    uri = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "OpenAI-Beta": "realtime=v1"
    }
    
    print(f"\n{'='*60}")
    print(f"–¢–ï–°–¢: {test_name}")
    print(f"Modalities: {modalities_config}")
    print(f"Turn detection: {turn_detection_type}")
    print(f"{'='*60}")
    
    try:
        async with websockets.connect(uri, additional_headers=headers) as ws:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket")
            
            # –ñ–¥–µ–º session.created
            response = await ws.recv()
            data = json.loads(response)
            if data['type'] == 'session.created':
                print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –Ω—É–∂–Ω—ã–º–∏ modalities
            session_update = {
                "type": "session.update",
                "session": {
                    "modalities": modalities_config,
                    "instructions": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞. –û–ø—Ä–µ–¥–µ–ª—è–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å —Ç–µ–∫—Å—Ç–∞.",
                    "temperature": 0.6,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Realtime API
                    "input_audio_format": "pcm16",
                    "output_audio_format": "pcm16"
                }
            }
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º turn_detection –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if turn_detection_type == "server_vad":
                session_update["session"]["turn_detection"] = {
                    "type": "server_vad",
                    "threshold": 0.5,
                    "prefix_padding_ms": 300,
                    "silence_duration_ms": 200,
                    "create_response": False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
                }
            else:  # semantic_vad
                session_update["session"]["turn_detection"] = {
                    "type": "semantic_vad"
                    # semantic_vad –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                }
            
            await ws.send(json.dumps(session_update))
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω session.update")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = await ws.recv()
            data = json.loads(response)
            
            if data['type'] == 'error':
                print(f"‚ùå –û–®–ò–ë–ö–ê: {data.get('error', {}).get('message')}")
                return False
            elif data['type'] == 'session.updated':
                print("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = {
                    "type": "conversation.item.create",
                    "item": {
                        "type": "message",
                        "role": "user",
                        "content": [{
                            "type": "input_text",
                            "text": "–û–ø—Ä–µ–¥–µ–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å: '–ò–ò —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–æ–ª–∏."
                        }]
                    }
                }
                
                await ws.send(json.dumps(message))
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º modalities
                response_create = {
                    "type": "response.create",
                    "response": {
                        "modalities": modalities_config if "text" in modalities_config else ["text"],
                        "instructions": "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ–ª–∏."
                    }
                }
                
                await ws.send(json.dumps(response_create))
                print("üì§ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞")
                
                # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
                start_time = time.time()
                text_response = ""
                audio_received = False
                
                for _ in range(30):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    try:
                        response = await asyncio.wait_for(ws.recv(), timeout=1.0)
                        data = json.loads(response)
                        event_type = data.get('type', '')
                        
                        if event_type == 'error':
                            print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', {}).get('message')}")
                            return False
                        elif event_type == 'response.text.delta':
                            text_response += data.get('delta', '')
                        elif event_type == 'response.audio.delta':
                            audio_received = True
                        elif event_type == 'response.done':
                            elapsed = time.time() - start_time
                            print(f"\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫")
                            print(f"üìù –¢–µ–∫—Å—Ç: {text_response}")
                            print(f"üîä –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ: {'–î–∞' if audio_received else '–ù–µ—Ç'}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ response
                            if 'response' in data:
                                response_data = data['response']
                                if 'output' in response_data and response_data['output']:
                                    output = response_data['output'][0]
                                    if 'content' in output and output['content']:
                                        content = output['content'][0]
                                        if content.get('type') == 'text' and 'text' in content:
                                            print(f"üìÑ –¢–µ–∫—Å—Ç –∏–∑ response.output: {content['text']}")
                                        elif content.get('type') == 'audio' and 'transcript' in content:
                                            print(f"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏–∑ audio: {content['transcript']}")
                            
                            return True
                            
                    except asyncio.TimeoutError:
                        continue
                        
                print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç - –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {type(e).__name__}: {e}")
        return False

async def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô MODALITIES")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ turn_detection
    test_configs = [
        (["text"], "server_vad", "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç + server_vad"),
        (["text"], "semantic_vad", "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç + semantic_vad"),
        (["audio", "text"], "server_vad", "–ê—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç + server_vad"),
        (["audio", "text"], "semantic_vad", "–ê—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç + semantic_vad"),
    ]
    
    results = {}
    
    for modalities, turn_detection, test_name in test_configs:
        success = await test_modalities_config(modalities, turn_detection, test_name)
        results[test_name] = success
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*60)
    
    for test_name, success in results.items():
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if success else "‚ùå –ù–µ—É–¥–∞—á–Ω–æ"
        print(f"{test_name}: {status}")
    
    print("\nüí° –í–´–í–û–î–´:")
    print("- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ modalities: ['text'] –∏ ['audio', 'text']")
    print("- turn_detection –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: 'server_vad' –∏–ª–∏ 'semantic_vad'")
    print("- –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ['text'] —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º create_response")
    print("- semantic_vad –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    asyncio.run(main()) 