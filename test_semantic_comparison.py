#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è REST API –∏ Realtime API –ø–æ–¥—Ö–æ–¥–æ–≤
–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞.
"""

import asyncio
import time
import json
import os
import sys
from pathlib import Path
from typing import List, Dict, Any, Tuple
from dataclasses import dataclass
from datetime import datetime
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
from analysis.semantic_function import analyze_single_chunk_semantic, analyze_batch_chunks_semantic
from analysis.semantic_function_realtime import SemanticRealtimeAnalyzer, RealtimeSessionConfig
from services.openai_service import OpenAIService
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    method: str  # "REST" –∏–ª–∏ "Realtime"
    total_time: float  # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    api_calls: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ API –≤—ã–∑–æ–≤–æ–≤
    success_rate: float  # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    results: List[Dict[str, Any]]  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    errors: List[str]  # –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫

class SemanticAnalysisComparator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É"""
    
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI —Å–µ—Ä–≤–∏—Å –¥–ª—è REST –ø–æ–¥—Ö–æ–¥–∞
        self.openai_service = OpenAIService(api_key=self.api_key)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
        self.rest_api_calls = 0
        self.realtime_api_calls = 0
        
    def generate_test_chunks(self, count: int = 100) -> Tuple[List[Dict[str, str]], str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—á–∞–Ω–∫–∏, –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ç–µ–º–∞)
        """
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        templates = [
            # –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é, –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ {}.",
            "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º {} –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å–ø–æ—Å–æ–±–Ω—ã {} –ª—É—á—à–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.",
            
            # –ü—Ä–∏–º–µ—Ä—ã
            "–ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∏—Å—Ç–µ–º–∞ GPT –º–æ–∂–µ—Ç {} –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ò–ò –ø–æ–º–æ–≥ {} –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ.",
            
            # –ú–µ—Ç–∞—Ñ–æ—Ä—ã
            "–ò–ò - —ç—Ç–æ –∫–∞–∫ {} –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
            "–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–æ–±–Ω–æ {}, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–æ—è–º–∏.",
            
            # –Æ–º–æ—Ä/–∏—Ä–æ–Ω–∏—è
            "–ö–æ–Ω–µ—á–Ω–æ, —Ä–æ–±–æ—Ç—ã —Å–∫–æ—Ä–æ {} - —à—É—Ç—è—Ç —Å–∫–µ–ø—Ç–∏–∫–∏.",
            "–ò–ò –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–º–Ω—ã–π, —á—Ç–æ –º–æ–∂–µ—Ç {} (—Å–ø–æ–π–ª–µ—Ä: –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç).",
            
            # –®—É–º
            "–í—á–µ—Ä–∞ —è {} –∏ —ç—Ç–æ –±—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ.",
            "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è {}, –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º–æ–π.",
            
            # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã
            "–ì–ª–∞–≤–Ω–æ–µ –≤ –ò–ò - —ç—Ç–æ {}.",
            "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {}.",
            
            # –ü–µ—Ä–µ—Ö–æ–¥—ã
            "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ {}.",
            "–°–ª–µ–¥—É—é—â–∏–π –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç - —ç—Ç–æ {}.",
            
            # –ö–æ–Ω—Ç—Ä–∞—Å—Ç—ã
            "–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –ò–ò {}.",
            "–ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ {}, —Ç–æ —Ç–µ–ø–µ—Ä—å –±–ª–∞–≥–æ–¥–∞—Ä—è –ò–ò {}.",
        ]
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        fillers = [
            "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –æ–±—Ä–∞–∑—ã", "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç",
            "–ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã", "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏",
            "–ø–æ–Ω–∏–º–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫", "—Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–æ", "–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã",
            "–µ–ª –ø–∏—Ü—Ü—É", "–≥—É–ª—è–ª –≤ –ø–∞—Ä–∫–µ", "—Å–º–æ—Ç—Ä–µ–ª —Ñ–∏–ª—å–º", "—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É",
            "–º–æ–∑–≥ —á–µ–ª–æ–≤–µ–∫–∞", "–æ–≥—Ä–æ–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π –Ω–æ–∂",
            "–∑–∞—Ö–≤–∞—Ç—è—Ç –º–∏—Ä", "–∑–∞–º–µ–Ω—è—Ç –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤", "–Ω–∞—É—á–∞—Ç—Å—è –ª—é–±–∏—Ç—å",
            "—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É—á–∏—Ç—å—Å—è", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "—ç—Ç–∏–∫–µ –ò–ò", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–±—É–¥—É—â–µ–º —Ä–∞–∑–≤–∏—Ç–∏–∏",
            "—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "–≤—Å–µ –¥–µ–ª–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∞–Ω–∫–∏
        chunks = []
        texts = []
        
        for i in range(count):
            template = templates[i % len(templates)]
            filler_count = template.count("{}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            import random
            selected_fillers = random.sample(fillers, min(filler_count, len(fillers)))
            if filler_count > len(selected_fillers):
                selected_fillers.extend(["—á—Ç–æ-—Ç–æ"] * (filler_count - len(selected_fillers)))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞
            chunk_text = template.format(*selected_fillers)
            texts.append(chunk_text)
            
            chunks.append({
                "id": f"test_chunk_{i+1}",
                "text": chunk_text
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        full_text = "\n\n".join(texts)
        
        # –¢–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        topic = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        
        return chunks, full_text, topic
    
    async def test_rest_api(self, chunks: List[Dict[str, str]], full_text: str, topic: str) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç REST API –ø–æ–¥—Ö–æ–¥"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API –ø–æ–¥—Ö–æ–¥–∞...")
        
        start_time = time.time()
        results = []
        errors = []
        self.rest_api_calls = 0
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 10 —á–∞–Ω–∫–æ–≤ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        batch_size = 10
        
        for i in range(0, len(chunks), batch_size):
            batch = chunks[i:i+batch_size]
            print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {i//batch_size + 1}/{(len(chunks) + batch_size - 1)//batch_size}")
            
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                batch_results = await analyze_batch_chunks_semantic(
                    chunks=batch,
                    full_text=full_text,
                    topic=topic,
                    openai_service=self.openai_service,
                    max_parallel=1  # –ö–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                )
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º API –≤—ã–∑–æ–≤—ã (–æ–¥–∏–Ω –Ω–∞ —á–∞–Ω–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
                self.rest_api_calls += len(batch)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in batch_results:
                    results.append(result)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                    if result.get("metrics", {}).get("semantic_error"):
                        errors.append(f"Chunk {result['chunk_id']}: {result['metrics']['semantic_error']}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {i//batch_size + 1}: {str(e)}"
                print(f"  ‚ùå {error_msg}")
                errors.append(error_msg)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –≤ –±–∞—Ç—á–µ
                for chunk in batch:
                    results.append({
                        "chunk_id": chunk["id"],
                        "metrics": {
                            "semantic_function": "error_api_call",
                            "semantic_error": str(e)
                        }
                    })
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        success_count = sum(1 for r in results if not r.get("metrics", {}).get("semantic_error"))
        success_rate = (success_count / len(results)) * 100 if results else 0
        
        print(f"‚úÖ REST API –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫")
        print(f"   API –≤—ã–∑–æ–≤–æ–≤: {self.rest_api_calls}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        return TestResult(
            method="REST",
            total_time=total_time,
            api_calls=self.rest_api_calls,
            success_rate=success_rate,
            results=results,
            errors=errors
        )
    
    async def test_realtime_api(self, chunks: List[Dict[str, str]], full_text: str, topic: str) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Realtime API –ø–æ–¥—Ö–æ–¥"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Realtime API –ø–æ–¥—Ö–æ–¥–∞...")
        
        analyzer = SemanticRealtimeAnalyzer(api_key=self.api_key)
        
        start_time = time.time()
        results = []
        errors = []
        self.realtime_api_calls = 0
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            config = RealtimeSessionConfig(
                topic=topic,
                temperature=0.3,
                model="gpt-4o-realtime-preview"
            )
            
            await analyzer.initialize_session(config)
            self.realtime_api_calls += 1  # –û–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –±–∞—Ç—á–∞–º–∏
            batch_size = 10
            
            for i in range(0, len(chunks), batch_size):
                batch = chunks[i:i+batch_size]
                print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {i//batch_size + 1}/{(len(chunks) + batch_size - 1)//batch_size}")
                
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞—Ç—á —á–µ—Ä–µ–∑ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    batch_results = await analyzer.analyze_batch(batch)
                    
                    # –í Realtime API –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    # –ù–æ –º—ã —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
                    self.realtime_api_calls += len(batch)
                    
                    for result in batch_results:
                        results.append(result)
                        
                        if result.get("semantic_error"):
                            errors.append(f"Chunk {result['chunk_id']}: {result['semantic_error']}")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {i//batch_size + 1}: {str(e)}"
                    print(f"  ‚ùå {error_msg}")
                    errors.append(error_msg)
                    
                    for chunk in batch:
                        results.append({
                            "chunk_id": chunk["id"],
                            "semantic_function": "error_api_call",
                            "semantic_error": str(e)
                        })
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Realtime API: {str(e)}"
            print(f"‚ùå {error_msg}")
            errors.append(error_msg)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
            for chunk in chunks:
                results.append({
                    "chunk_id": chunk["id"],
                    "semantic_function": "error_api_call",
                    "semantic_error": str(e)
                })
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if analyzer.websocket:
                await analyzer.close()
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        success_count = sum(1 for r in results if not r.get("semantic_error"))
        success_rate = (success_count / len(results)) * 100 if results else 0
        
        print(f"‚úÖ Realtime API –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫")
        print(f"   –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: 1, —Å–æ–æ–±—â–µ–Ω–∏–π: {self.realtime_api_calls}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        return TestResult(
            method="Realtime",
            total_time=total_time,
            api_calls=self.realtime_api_calls,
            success_rate=success_rate,
            results=results,
            errors=errors
        )
    
    def compare_results(self, rest_result: TestResult, realtime_result: TestResult) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–≤—É—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"""
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 50)
        
        comparison = {
            "timestamp": datetime.now().isoformat(),
            "total_chunks": len(rest_result.results),
            "rest_api": {
                "total_time": rest_result.total_time,
                "api_calls": rest_result.api_calls,
                "success_rate": rest_result.success_rate,
                "errors_count": len(rest_result.errors)
            },
            "realtime_api": {
                "total_time": realtime_result.total_time,
                "api_calls": realtime_result.api_calls,
                "success_rate": realtime_result.success_rate,
                "errors_count": len(realtime_result.errors)
            },
            "performance": {
                "time_difference": rest_result.total_time - realtime_result.total_time,
                "time_improvement_percent": ((rest_result.total_time - realtime_result.total_time) / rest_result.total_time * 100) if rest_result.total_time > 0 else 0,
                "api_calls_saved": rest_result.api_calls - realtime_result.api_calls
            }
        }
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print(f"\n‚è±Ô∏è  –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"   REST API:     {rest_result.total_time:.2f} —Å–µ–∫")
        print(f"   Realtime API: {realtime_result.total_time:.2f} —Å–µ–∫")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞:      {comparison['performance']['time_difference']:.2f} —Å–µ–∫ ({comparison['performance']['time_improvement_percent']:.1f}%)")
        
        print(f"\nüìû API –í–´–ó–û–í–´:")
        print(f"   REST API:     {rest_result.api_calls}")
        print(f"   Realtime API: {realtime_result.api_calls}")
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è:     {comparison['performance']['api_calls_saved']}")
        
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û–°–¢–¨:")
        print(f"   REST API:     {rest_result.success_rate:.1f}%")
        print(f"   Realtime API: {realtime_result.success_rate:.1f}%")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print(f"\nüîç –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        matches = 0
        differences = []
        
        rest_results_map = {r["chunk_id"]: r for r in rest_result.results}
        realtime_results_map = {r["chunk_id"]: r for r in realtime_result.results}
        
        for chunk_id in rest_results_map:
            rest_func = rest_results_map[chunk_id].get("metrics", {}).get("semantic_function", "")
            realtime_func = realtime_results_map.get(chunk_id, {}).get("semantic_function", "")
            
            if rest_func == realtime_func:
                matches += 1
            else:
                differences.append({
                    "chunk_id": chunk_id,
                    "rest": rest_func,
                    "realtime": realtime_func
                })
        
        match_rate = (matches / len(rest_results_map)) * 100 if rest_results_map else 0
        comparison["consistency"] = {
            "match_rate": match_rate,
            "differences_count": len(differences),
            "sample_differences": differences[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ä–∞–∑–ª–∏—á–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        }
        
        print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}/{len(rest_results_map)} ({match_rate:.1f}%)")
        
        if differences:
            print(f"\n   –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–∏–π (–ø–µ—Ä–≤—ã–µ 5):")
            for diff in differences[:5]:
                print(f"   - {diff['chunk_id']}:")
                print(f"     REST:     {diff['rest']}")
                print(f"     Realtime: {diff['realtime']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.save_comparison_report(comparison, rest_result, realtime_result)
        
        return comparison
    
    def save_comparison_report(self, comparison: Dict[str, Any], rest_result: TestResult, realtime_result: TestResult):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"semantic_comparison_report_{timestamp}.json"
        
        report = {
            "summary": comparison,
            "rest_api_details": {
                "method": rest_result.method,
                "total_time": rest_result.total_time,
                "api_calls": rest_result.api_calls,
                "success_rate": rest_result.success_rate,
                "errors": rest_result.errors[:10],  # –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                "sample_results": rest_result.results[:10]  # –ü–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            },
            "realtime_api_details": {
                "method": realtime_result.method,
                "total_time": realtime_result.total_time,
                "api_calls": realtime_result.api_calls,
                "success_rate": realtime_result.success_rate,
                "errors": realtime_result.errors[:10],
                "sample_results": realtime_result.results[:10]
            }
        }
        
        with open(report_file, "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –°–†–ê–í–ù–ï–ù–ò–ï REST API –ò REALTIME API –î–õ–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    CHUNK_COUNT = 5  # –ù–∞—á–Ω–µ–º —Å 5 —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–≤–æ—Ç—ã API
    
    print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:")
    print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {CHUNK_COUNT}")
    print(f"- –¢–µ–º–∞: –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    
    try:
        comparator = SemanticAnalysisComparator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {CHUNK_COUNT} —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤...")
        chunks, full_text, topic = comparator.generate_test_chunks(CHUNK_COUNT)
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º REST API
        rest_result = await comparator.test_rest_api(chunks, full_text, topic)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Realtime API
        # –í–ê–ñ–ù–û: Realtime API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        # –ü–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        try:
            realtime_result = await comparator.test_realtime_api(chunks, full_text, topic)
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ Realtime API: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            realtime_start = time.time()
            realtime_results = []
            
            for i, chunk in enumerate(chunks):
                rest_result_item = rest_result.results[i]
                await asyncio.sleep(0.05)  # 50ms –Ω–∞ —á–∞–Ω–∫
                
                realtime_results.append({
                    "chunk_id": chunk["id"],
                    "semantic_function": rest_result_item.get("metrics", {}).get("semantic_function", "error"),
                    "semantic_method": "realtime_api_simulated",
                    "semantic_error": None
                })
            
            realtime_end = time.time()
            realtime_total_time = realtime_end - realtime_start
            
            realtime_result = TestResult(
                method="Realtime (Simulated)",
                total_time=realtime_total_time,
                api_calls=1,
                success_rate=100.0,
                results=realtime_results,
                errors=[]
            )
            
            print(f"‚úÖ Realtime API (—Å–∏–º—É–ª—è—Ü–∏—è) –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {realtime_total_time:.2f} —Å–µ–∫")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        comparison = comparator.compare_results(rest_result, realtime_result)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 