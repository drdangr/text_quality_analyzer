#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API —Å frontend
"""

import requests
import json
import time

API_BASE = "http://localhost:8000"

def test_optimized_endpoint():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    
    print("üß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –≠–ù–î–ü–û–ò–ù–¢–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_text = """–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏.

–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.

–¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü –ø—Ä–æ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ."""
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —á–∞–Ω–∫–æ–≤
    chunks = test_text.split('\n\n')
    boundaries = []
    current_pos = 0
    
    for i, chunk in enumerate(chunks):
        if chunk.strip():
            start = test_text.find(chunk, current_pos)
            end = start + len(chunk)
            boundaries.append({
                "chunk_id": f"test-chunk-{i}",
                "start": start,
                "end": end
            })
            current_pos = end
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    request_data = {
        "full_text": test_text,
        "chunk_boundaries": boundaries,
        "topic": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
    }
    
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:")
    print(f"   –≠–Ω–¥–ø–æ–∏–Ω—Ç: {API_BASE}/api/v2/optimized/semantic/batch")
    print(f"   –ß–∞–Ω–∫–æ–≤: {len(boundaries)}")
    print(f"   –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{API_BASE}/api/v2/optimized/semantic/batch",
            json=request_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢:")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(data.get('results', []))}")
            print(f"   –ú–µ—Ç–æ–¥: {data.get('method', 'unknown')}")
            print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ API: {data.get('requests_count', 'unknown')}")
            print(f"   –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{data.get('tokens_saved', 0):,}")
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
            for result in data.get('results', []):
                chunk_id = result.get('chunk_id', 'unknown')
                semantic_func = result.get('metrics', {}).get('semantic_function', 'unknown')
                print(f"   {chunk_id}: {semantic_func}")
                
            return True
            
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê:")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def test_swagger_ui():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Swagger UI"""
    
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê SWAGGER UI")
    print("=" * 60)
    
    try:
        response = requests.get(f"{API_BASE}/docs")
        if response.status_code == 200:
            print("‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"üìç URL: {API_BASE}/docs")
            print("\nüí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—Ä—É—á–Ω—É—é:")
            print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ {API_BASE}/docs")
            print("   2. –ù–∞–π–¥–∏—Ç–µ /api/v2/optimized/semantic/batch")
            print("   3. –ù–∞–∂–º–∏—Ç–µ 'Try it out'")
            print("   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
            return True
        else:
            print("‚ùå Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Swagger: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        response = requests.get(f"{API_BASE}/api/health")
        if response.status_code != 200:
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
            return
    except:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: uvicorn main:app --reload")
        return
    
    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç
    endpoint_ok = test_optimized_endpoint()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Swagger
    swagger_ok = test_swagger_ui()
    
    # –ò—Ç–æ–≥–∏
    print("\n\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if endpoint_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"   Swagger UI: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if swagger_ok else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    if endpoint_ok:
        print("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. Frontend —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API")
        print("2. –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å >5 —á–∞–Ω–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        print("3. –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞")

if __name__ == "__main__":
    main() 