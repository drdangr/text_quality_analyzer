#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Realtime API - –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import asyncio
import websockets
import json
import os
from dotenv import load_dotenv

load_dotenv()

async def test_realtime_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Realtime API"""
    api_key = os.getenv("OPENAI_API_KEY")
    uri = "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "OpenAI-Beta": "realtime=v1"
    }
    
    print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Realtime API...")
    
    try:
        async with websockets.connect(uri, additional_headers=headers) as ws:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!")
            
            # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏–µ session.created
            response = await ws.recv()
            data = json.loads(response)
            print(f"\nüì® –°–æ–±—ã—Ç–∏–µ: {data['type']}")
            
            if data['type'] == 'session.created':
                session = data.get('session', {})
                print(f"   –ú–æ–¥–µ–ª—å: {session.get('model')}")
                print(f"   ID —Å–µ—Å—Å–∏–∏: {session.get('id')}")
                print(f"   –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏: {session.get('modalities', [])}")
                print(f"   –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ: {session.get('input_audio_format')}")
                print(f"   –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ: {session.get('output_audio_format')}")
                
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                print("\nüîÑ –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Å—Å–∏—é...")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                session_update = {
                    "type": "session.update",
                    "session": {
                        "modalities": ["text"],  # –•–æ—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        "input_audio_format": "pcm16",  # –ù–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ
                        "output_audio_format": "pcm16",
                        "instructions": "You are a helpful assistant that analyzes text semantics."
                    }
                }
                
                await ws.send(json.dumps(session_update))
                
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = await ws.recv()
                data = json.loads(response)
                print(f"\nüì® –û—Ç–≤–µ—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data['type']}")
                
                if data['type'] == 'error':
                    print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', {}).get('message')}")
                else:
                    print("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    print("\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API
                    message = {
                        "type": "conversation.item.create",
                        "item": {
                            "type": "message",
                            "role": "user",
                            "content": [{
                                "type": "input_text",
                                "text": "–û–ø—Ä–µ–¥–µ–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å —Ç–µ–∫—Å—Ç–∞: '–ò–ò —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–æ–ª–∏: —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã, –ø–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ª–∏—Ä–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∫–ª—é—á–µ–≤–æ–π —Ç–µ–∑–∏—Å, —à—É–º, –º–µ—Ç–∞—Ñ–æ—Ä–∞ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—è, —é–º–æ—Ä –∏–ª–∏ –∏—Ä–æ–Ω–∏—è –∏–ª–∏ —Å–∞—Ä–∫–∞–∑–º, —Å–≤—è–∑—É—é—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥, —Å–º–µ–Ω–∞ —Ç–µ–º—ã, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç."
                            }]
                        }
                    }
                    
                    await ws.send(json.dumps(message))
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
                    response_create = {
                        "type": "response.create",
                        "response": {
                            "modalities": ["text"],
                            "instructions": "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ–ª–∏, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
                        }
                    }
                    
                    await ws.send(json.dumps(response_create))
                    
                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                    print("\nüì® –û—Ç–≤–µ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞:")
                    text_accumulator = ""
                    
                    for _ in range(20):  # –ß–∏—Ç–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π
                        try:
                            response = await asyncio.wait_for(ws.recv(), timeout=2.0)
                            data = json.loads(response)
                            event_type = data.get('type', '')
                            
                            if event_type == 'error':
                                print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('error', {}).get('message')}")
                                break
                            elif event_type == 'message.created':
                                print(f"   üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
                            elif event_type == 'message.delta':
                                delta = data.get('delta', {}).get('text', '')
                                text_accumulator += delta
                                print(f"   üìù –¢–µ–∫—Å—Ç (–¥–µ–ª—å—Ç–∞): {delta}")
                            elif event_type == 'message.completed':
                                print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                                print(f"   üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {text_accumulator}")
                                break
                            elif event_type == 'response.text.delta':
                                print(f"   üìù Response —Ç–µ–∫—Å—Ç (–¥–µ–ª—å—Ç–∞): {data.get('delta', '')}")
                            elif event_type == 'response.text.done':
                                print(f"   ‚úÖ Response —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {data.get('text', '')}")
                            elif event_type == 'response.done':
                                print(f"   ‚úÖ –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                                break
                            else:
                                print(f"   üìã {event_type}")
                                # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                if event_type not in ['conversation.item.created', 'response.created', 'response.output_item.added']:
                                    print(f"      –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}")
                                
                        except asyncio.TimeoutError:
                            print("   ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç - –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π")
                            break
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")

async def main():
    print("üöÄ –¢–ï–°–¢ REALTIME API - –ü–û–ù–ò–ú–ê–ï–ú –ö–ê–ö –û–ù –†–ê–ë–û–¢–ê–ï–¢")
    print("=" * 50)
    
    await test_realtime_basic()
    
    print("\nüìå –í–´–í–û–î–´:")
    print("1. Realtime API —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ (Advanced Voice Mode)")
    print("2. –î–∞–∂–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç WebSocket –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
    print("4. –ò–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π, —á–µ–º REST API")

if __name__ == "__main__":
    asyncio.run(main()) 