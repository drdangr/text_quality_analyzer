#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI Realtime API
"""

import os
import asyncio
import websockets
import json
from dotenv import load_dotenv
import ssl

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_realtime_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Realtime API"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    models_to_test = [
        "gpt-4o-realtime-preview-2024-10-01",
        "gpt-4o-mini-realtime-preview",
        "gpt-4o-realtime-preview"
    ]
    
    for model in models_to_test:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model}")
        uri = f"wss://api.openai.com/v1/realtime?model={model}"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers = {
            "Authorization": f"Bearer {api_key}",
            "OpenAI-Beta": "realtime=v1"
        }
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            print("  –ü–æ–ø—ã—Ç–∫–∞ 1: —Å additional_headers...")
            try:
                ws = await websockets.connect(uri, additional_headers=headers)
                await ws.close()
                print("  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!")
                return True
            except TypeError:
                print("  ‚ö†Ô∏è  additional_headers –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            
            print("  –ü–æ–ø—ã—Ç–∫–∞ 2: —Å extra_headers...")
            try:
                ws = await websockets.connect(uri, extra_headers=headers)
                await ws.close()
                print("  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!")
                return True
            except TypeError:
                print("  ‚ö†Ô∏è  extra_headers –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            
            print("  –ü–æ–ø—ã—Ç–∫–∞ 3: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ WebSocket...")
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ssl_context = ssl.create_default_context()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            async with websockets.connect(
                uri,
                ssl=ssl_context,
                origin="https://api.openai.com",
                subprotocols=[],
                compression=None
            ) as websocket:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                auth_message = {
                    "type": "session.update",
                    "session": {
                        "modalities": ["text"],
                        "instructions": "Test connection"
                    }
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await websocket.send(json.dumps({
                    **auth_message,
                    "authorization": f"Bearer {api_key}"
                }))
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    data = json.loads(response)
                    print(f"  üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.get('type', 'unknown')}")
                    
                    if data.get('type') == 'error':
                        print(f"  ‚ùå –û—à–∏–±–∫–∞: {data.get('error', {}).get('message', 'Unknown error')}")
                    else:
                        print("  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!")
                        return True
                except asyncio.TimeoutError:
                    print("  ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
                    
        except websockets.exceptions.InvalidStatusCode as e:
            print(f"  ‚ùå HTTP —Å—Ç–∞—Ç—É—Å: {e.status_code}")
            if e.status_code == 403:
                print("     üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("        - Realtime API –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                print("        - –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è beta —Ñ—É–Ω–∫—Ü–∏–π")
                print("        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ OpenAI –∞–∫–∫–∞—É–Ω—Ç–∞")
            elif e.status_code == 401:
                print("     üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
    
    return False

async def test_regular_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π REST API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ API (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)...")
    
    import httpx
    
    api_key = os.getenv("OPENAI_API_KEY")
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            response = await client.get(
                "https://api.openai.com/v1/models",
                headers=headers
            )
            
            if response.status_code == 200:
                print("‚úÖ REST API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
                # –ò—â–µ–º realtime –º–æ–¥–µ–ª–∏
                data = response.json()
                realtime_models = [
                    model['id'] for model in data.get('data', [])
                    if 'realtime' in model['id'].lower()
                ]
                
                if realtime_models:
                    print(f"üìã –ù–∞–π–¥–µ–Ω—ã Realtime –º–æ–¥–µ–ª–∏: {', '.join(realtime_models)}")
                else:
                    print("‚ö†Ô∏è  Realtime –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            else:
                print(f"‚ùå REST API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ REST API: {e}")

async def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò OPENAI REALTIME API")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π API
    await test_regular_api()
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º Realtime API
    success = await test_realtime_api()
    
    if not success:
        print("\nüìå –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ Realtime API –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        print("2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É OpenAI –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ beta —Ñ—É–Ω–∫—Ü–∏–π")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π API –∫–ª—é—á")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: https://platform.openai.com/docs/api-reference/realtime")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main()) 