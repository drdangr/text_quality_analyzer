#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ fallback.
"""

import requests
import json
from typing import List, Dict

API_BASE = "http://localhost:8000"

def test_batch_processing(chunks: List[Dict], prefer_realtime: bool = True):
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤"""
    
    endpoint = f"{API_BASE}/api/v1/hybrid/chunks/metrics/semantic-batch"
    
    payload = {
        "chunks": chunks,
        "full_text": " ".join([chunk["text"] for chunk in chunks]),  # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —á–∞–Ω–∫–æ–≤
        "topic": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
    }
    
    params = {"prefer_realtime": prefer_realtime}
    
    print(f"\n{'='*60}")
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(chunks)} —á–∞–Ω–∫–æ–≤)")
    print(f"–†–µ–∂–∏–º: {'Realtime –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' if prefer_realtime else 'REST only'}")
    print(f"{'='*60}\n")
    
    response = requests.post(endpoint, json=payload, params=params)
    
    if response.status_code == 200:
        data = response.json()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
        print(json.dumps(data, indent=2, ensure_ascii=False)[:500] + "...")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        realtime_count = sum(1 for r in data["results"] if r.get("metrics", {}).get("semantic_method") == "hybrid_realtime")
        rest_count = sum(1 for r in data["results"] if r.get("metrics", {}).get("semantic_method") == "hybrid_rest")
        errors = [r for r in data["results"] if r.get("metrics", {}).get("semantic_error")]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data['results'])} —á–∞–Ω–∫–æ–≤")
        print(f"   - –ß–µ—Ä–µ–∑ Realtime API: {realtime_count}")
        print(f"   - –ß–µ—Ä–µ–∑ REST API: {rest_count}")
        print(f"   - –° –æ—à–∏–±–∫–∞–º–∏: {len(errors)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(data["results"][:3]):
            print(f"\n  –ß–∞–Ω–∫ {result['chunk_id']}:")
            print(f"    –ú–µ—Ç–æ–¥: {result.get('metrics', {}).get('semantic_method', 'unknown')}")
            print(f"    –§—É–Ω–∫—Ü–∏—è: {result.get('metrics', {}).get('semantic_function', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
            if result.get('metrics', {}).get('semantic_error'):
                print(f"    –û—à–∏–±–∫–∞: {result['metrics']['semantic_error']}")
                
        if len(data["results"]) > 3:
            print(f"\n  ... –∏ –µ—â–µ {len(data['results']) - 3} —á–∞–Ω–∫–æ–≤")
            
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.text)

def main():
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - 15 —á–∞–Ω–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ fallback
    test_chunks = [
        {"id": f"chunk_{i}", "text": f"–¢–µ–∫—Å—Ç {i}: " + text}
        for i, text in enumerate([
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.",
            "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.",
            "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞.",
            "–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏.",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é —Ä–µ—á—å.",
            "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—à–∏–Ω–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            "–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç.",
            "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
            "–ë–ª–æ–∫—á–µ–π–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.",
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç—å.",
            "5G —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É—Å–∫–æ—Ä—è—é—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö.",
            "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–µ—Ç –∏–º–º–µ—Ä—Å–∏–≤–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –º–∏—Ä—ã.",
            "–î–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä.",
            "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.",
            "–ë–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–∏–æ–ª–æ–≥–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
        ], 1)
    ]
    
    # –¢–µ—Å—Ç 1: –° –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Realtime (–æ–∂–∏–¥–∞–µ–º –º–∏–∫—Å Realtime + REST –∏–∑-–∑–∞ fallback)
    test_batch_processing(test_chunks, prefer_realtime=True)
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    import time
    time.sleep(2)
    
    # –¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ REST (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    test_batch_processing(test_chunks, prefer_realtime=False)
    
    # –¢–µ—Å—Ç 3: –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—Ä—Ç–∏—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Realtime)
    print("\n" + "="*60)
    print("–¢–µ—Å—Ç —Å –º–∞–ª—ã–º –æ–±—ä–µ–º–æ–º (3 —á–∞–Ω–∫–∞) - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Realtime")
    print("="*60)
    test_batch_processing(test_chunks[:3], prefer_realtime=True)

if __name__ == "__main__":
    main() 