#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ rate limiting –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import requests
import json
import time

API_BASE = "http://localhost:8000"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
def create_test_chunks(count: int):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏"""
    chunks = []
    for i in range(count):
        chunks.append({
            "id": f"test-{i}",
            "text": f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫ –Ω–æ–º–µ—Ä {i}. " * 10  # ~100 —Å–∏–º–≤–æ–ª–æ–≤
        })
    return chunks

def test_batch_with_size(chunk_count: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤"""
    
    print(f"\n{'='*60}")
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {chunk_count} —á–∞–Ω–∫–æ–≤")
    print(f"{'='*60}\n")
    
    chunks = create_test_chunks(chunk_count)
    endpoint = f"{API_BASE}/api/v1/hybrid/chunks/metrics/semantic-batch"
    
    payload = {
        "chunks": chunks,
        "full_text": " ".join([c["text"] for c in chunks]),
        "topic": "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting"
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
    params = {"prefer_realtime": "false"}
    
    start_time = time.time()
    
    try:
        response = requests.post(endpoint, json=payload, params=params)
        response.raise_for_status()
        
        elapsed = time.time() - start_time
        data = response.json()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = len([r for r in data["results"] if r["metrics"].get("semantic_function")])
        failed = len(data.get("failed", []))
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —á–∞–Ω–∫: {elapsed/chunk_count:.2f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ rate limit
        rate_limit_errors = [
            r for r in data["results"] 
            if "rate_limit" in str(r["metrics"].get("semantic_error", ""))
        ]
        
        if rate_limit_errors:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(rate_limit_errors)} –æ—à–∏–±–æ–∫ rate limit!")
        else:
            print("‚úÖ –û—à–∏–±–æ–∫ rate limit –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if hasattr(e.response, 'text'):
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Rate Limiting")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    test_sizes = [5, 15, 25]  # –ú–∞–ª—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –±–æ–ª—å—à–æ–π
    
    for size in test_sizes:
        test_batch_with_size(size)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        if size < test_sizes[-1]:
            print("\n‚è∏Ô∏è –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            time.sleep(10)
    
    print("\n" + "="*60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("- –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ >10 —á–∞–Ω–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞—é—Ç—Å—è –ø–∞—É–∑—ã")
    print("- –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ >50 —á–∞–Ω–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∞—Ç—å real-time –∞–Ω–∞–ª–∏–∑")
    print("- –ü—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–∫–∞—Ö 429 —É–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ config/rate_limit_config.py")

if __name__ == "__main__":
    main() 