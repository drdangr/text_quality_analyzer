#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback.
"""

import asyncio
import aiohttp
import json
import time
from typing import List, Dict


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"  # –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
HYBRID_ENDPOINT = f"{API_BASE_URL}/api/v1/hybrid/chunks/metrics/semantic-batch"
STATS_ENDPOINT = f"{API_BASE_URL}/api/v1/hybrid/stats"


async def test_hybrid_batch_api():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ API"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_chunks = [
        {"id": "1", "text": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."},
        {"id": "2", "text": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –ò–ò."},
        {"id": "3", "text": "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞."},
        {"id": "4", "text": "GPT –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."},
        {"id": "5", "text": "–ë—É–¥—É—â–µ–µ –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –ò–ò-—Å–∏—Å—Ç–µ–º–∞–º–∏."}
    ]
    
    full_text = " ".join([c["text"] for c in test_chunks])
    
    request_data = {
        "chunks": test_chunks,
        "full_text": full_text,
        "topic": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "max_parallel": 3
    }
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ API")
    print("=" * 60)
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç 1: –° Realtime API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å Realtime API (prefer_realtime=true)")
        print("-" * 40)
        
        try:
            start_time = time.time()
            async with session.post(
                HYBRID_ENDPOINT,
                json=request_data,
                params={"prefer_realtime": True, "adaptive_batching": True}
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    elapsed = time.time() - start_time
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.2f}—Å")
                    print(f"   –ß–∞–Ω–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result['results'])}")
                    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(result.get('failed', []))}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤
                    methods = {}
                    for chunk_result in result['results']:
                        method = chunk_result['metrics'].get('api_method', 'unknown')
                        methods[method] = methods.get(method, 0) + 1
                    
                    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {methods}")
                    
                    # –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print("\n   –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    for i, chunk_result in enumerate(result['results'][:3]):
                        chunk_id = chunk_result['chunk_id']
                        semantic = chunk_result['metrics'].get('semantic_function', 'N/A')
                        method = chunk_result['metrics'].get('api_method', 'N/A')
                        print(f"   - –ß–∞–Ω–∫ {chunk_id}: {semantic} (—á–µ—Ä–µ–∑ {method})")
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {response.status}")
                    error_text = await response.text()
                    print(f"   {error_text}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ REST API
        print("\n\n2Ô∏è‚É£ –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ —Å REST API (prefer_realtime=false)")
        print("-" * 40)
        
        try:
            start_time = time.time()
            async with session.post(
                HYBRID_ENDPOINT,
                json=request_data,
                params={"prefer_realtime": False, "adaptive_batching": False}
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    elapsed = time.time() - start_time
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.2f}—Å")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–µ—Ä–µ–∑ REST
                    all_rest = all(
                        r['metrics'].get('api_method') == 'rest' 
                        for r in result['results']
                    )
                    print(f"   –í—Å–µ —á–µ—Ä–µ–∑ REST API: {'‚úÖ' if all_rest else '‚ùå'}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n\n3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ API")
        print("-" * 40)
        
        try:
            async with session.get(STATS_ENDPOINT) as response:
                if response.status == 200:
                    stats = await response.json()
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {stats['status']}")
                    
                    if 'realtime_api' in stats:
                        rt_stats = stats['realtime_api']
                        print(f"   Realtime API –¥–æ—Å—Ç—É–ø–µ–Ω: {rt_stats['available']}")
                        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: {rt_stats['successes']}")
                        print(f"   –û—à–∏–±–æ–∫: {rt_stats['failures']}")
                        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {stats['recommendation']}")
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: HTTP {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


async def test_single_chunk_api():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π API"""
    
    print("\n\n4Ô∏è‚É£ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞")
    print("-" * 40)
    
    test_data = {
        "chunk_id": "test_single",
        "chunk_text": "ChatGPT –∏–∑–º–µ–Ω–∏–ª –ø–æ–¥—Ö–æ–¥ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –ò–ò, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö.",
        "full_text": "–°—Ç–∞—Ç—å—è –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ...",
        "topic": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    }
    
    async with aiohttp.ClientSession() as session:
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å Realtime
            print("\n   –° Realtime API:")
            start_time = time.time()
            
            async with session.post(
                f"{API_BASE_URL}/api/v1/hybrid/chunk/metrics/semantic",
                json=test_data,
                params={"prefer_realtime": True}
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    elapsed = time.time() - start_time
                    
                    metrics = result['metrics']
                    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {elapsed:.3f}—Å:")
                    print(f"      –§—É–Ω–∫—Ü–∏—è: {metrics.get('semantic_function')}")
                    print(f"      –ú–µ—Ç–æ–¥: {metrics.get('api_method')}")
                    print(f"      –ó–∞–¥–µ—Ä–∂–∫–∞ API: {metrics.get('api_latency', 0):.3f}—Å")
                    
            # –ó–∞—Ç–µ–º —Å REST
            print("\n   –° REST API:")
            start_time = time.time()
            
            async with session.post(
                f"{API_BASE_URL}/api/v1/hybrid/chunk/metrics/semantic",
                json=test_data,
                params={"prefer_realtime": False}
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    elapsed = time.time() - start_time
                    
                    metrics = result['metrics']
                    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {elapsed:.3f}—Å:")
                    print(f"      –§—É–Ω–∫—Ü–∏—è: {metrics.get('semantic_function')}")
                    print(f"      –ú–µ—Ç–æ–¥: {metrics.get('api_method')}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–´–• API –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 60)
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await test_hybrid_batch_api()
    await test_single_chunk_api()
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüí° –í—ã–≤–æ–¥—ã:")
    print("- –ì–∏–±—Ä–∏–¥–Ω—ã–π API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥")
    print("- Realtime API –¥–∞–µ—Ç 4x —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ –º–∞–ª—ã—Ö –æ–±—ä–µ–º–∞—Ö")
    print("- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
    print("- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ –ø–∞–∫–µ—Ç—ã")


if __name__ == "__main__":
    asyncio.run(main()) 