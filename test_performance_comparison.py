#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: REST API vs Realtime API
"""

import asyncio
import time
import sys
import os
import statistics
from typing import List, Dict, Any
from dataclasses import dataclass
import json
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from analysis.semantic_function_realtime import SemanticRealtimeAnalyzer, RealtimeSessionConfig
from services.openai_service import OpenAIService
from dotenv import load_dotenv

load_dotenv()

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    method: str
    total_chunks: int
    successful: int
    failed: int
    total_time: float
    avg_time_per_chunk: float
    min_time: float
    max_time: float
    accuracy: float
    errors: List[str]

class PerformanceComparator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
    
    def __init__(self, topic: str = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"):
        self.topic = topic
        self.test_chunks = self._generate_test_chunks()
        
    def _generate_test_chunks(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        base_chunks = [
            # –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã
            {"id": "1", "text": "–ò–ò —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.", "expected": "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã"},
            {"id": "2", "text": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.", "expected": "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã"},
            {"id": "3", "text": "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞.", "expected": "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã"},
            
            # –ü—Ä–∏–º–µ—Ä—ã
            {"id": "4", "text": "–ù–∞–ø—Ä–∏–º–µ—Ä, GPT-4 –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Python.", "expected": "–ø–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ"},
            {"id": "5", "text": "Siri –∏ Alexa - –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —Å –ò–ò.", "expected": "–ø–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ"},
            
            # –ú–µ—Ç–∞—Ñ–æ—Ä—ã
            {"id": "6", "text": "–ò–ò - —ç—Ç–æ –Ω–æ–≤–æ–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–π —ç–ø–æ—Ö–∏.", "expected": "–º–µ—Ç–∞—Ñ–æ—Ä–∞ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—è"},
            {"id": "7", "text": "–ù–µ–π—Ä–æ—Å–µ—Ç—å –∫–∞–∫ —Å–∞–¥–æ–≤–Ω–∏–∫, –≤—ã—Ä–∞—â–∏–≤–∞—é—â–∏–π –∑–Ω–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö.", "expected": "–º–µ—Ç–∞—Ñ–æ—Ä–∞ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—è"},
            
            # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã
            {"id": "8", "text": "–ò–ò - –∫–ª—é—á–µ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è XXI –≤–µ–∫–∞.", "expected": "–∫–ª—é—á–µ–≤–æ–π —Ç–µ–∑–∏—Å"},
            {"id": "9", "text": "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –æ—Å–≤–æ–∏—Ç –ò–ò.", "expected": "–∫–ª—é—á–µ–≤–æ–π —Ç–µ–∑–∏—Å"},
            
            # –®—É–º
            {"id": "10", "text": "–í—á–µ—Ä–∞ —è –∫—É–ø–∏–ª –Ω–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏.", "expected": "—à—É–º"},
            {"id": "11", "text": "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è.", "expected": "—à—É–º"},
            
            # –Æ–º–æ—Ä/–∏—Ä–æ–Ω–∏—è
            {"id": "12", "text": "–°–∫–æ—Ä–æ –ò–ò –±—É–¥–µ—Ç —Å–∞–º —Å–µ–±—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, –∞ –Ω–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ—Ñ–µ –ø–∏—Ç—å!", "expected": "—é–º–æ—Ä –∏–ª–∏ –∏—Ä–æ–Ω–∏—è –∏–ª–∏ —Å–∞—Ä–∫–∞–∑–º"},
            {"id": "13", "text": "–ò–ò –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–º–Ω—ã–π, —á—Ç–æ –¥–∞–∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç –º–æ–π –ø–æ—á–µ—Ä–∫ –≤—Ä–∞—á–∞.", "expected": "—é–º–æ—Ä –∏–ª–∏ –∏—Ä–æ–Ω–∏—è –∏–ª–∏ —Å–∞—Ä–∫–∞–∑–º"},
            
            # –°–º–µ–Ω–∞ —Ç–µ–º—ã
            {"id": "14", "text": "–ö—Å—Ç–∞—Ç–∏, –æ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö...", "expected": "—Å–º–µ–Ω–∞ —Ç–µ–º—ã"},
            {"id": "15", "text": "–¢–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –±–ª–æ–∫—á–µ–π–Ω–µ.", "expected": "—Å–º–µ–Ω–∞ —Ç–µ–º—ã"},
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
        additional_chunks = [
            {"id": f"load_{i}", "text": f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç {i} –ø—Ä–æ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.", "expected": "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã"}
            for i in range(16, 31)
        ]
        
        return base_chunks + additional_chunks
    
    async def test_rest_api(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º REST API"""
        print("\nüîµ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REST API")
        print("-" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI service
        api_key = os.getenv("OPENAI_API_KEY")
        openai_service = OpenAIService(api_key=api_key)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        from analysis.semantic_function import analyze_batch_chunks_semantic
        
        chunks = [{"id": c["id"], "text": c["text"]} for c in self.test_chunks]
        chunk_times = []
        errors = []
        successful = 0
        correct_predictions = 0
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        full_text = "\n\n".join([c["text"] for c in chunks])
        
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ –±–∞—Ç—á–∞–º –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            batch_size = 5
            for i in range(0, len(chunks), batch_size):
                batch = chunks[i:i+batch_size]
                batch_start = time.time()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                results = await analyze_batch_chunks_semantic(
                    chunks=batch,
                    full_text=full_text,
                    topic=self.topic,
                    openai_service=openai_service,
                    max_parallel=batch_size
                )
                
                batch_time = time.time() - batch_start
                chunk_times.extend([batch_time / len(batch)] * len(batch))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for chunk, result in zip(self.test_chunks[i:i+batch_size], results):
                    metrics = result.get("metrics", {})
                    semantic_func = metrics.get("semantic_function", "")
                    
                    if semantic_func and "error" not in semantic_func:
                        successful += 1
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
                        expected = chunk["expected"]
                        actual = semantic_func
                        if expected in actual or actual in expected:
                            correct_predictions += 1
                    else:
                        errors.append(f"Chunk {chunk['id']}: {metrics.get('semantic_error', 'Unknown error')}")
                
                print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á {i//batch_size + 1}/{(len(chunks) + batch_size - 1)//batch_size}")
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                
        except Exception as e:
            errors.append(f"General error: {str(e)}")
            
        total_time = time.time() - start_time
        
        return TestResult(
            method="REST API",
            total_chunks=len(chunks),
            successful=successful,
            failed=len(chunks) - successful,
            total_time=total_time,
            avg_time_per_chunk=statistics.mean(chunk_times) if chunk_times else 0,
            min_time=min(chunk_times) if chunk_times else 0,
            max_time=max(chunk_times) if chunk_times else 0,
            accuracy=(correct_predictions / successful * 100) if successful > 0 else 0,
            errors=errors[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        )
    
    async def test_realtime_api(self) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º Realtime API"""
        print("\nüü¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REALTIME API")
        print("-" * 60)
        
        api_key = os.getenv("OPENAI_API_KEY")
        analyzer = SemanticRealtimeAnalyzer(api_key=api_key)
        
        chunks = [{"id": c["id"], "text": c["text"]} for c in self.test_chunks]
        chunk_times = []
        errors = []
        successful = 0
        correct_predictions = 0
        
        start_time = time.time()
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            config = RealtimeSessionConfig(
                topic=self.topic,
                temperature=0.6
            )
            await analyzer.initialize_session(config)
            print("  ‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            for i, (chunk, test_chunk) in enumerate(zip(chunks, self.test_chunks)):
                chunk_start = time.time()
                
                result = await analyzer.analyze_chunk(
                    chunk_id=chunk["id"],
                    chunk_text=chunk["text"]
                )
                
                chunk_time = time.time() - chunk_start
                chunk_times.append(chunk_time)
                
                if result.get("semantic_function") and "error" not in result.get("semantic_function", ""):
                    successful += 1
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
                    expected = test_chunk["expected"]
                    actual = result.get("semantic_function", "")
                    if expected in actual or actual in expected:
                        correct_predictions += 1
                else:
                    errors.append(f"Chunk {chunk['id']}: {result.get('semantic_error', 'Unknown error')}")
                
                if (i + 1) % 5 == 0:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(chunks)} —á–∞–Ω–∫–æ–≤")
                    
        except Exception as e:
            errors.append(f"General error: {str(e)}")
            
        finally:
            await analyzer.close()
            
        total_time = time.time() - start_time
        
        return TestResult(
            method="Realtime API",
            total_chunks=len(chunks),
            successful=successful,
            failed=len(chunks) - successful,
            total_time=total_time,
            avg_time_per_chunk=statistics.mean(chunk_times) if chunk_times else 0,
            min_time=min(chunk_times) if chunk_times else 0,
            max_time=max(chunk_times) if chunk_times else 0,
            accuracy=(correct_predictions / successful * 100) if successful > 0 else 0,
            errors=errors[:5]
        )
    
    def print_results(self, rest_result: TestResult, realtime_result: TestResult):
        """–í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print("\n" + "="*80)
        print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*80)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\n{'–ú–µ—Ç—Ä–∏–∫–∞':<30} {'REST API':>20} {'Realtime API':>20} {'–†–∞–∑–Ω–∏—Ü–∞':>15}")
        print("-" * 85)
        
        # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
        print(f"{'–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤':<30} {f'{rest_result.successful}/{rest_result.total_chunks}':>20} "
              f"{f'{realtime_result.successful}/{realtime_result.total_chunks}':>20} "
              f"{f'{realtime_result.successful - rest_result.successful:+d}':>15}")
        
        # –¢–æ—á–Ω–æ—Å—Ç—å
        print(f"{'–¢–æ—á–Ω–æ—Å—Ç—å (%)':<30} {f'{rest_result.accuracy:.1f}%':>20} "
              f"{f'{realtime_result.accuracy:.1f}%':>20} "
              f"{f'{realtime_result.accuracy - rest_result.accuracy:+.1f}%':>15}")
        
        # –í—Ä–µ–º—è
        print(f"{'–û–±—â–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫)':<30} {f'{rest_result.total_time:.2f}':>20} "
              f"{f'{realtime_result.total_time:.2f}':>20} "
              f"{f'{realtime_result.total_time - rest_result.total_time:+.2f}':>15}")
        
        print(f"{'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è/—á–∞–Ω–∫ (—Å–µ–∫)':<30} {f'{rest_result.avg_time_per_chunk:.3f}':>20} "
              f"{f'{realtime_result.avg_time_per_chunk:.3f}':>20} "
              f"{f'{realtime_result.avg_time_per_chunk - rest_result.avg_time_per_chunk:+.3f}':>15}")
        
        print(f"{'–ú–∏–Ω. –≤—Ä–µ–º—è/—á–∞–Ω–∫ (—Å–µ–∫)':<30} {f'{rest_result.min_time:.3f}':>20} "
              f"{f'{realtime_result.min_time:.3f}':>20} "
              f"{f'{realtime_result.min_time - rest_result.min_time:+.3f}':>15}")
        
        print(f"{'–ú–∞–∫—Å. –≤—Ä–µ–º—è/—á–∞–Ω–∫ (—Å–µ–∫)':<30} {f'{rest_result.max_time:.3f}':>20} "
              f"{f'{realtime_result.max_time:.3f}':>20} "
              f"{f'{realtime_result.max_time - rest_result.max_time:+.3f}':>15}")
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        speedup = rest_result.avg_time_per_chunk / realtime_result.avg_time_per_chunk if realtime_result.avg_time_per_chunk > 0 else 0
        print(f"\n{'–£—Å–∫–æ—Ä–µ–Ω–∏–µ':<30} {f'{speedup:.2f}x –±—ã—Å—Ç—Ä–µ–µ Realtime API':>55}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n" + "="*80)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("="*80)
        
        if realtime_result.successful >= rest_result.successful and speedup > 1.2:
            print("‚úÖ Realtime API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –õ–£–ß–®–£–Æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
            print(f"   - –í {speedup:.1f} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ")
            print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å {realtime_result.accuracy:.1f}% vs {rest_result.accuracy:.1f}%")
            print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤")
        elif rest_result.successful > realtime_result.successful * 1.1:
            print("‚úÖ REST API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –õ–£–ß–®–£–Æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:")
            print(f"   - –ë–æ–ª—å—à–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {rest_result.successful} vs {realtime_result.successful}")
            print("   - –ü—Ä–æ—â–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
            print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á")
        else:
            print("‚öñÔ∏è  –û–±–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –°–û–ü–û–°–¢–ê–í–ò–ú–´–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print("   - REST API: –ø—Ä–æ—â–µ, –Ω–∞–¥–µ–∂–Ω–µ–µ, —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ")
            print("   - Realtime API: –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤, —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("   - –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_results(rest_result, realtime_result)
    
    def _save_results(self, rest_result: TestResult, realtime_result: TestResult):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"performance_comparison_{timestamp}.json"
        
        results = {
            "timestamp": timestamp,
            "topic": self.topic,
            "total_chunks": rest_result.total_chunks,
            "rest_api": {
                "successful": rest_result.successful,
                "failed": rest_result.failed,
                "total_time": rest_result.total_time,
                "avg_time_per_chunk": rest_result.avg_time_per_chunk,
                "accuracy": rest_result.accuracy
            },
            "realtime_api": {
                "successful": realtime_result.successful,
                "failed": realtime_result.failed,
                "total_time": realtime_result.total_time,
                "avg_time_per_chunk": realtime_result.avg_time_per_chunk,
                "accuracy": realtime_result.accuracy
            },
            "speedup": rest_result.avg_time_per_chunk / realtime_result.avg_time_per_chunk if realtime_result.avg_time_per_chunk > 0 else 0
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: REST API vs REALTIME API")
    print("="*80)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 30 —á–∞–Ω–∫–∞—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏")
    print("="*80)
    
    comparator = PerformanceComparator(topic="–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ API
    rest_result = await comparator.test_rest_api()
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    realtime_result = await comparator.test_realtime_api()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    comparator.print_results(rest_result, realtime_result)

if __name__ == "__main__":
    asyncio.run(main()) 